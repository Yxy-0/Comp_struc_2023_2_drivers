
Comp_Struct_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000085c  08006588  08006588  00016588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006de4  08006de4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006de4  08006de4  00016de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dec  08006dec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dec  08006dec  00016dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006df0  08006df0  00016df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  20000074  08006e68  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  08006e68  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000113e4  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029cb  00000000  00000000  000314cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  00033e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6c  00000000  00000000  00034d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027970  00000000  00000000  000358ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013286  00000000  00000000  0005d25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed8d2  00000000  00000000  000704e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004478  00000000  00000000  0015ddb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0016222c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006570 	.word	0x08006570

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006570 	.word	0x08006570

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	b29a      	uxth	r2, r3
 800057c:	f04f 33ff 	mov.w	r3, #4294967295
 8000580:	68b9      	ldr	r1, [r7, #8]
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <_write+0x28>)
 8000584:	f003 fac0 	bl	8003b08 <HAL_UART_Transmit>
  return len;
 8000588:	687b      	ldr	r3, [r7, #4]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200000e4 	.word	0x200000e4

08000598 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	if (ring_buffer_put(&ring_buffer_uart_rx, rx_data) == 0) {
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <HAL_UART_RxCpltCallback+0x34>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	480a      	ldr	r0, [pc, #40]	; (80005d0 <HAL_UART_RxCpltCallback+0x38>)
 80005a8:	f000 fc53 	bl	8000e52 <ring_buffer_put>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d102      	bne.n	80005b8 <HAL_UART_RxCpltCallback+0x20>
		printf("Rx buffer is full\r\n");
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <HAL_UART_RxCpltCallback+0x3c>)
 80005b4:	f005 f974 	bl	80058a0 <puts>
	}

	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80005b8:	2201      	movs	r2, #1
 80005ba:	4904      	ldr	r1, [pc, #16]	; (80005cc <HAL_UART_RxCpltCallback+0x34>)
 80005bc:	4806      	ldr	r0, [pc, #24]	; (80005d8 <HAL_UART_RxCpltCallback+0x40>)
 80005be:	f003 fb2d 	bl	8003c1c <HAL_UART_Receive_IT>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000188 	.word	0x20000188
 80005d0:	2000017c 	.word	0x2000017c
 80005d4:	08006588 	.word	0x08006588
 80005d8:	200000e4 	.word	0x200000e4

080005dc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	80fb      	strh	r3, [r7, #6]
	key_event = GPIO_Pin;
 80005e6:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_GPIO_EXTI_Callback+0x1c>)
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	8013      	strh	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	20000000 	.word	0x20000000

080005fc <keypad_init>:
void keypad_init(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	/* Set the rows high to be detected in the columns by rising interrupt */
	ROW_1_GPIO_Port->BSRR = ROW_1_Pin;
 8000600:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000604:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000608:	619a      	str	r2, [r3, #24]
	ROW_2_GPIO_Port->BSRR = ROW_2_Pin;
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <keypad_init+0x2c>)
 800060c:	2208      	movs	r2, #8
 800060e:	619a      	str	r2, [r3, #24]
	ROW_3_GPIO_Port->BSRR = ROW_3_Pin;
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <keypad_init+0x2c>)
 8000612:	2220      	movs	r2, #32
 8000614:	619a      	str	r2, [r3, #24]
	ROW_4_GPIO_Port->BSRR = ROW_4_Pin;
 8000616:	4b04      	ldr	r3, [pc, #16]	; (8000628 <keypad_init+0x2c>)
 8000618:	2210      	movs	r2, #16
 800061a:	619a      	str	r2, [r3, #24]
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	48000400 	.word	0x48000400

0800062c <keypad_handler>:
uint8_t keypad_handler(uint16_t column_to_evaluate)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	uint8_t key_pressed = 0xFF; // Value to return
 8000636:	23ff      	movs	r3, #255	; 0xff
 8000638:	73fb      	strb	r3, [r7, #15]

	/*** Debounce the key press (remove noise in the key) ***/
#define KEY_DEBOUNCE_MS 300 /*!> Minimum time required for since last press */
	static uint32_t last_pressed_tick = 0;
	if (HAL_GetTick() <= (last_pressed_tick + KEY_DEBOUNCE_MS)) {
 800063a:	f000 feb1 	bl	80013a0 <HAL_GetTick>
 800063e:	4602      	mov	r2, r0
 8000640:	4b8d      	ldr	r3, [pc, #564]	; (8000878 <keypad_handler+0x24c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000648:	429a      	cmp	r2, r3
 800064a:	d801      	bhi.n	8000650 <keypad_handler+0x24>
		// less than KEY_DEBOUNCE_MS since last press. Probably noise
		return key_pressed; // return 0xFF
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	e176      	b.n	800093e <keypad_handler+0x312>
	}
	last_pressed_tick = HAL_GetTick();
 8000650:	f000 fea6 	bl	80013a0 <HAL_GetTick>
 8000654:	4603      	mov	r3, r0
 8000656:	4a88      	ldr	r2, [pc, #544]	; (8000878 <keypad_handler+0x24c>)
 8000658:	6013      	str	r3, [r2, #0]

	/*** Check in which column the event happened ***/
	switch (column_to_evaluate) {
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000660:	d012      	beq.n	8000688 <keypad_handler+0x5c>
 8000662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000666:	f300 815a 	bgt.w	800091e <keypad_handler+0x2f2>
 800066a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800066e:	f000 80af 	beq.w	80007d0 <keypad_handler+0x1a4>
 8000672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000676:	f300 8152 	bgt.w	800091e <keypad_handler+0x2f2>
 800067a:	2b80      	cmp	r3, #128	; 0x80
 800067c:	f000 8100 	beq.w	8000880 <keypad_handler+0x254>
 8000680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000684:	d050      	beq.n	8000728 <keypad_handler+0xfc>
 8000686:	e14a      	b.n	800091e <keypad_handler+0x2f2>
	case COLUMN_1_Pin:
		ROW_1_GPIO_Port->BSRR = ROW_1_Pin; // turn on row 1
 8000688:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800068c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000690:	619a      	str	r2, [r3, #24]
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;  // turn off row 2
 8000692:	4b7a      	ldr	r3, [pc, #488]	; (800087c <keypad_handler+0x250>)
 8000694:	2208      	movs	r2, #8
 8000696:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;  // turn off row 3
 8000698:	4b78      	ldr	r3, [pc, #480]	; (800087c <keypad_handler+0x250>)
 800069a:	2220      	movs	r2, #32
 800069c:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;  // turn off row 4
 800069e:	4b77      	ldr	r3, [pc, #476]	; (800087c <keypad_handler+0x250>)
 80006a0:	2210      	movs	r2, #16
 80006a2:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(2); // wait for voltage to establish
 80006a4:	2002      	movs	r0, #2
 80006a6:	f000 fe87 	bl	80013b8 <HAL_Delay>
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 80006aa:	4b74      	ldr	r3, [pc, #464]	; (800087c <keypad_handler+0x250>)
 80006ac:	691b      	ldr	r3, [r3, #16]
 80006ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <keypad_handler+0x8e>
			key_pressed = 0x01; // if column 1 is still high -> column 1 + row 1 = key 1
 80006b6:	2301      	movs	r3, #1
 80006b8:	73fb      	strb	r3, [r7, #15]

		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 80006ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006c2:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BSRR = ROW_2_Pin; 	// turn on row 2
 80006c4:	4b6d      	ldr	r3, [pc, #436]	; (800087c <keypad_handler+0x250>)
 80006c6:	2208      	movs	r2, #8
 80006c8:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 80006ca:	2002      	movs	r0, #2
 80006cc:	f000 fe74 	bl	80013b8 <HAL_Delay>
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 80006d0:	4b6a      	ldr	r3, [pc, #424]	; (800087c <keypad_handler+0x250>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <keypad_handler+0xb4>
			key_pressed = 0x04; // if column 1 is still high -> column 1 + row 2 = key 4
 80006dc:	2304      	movs	r3, #4
 80006de:	73fb      	strb	r3, [r7, #15]

		}

		ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 80006e0:	4b66      	ldr	r3, [pc, #408]	; (800087c <keypad_handler+0x250>)
 80006e2:	2208      	movs	r2, #8
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BSRR = ROW_3_Pin; 	// turn on row 3
 80006e6:	4b65      	ldr	r3, [pc, #404]	; (800087c <keypad_handler+0x250>)
 80006e8:	2220      	movs	r2, #32
 80006ea:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 80006ec:	2002      	movs	r0, #2
 80006ee:	f000 fe63 	bl	80013b8 <HAL_Delay>
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 80006f2:	4b62      	ldr	r3, [pc, #392]	; (800087c <keypad_handler+0x250>)
 80006f4:	691b      	ldr	r3, [r3, #16]
 80006f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <keypad_handler+0xd6>
			key_pressed = 0x07; // if column 1 is still high -> column 1 + row 3 = key 7
 80006fe:	2307      	movs	r3, #7
 8000700:	73fb      	strb	r3, [r7, #15]

		}

		ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 8000702:	4b5e      	ldr	r3, [pc, #376]	; (800087c <keypad_handler+0x250>)
 8000704:	2220      	movs	r2, #32
 8000706:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BSRR = ROW_4_Pin; 	// turn on row 4
 8000708:	4b5c      	ldr	r3, [pc, #368]	; (800087c <keypad_handler+0x250>)
 800070a:	2210      	movs	r2, #16
 800070c:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 800070e:	2002      	movs	r0, #2
 8000710:	f000 fe52 	bl	80013b8 <HAL_Delay>
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 8000714:	4b59      	ldr	r3, [pc, #356]	; (800087c <keypad_handler+0x250>)
 8000716:	691b      	ldr	r3, [r3, #16]
 8000718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800071c:	2b00      	cmp	r3, #0
 800071e:	f000 8104 	beq.w	800092a <keypad_handler+0x2fe>
			key_pressed = 0x0E; // if column 1 is still high -> column 1 + row 4 = key *
 8000722:	230e      	movs	r3, #14
 8000724:	73fb      	strb	r3, [r7, #15]

		}
	  break;
 8000726:	e100      	b.n	800092a <keypad_handler+0x2fe>

	case COLUMN_2_Pin:
		ROW_1_GPIO_Port->BSRR = ROW_1_Pin; // turn on row 1
 8000728:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800072c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000730:	619a      	str	r2, [r3, #24]
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;  // turn off row 2
 8000732:	4b52      	ldr	r3, [pc, #328]	; (800087c <keypad_handler+0x250>)
 8000734:	2208      	movs	r2, #8
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;  // turn off row 3
 8000738:	4b50      	ldr	r3, [pc, #320]	; (800087c <keypad_handler+0x250>)
 800073a:	2220      	movs	r2, #32
 800073c:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;  // turn off row 4
 800073e:	4b4f      	ldr	r3, [pc, #316]	; (800087c <keypad_handler+0x250>)
 8000740:	2210      	movs	r2, #16
 8000742:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(2); // wait for voltage to establish
 8000744:	2002      	movs	r0, #2
 8000746:	f000 fe37 	bl	80013b8 <HAL_Delay>
		if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin) {
 800074a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800074e:	691b      	ldr	r3, [r3, #16]
 8000750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <keypad_handler+0x130>
			key_pressed = 0x02; // if column 1 is still high -> column 1 + row 1 = key 1
 8000758:	2302      	movs	r3, #2
 800075a:	73fb      	strb	r3, [r7, #15]
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 800075c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BSRR = ROW_2_Pin; 	// turn on row 2
 8000766:	4b45      	ldr	r3, [pc, #276]	; (800087c <keypad_handler+0x250>)
 8000768:	2208      	movs	r2, #8
 800076a:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 800076c:	2002      	movs	r0, #2
 800076e:	f000 fe23 	bl	80013b8 <HAL_Delay>
		if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin) {
 8000772:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000776:	691b      	ldr	r3, [r3, #16]
 8000778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <keypad_handler+0x158>
			key_pressed = 0x05; // if column 1 is still high -> column 1 + row 2 = key 4
 8000780:	2305      	movs	r3, #5
 8000782:	73fb      	strb	r3, [r7, #15]
		}

		ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 8000784:	4b3d      	ldr	r3, [pc, #244]	; (800087c <keypad_handler+0x250>)
 8000786:	2208      	movs	r2, #8
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BSRR = ROW_3_Pin; 	// turn on row 3
 800078a:	4b3c      	ldr	r3, [pc, #240]	; (800087c <keypad_handler+0x250>)
 800078c:	2220      	movs	r2, #32
 800078e:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 8000790:	2002      	movs	r0, #2
 8000792:	f000 fe11 	bl	80013b8 <HAL_Delay>
		if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin) {
 8000796:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800079a:	691b      	ldr	r3, [r3, #16]
 800079c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <keypad_handler+0x17c>
			key_pressed = 0x08; // if column 1 is still high -> column 1 + row 3 = key 7
 80007a4:	2308      	movs	r3, #8
 80007a6:	73fb      	strb	r3, [r7, #15]
		}

		ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 80007a8:	4b34      	ldr	r3, [pc, #208]	; (800087c <keypad_handler+0x250>)
 80007aa:	2220      	movs	r2, #32
 80007ac:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BSRR = ROW_4_Pin; 	// turn on row 4
 80007ae:	4b33      	ldr	r3, [pc, #204]	; (800087c <keypad_handler+0x250>)
 80007b0:	2210      	movs	r2, #16
 80007b2:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 80007b4:	2002      	movs	r0, #2
 80007b6:	f000 fdff 	bl	80013b8 <HAL_Delay>
		if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin) {
 80007ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007be:	691b      	ldr	r3, [r3, #16]
 80007c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	f000 80b2 	beq.w	800092e <keypad_handler+0x302>
			key_pressed = 0x00; // if column 1 is still high -> column 1 + row 4 = key *
 80007ca:	2300      	movs	r3, #0
 80007cc:	73fb      	strb	r3, [r7, #15]
		}
	  break;
 80007ce:	e0ae      	b.n	800092e <keypad_handler+0x302>

	case COLUMN_3_Pin:
		ROW_1_GPIO_Port->BSRR = ROW_1_Pin; // turn on row 1
 80007d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007d8:	619a      	str	r2, [r3, #24]
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;  // turn off row 2
 80007da:	4b28      	ldr	r3, [pc, #160]	; (800087c <keypad_handler+0x250>)
 80007dc:	2208      	movs	r2, #8
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;  // turn off row 3
 80007e0:	4b26      	ldr	r3, [pc, #152]	; (800087c <keypad_handler+0x250>)
 80007e2:	2220      	movs	r2, #32
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;  // turn off row 4
 80007e6:	4b25      	ldr	r3, [pc, #148]	; (800087c <keypad_handler+0x250>)
 80007e8:	2210      	movs	r2, #16
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(2); // wait for voltage to establish
 80007ec:	2002      	movs	r0, #2
 80007ee:	f000 fde3 	bl	80013b8 <HAL_Delay>
		if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin) {
 80007f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007f6:	691b      	ldr	r3, [r3, #16]
 80007f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <keypad_handler+0x1d8>
			key_pressed = 0x03; // if column 1 is still high -> column 1 + row 1 = key 1
 8000800:	2303      	movs	r3, #3
 8000802:	73fb      	strb	r3, [r7, #15]
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 8000804:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800080c:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BSRR = ROW_2_Pin; 	// turn on row 2
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <keypad_handler+0x250>)
 8000810:	2208      	movs	r2, #8
 8000812:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 8000814:	2002      	movs	r0, #2
 8000816:	f000 fdcf 	bl	80013b8 <HAL_Delay>
		if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin) {
 800081a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800081e:	691b      	ldr	r3, [r3, #16]
 8000820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <keypad_handler+0x200>
			key_pressed = 0x06; // if column 1 is still high -> column 1 + row 2 = key 4
 8000828:	2306      	movs	r3, #6
 800082a:	73fb      	strb	r3, [r7, #15]
		}

		ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <keypad_handler+0x250>)
 800082e:	2208      	movs	r2, #8
 8000830:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BSRR = ROW_3_Pin; 	// turn on row 3
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <keypad_handler+0x250>)
 8000834:	2220      	movs	r2, #32
 8000836:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 8000838:	2002      	movs	r0, #2
 800083a:	f000 fdbd 	bl	80013b8 <HAL_Delay>
		if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin) {
 800083e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <keypad_handler+0x224>
			key_pressed = 0x09; // if column 1 is still high -> column 1 + row 3 = key 7
 800084c:	2309      	movs	r3, #9
 800084e:	73fb      	strb	r3, [r7, #15]
		}

		ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <keypad_handler+0x250>)
 8000852:	2220      	movs	r2, #32
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BSRR = ROW_4_Pin; 	// turn on row 4
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <keypad_handler+0x250>)
 8000858:	2210      	movs	r2, #16
 800085a:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 800085c:	2002      	movs	r0, #2
 800085e:	f000 fdab 	bl	80013b8 <HAL_Delay>
		if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin) {
 8000862:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000866:	691b      	ldr	r3, [r3, #16]
 8000868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800086c:	2b00      	cmp	r3, #0
 800086e:	d060      	beq.n	8000932 <keypad_handler+0x306>
			key_pressed = 0x0F; // if column 1 is still high -> column 1 + row 4 = key *;
 8000870:	230f      	movs	r3, #15
 8000872:	73fb      	strb	r3, [r7, #15]
		}
	  break;
 8000874:	e05d      	b.n	8000932 <keypad_handler+0x306>
 8000876:	bf00      	nop
 8000878:	20000198 	.word	0x20000198
 800087c:	48000400 	.word	0x48000400

	case COLUMN_4_Pin:
		ROW_1_GPIO_Port->BSRR = ROW_1_Pin; // turn on row 1
 8000880:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000884:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000888:	619a      	str	r2, [r3, #24]
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;  // turn off row 2
 800088a:	4b2f      	ldr	r3, [pc, #188]	; (8000948 <keypad_handler+0x31c>)
 800088c:	2208      	movs	r2, #8
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;  // turn off row 3
 8000890:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <keypad_handler+0x31c>)
 8000892:	2220      	movs	r2, #32
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;  // turn off row 4
 8000896:	4b2c      	ldr	r3, [pc, #176]	; (8000948 <keypad_handler+0x31c>)
 8000898:	2210      	movs	r2, #16
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(2); // wait for voltage to establish
 800089c:	2002      	movs	r0, #2
 800089e:	f000 fd8b 	bl	80013b8 <HAL_Delay>
		if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin) {
 80008a2:	4b2a      	ldr	r3, [pc, #168]	; (800094c <keypad_handler+0x320>)
 80008a4:	691b      	ldr	r3, [r3, #16]
 80008a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <keypad_handler+0x286>
			key_pressed = 0x0A; // if column 1 is still high -> column 1 + row 1 = key 1
 80008ae:	230a      	movs	r3, #10
 80008b0:	73fb      	strb	r3, [r7, #15]
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 80008b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BSRR = ROW_2_Pin; 	// turn on row 2
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <keypad_handler+0x31c>)
 80008be:	2208      	movs	r2, #8
 80008c0:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 80008c2:	2002      	movs	r0, #2
 80008c4:	f000 fd78 	bl	80013b8 <HAL_Delay>
		if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin) {
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <keypad_handler+0x320>)
 80008ca:	691b      	ldr	r3, [r3, #16]
 80008cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <keypad_handler+0x2ac>
			key_pressed = 0x0B; // if column 1 is still high -> column 1 + row 2 = key 4
 80008d4:	230b      	movs	r3, #11
 80008d6:	73fb      	strb	r3, [r7, #15]
		}

		ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <keypad_handler+0x31c>)
 80008da:	2208      	movs	r2, #8
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BSRR = ROW_3_Pin; 	// turn on row 3
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <keypad_handler+0x31c>)
 80008e0:	2220      	movs	r2, #32
 80008e2:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 80008e4:	2002      	movs	r0, #2
 80008e6:	f000 fd67 	bl	80013b8 <HAL_Delay>
		if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin) {
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <keypad_handler+0x320>)
 80008ec:	691b      	ldr	r3, [r3, #16]
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <keypad_handler+0x2ce>
			key_pressed = 0x0C; // if column 1 is still high -> column 1 + row 3 = key 7
 80008f6:	230c      	movs	r3, #12
 80008f8:	73fb      	strb	r3, [r7, #15]
		}

		ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <keypad_handler+0x31c>)
 80008fc:	2220      	movs	r2, #32
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BSRR = ROW_4_Pin; 	// turn on row 4
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <keypad_handler+0x31c>)
 8000902:	2210      	movs	r2, #16
 8000904:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 8000906:	2002      	movs	r0, #2
 8000908:	f000 fd56 	bl	80013b8 <HAL_Delay>
		if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin) {
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <keypad_handler+0x320>)
 800090e:	691b      	ldr	r3, [r3, #16]
 8000910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000914:	2b00      	cmp	r3, #0
 8000916:	d00e      	beq.n	8000936 <keypad_handler+0x30a>
			key_pressed = 0x0D; // if column 1 is still high -> column 1 + row 4 = key *
 8000918:	230d      	movs	r3, #13
 800091a:	73fb      	strb	r3, [r7, #15]
		}
	  break;
 800091c:	e00b      	b.n	8000936 <keypad_handler+0x30a>
	/*!\ TODO: Implement other column cases here */

	default:
		/* This should not be reached */
		printf("Unknown column: %x\r\n", column_to_evaluate);
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	4619      	mov	r1, r3
 8000922:	480b      	ldr	r0, [pc, #44]	; (8000950 <keypad_handler+0x324>)
 8000924:	f004 ff56 	bl	80057d4 <iprintf>
	  break;
 8000928:	e006      	b.n	8000938 <keypad_handler+0x30c>
	  break;
 800092a:	bf00      	nop
 800092c:	e004      	b.n	8000938 <keypad_handler+0x30c>
	  break;
 800092e:	bf00      	nop
 8000930:	e002      	b.n	8000938 <keypad_handler+0x30c>
	  break;
 8000932:	bf00      	nop
 8000934:	e000      	b.n	8000938 <keypad_handler+0x30c>
	  break;
 8000936:	bf00      	nop
	}

	keypad_init(); // set the columns high again
 8000938:	f7ff fe60 	bl	80005fc <keypad_init>
	return key_pressed; // invalid: 0xFF, valid:[0x00-0x0F]
 800093c:	7bfb      	ldrb	r3, [r7, #15]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	48000400 	.word	0x48000400
 800094c:	48000800 	.word	0x48000800
 8000950:	0800659c 	.word	0x0800659c

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095a:	f000 fcb1 	bl	80012c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095e:	f000 f8dd 	bl	8000b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000962:	f000 f99d 	bl	8000ca0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000966:	f000 f96b 	bl	8000c40 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800096a:	f000 f929 	bl	8000bc0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ring_buffer_init(&ring_buffer_uart_rx, rx_buffer, 16);
 800096e:	2210      	movs	r2, #16
 8000970:	495c      	ldr	r1, [pc, #368]	; (8000ae4 <main+0x190>)
 8000972:	485d      	ldr	r0, [pc, #372]	; (8000ae8 <main+0x194>)
 8000974:	f000 fa51 	bl	8000e1a <ring_buffer_init>
  keypad_init(); // Initialize the keypad functionality
 8000978:	f7ff fe40 	bl	80005fc <keypad_init>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	495b      	ldr	r1, [pc, #364]	; (8000aec <main+0x198>)
 8000980:	485b      	ldr	r0, [pc, #364]	; (8000af0 <main+0x19c>)
 8000982:	f003 f94b 	bl	8003c1c <HAL_UART_Receive_IT>

  ssd1306_Init();
 8000986:	f004 fc73 	bl	8005270 <ssd1306_Init>
  ssd1306_Fill(Black);
 800098a:	2000      	movs	r0, #0
 800098c:	f004 fcda 	bl	8005344 <ssd1306_Fill>
  ssd1306_SetCursor(20, 20);
 8000990:	2114      	movs	r1, #20
 8000992:	2014      	movs	r0, #20
 8000994:	f004 fe24 	bl	80055e0 <ssd1306_SetCursor>
  ssd1306_WriteString("<3", Font_7x10, White);
 8000998:	4a56      	ldr	r2, [pc, #344]	; (8000af4 <main+0x1a0>)
 800099a:	2301      	movs	r3, #1
 800099c:	ca06      	ldmia	r2, {r1, r2}
 800099e:	4856      	ldr	r0, [pc, #344]	; (8000af8 <main+0x1a4>)
 80009a0:	f004 fdf8 	bl	8005594 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80009a4:	f004 fcf2 	bl	800538c <ssd1306_UpdateScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // se ingresa cada vez que se pulsa un tecla del taclado.
	  if (key_event != 0xFF) { // check if there is a event from the EXTi callback
 80009a8:	4b54      	ldr	r3, [pc, #336]	; (8000afc <main+0x1a8>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	2bff      	cmp	r3, #255	; 0xff
 80009ae:	d0fb      	beq.n	80009a8 <main+0x54>
	 		  uint16_t key_pressed = keypad_handler(key_event); // call the keypad handler
 80009b0:	4b52      	ldr	r3, [pc, #328]	; (8000afc <main+0x1a8>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fe39 	bl	800062c <keypad_handler>
 80009ba:	4603      	mov	r3, r0
 80009bc:	80bb      	strh	r3, [r7, #4]
	 		  if (key_pressed != 0xFF) {
 80009be:	88bb      	ldrh	r3, [r7, #4]
 80009c0:	2bff      	cmp	r3, #255	; 0xff
 80009c2:	d015      	beq.n	80009f0 <main+0x9c>
	 			  printf("Key pressed: %x\r\n", key_pressed); // print the key pressed
 80009c4:	88bb      	ldrh	r3, [r7, #4]
 80009c6:	4619      	mov	r1, r3
 80009c8:	484d      	ldr	r0, [pc, #308]	; (8000b00 <main+0x1ac>)
 80009ca:	f004 ff03 	bl	80057d4 <iprintf>

	 			  // guarda los cuadtro digitos de la key y se presona '#' para finalizar la lectura y proceder con la verificacion.
	 			  if (memory[4] != 0x0F){
 80009ce:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <main+0x1b0>)
 80009d0:	891b      	ldrh	r3, [r3, #8]
 80009d2:	2b0f      	cmp	r3, #15
 80009d4:	d00c      	beq.n	80009f0 <main+0x9c>
	 			  memory[count] = key_pressed;
 80009d6:	4b4c      	ldr	r3, [pc, #304]	; (8000b08 <main+0x1b4>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	4619      	mov	r1, r3
 80009dc:	4a49      	ldr	r2, [pc, #292]	; (8000b04 <main+0x1b0>)
 80009de:	88bb      	ldrh	r3, [r7, #4]
 80009e0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	 			  count = count + 1;}
 80009e4:	4b48      	ldr	r3, [pc, #288]	; (8000b08 <main+0x1b4>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b46      	ldr	r3, [pc, #280]	; (8000b08 <main+0x1b4>)
 80009ee:	701a      	strb	r2, [r3, #0]
	 		  	  }

	 		  	  // Validamos si la key corresponde con el año de nacimiento.
	 		  	  // Se valida al preciconar la tecla # para completar las 5 teclas presionadas.
	 		  	  if (memory[4] == 0x0F){
 80009f0:	4b44      	ldr	r3, [pc, #272]	; (8000b04 <main+0x1b0>)
 80009f2:	891b      	ldrh	r3, [r3, #8]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d132      	bne.n	8000a5e <main+0x10a>
	 		  		  // Pe varifica se los valores ingresados coinciden de ser correcto se imprime Pass en la pantalla.
	 		  		  if (memory[0] == 0x02 && memory[1] == 0x00 && memory[2] == 0x00 && memory[3] == 0x02){
 80009f8:	4b42      	ldr	r3, [pc, #264]	; (8000b04 <main+0x1b0>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d11d      	bne.n	8000a3c <main+0xe8>
 8000a00:	4b40      	ldr	r3, [pc, #256]	; (8000b04 <main+0x1b0>)
 8000a02:	885b      	ldrh	r3, [r3, #2]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d119      	bne.n	8000a3c <main+0xe8>
 8000a08:	4b3e      	ldr	r3, [pc, #248]	; (8000b04 <main+0x1b0>)
 8000a0a:	889b      	ldrh	r3, [r3, #4]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d115      	bne.n	8000a3c <main+0xe8>
 8000a10:	4b3c      	ldr	r3, [pc, #240]	; (8000b04 <main+0x1b0>)
 8000a12:	88db      	ldrh	r3, [r3, #6]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d111      	bne.n	8000a3c <main+0xe8>
	 		  			  ssd1306_Init();
 8000a18:	f004 fc2a 	bl	8005270 <ssd1306_Init>
	 		  			  ssd1306_Fill(Black);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f004 fc91 	bl	8005344 <ssd1306_Fill>
	 		  			  ssd1306_SetCursor(20, 20);
 8000a22:	2114      	movs	r1, #20
 8000a24:	2014      	movs	r0, #20
 8000a26:	f004 fddb 	bl	80055e0 <ssd1306_SetCursor>
	 		  			  ssd1306_WriteString("Pass", Font_7x10, White);
 8000a2a:	4a32      	ldr	r2, [pc, #200]	; (8000af4 <main+0x1a0>)
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	ca06      	ldmia	r2, {r1, r2}
 8000a30:	4836      	ldr	r0, [pc, #216]	; (8000b0c <main+0x1b8>)
 8000a32:	f004 fdaf 	bl	8005594 <ssd1306_WriteString>
	 		  			  ssd1306_UpdateScreen();
 8000a36:	f004 fca9 	bl	800538c <ssd1306_UpdateScreen>
 8000a3a:	e010      	b.n	8000a5e <main+0x10a>
	 		  			  // caso contrario se imprime Fail en la pantalla.
	 		  		  } else {
	 		  			  ssd1306_Init();
 8000a3c:	f004 fc18 	bl	8005270 <ssd1306_Init>
	 		  			  ssd1306_Fill(Black);
 8000a40:	2000      	movs	r0, #0
 8000a42:	f004 fc7f 	bl	8005344 <ssd1306_Fill>
	 		  			  ssd1306_SetCursor(20, 20);
 8000a46:	2114      	movs	r1, #20
 8000a48:	2014      	movs	r0, #20
 8000a4a:	f004 fdc9 	bl	80055e0 <ssd1306_SetCursor>
	 		  			  ssd1306_WriteString("Fail", Font_7x10, White);
 8000a4e:	4a29      	ldr	r2, [pc, #164]	; (8000af4 <main+0x1a0>)
 8000a50:	2301      	movs	r3, #1
 8000a52:	ca06      	ldmia	r2, {r1, r2}
 8000a54:	482e      	ldr	r0, [pc, #184]	; (8000b10 <main+0x1bc>)
 8000a56:	f004 fd9d 	bl	8005594 <ssd1306_WriteString>
	 		  			  ssd1306_UpdateScreen();
 8000a5a:	f004 fc97 	bl	800538c <ssd1306_UpdateScreen>
	 		  		  	  	  }
	 		  	  	  }
	 		  	  // si la quinta pulsación no es el # se marca error y requeire resetear.
	 		  	  if (count == 5 && memory[4] != 0x0F ){
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <main+0x1b4>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b05      	cmp	r3, #5
 8000a64:	d114      	bne.n	8000a90 <main+0x13c>
 8000a66:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <main+0x1b0>)
 8000a68:	891b      	ldrh	r3, [r3, #8]
 8000a6a:	2b0f      	cmp	r3, #15
 8000a6c:	d010      	beq.n	8000a90 <main+0x13c>
	 		  		ssd1306_Init();
 8000a6e:	f004 fbff 	bl	8005270 <ssd1306_Init>
	 		  		ssd1306_Fill(Black);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f004 fc66 	bl	8005344 <ssd1306_Fill>
	 		  		ssd1306_SetCursor(10, 20);
 8000a78:	2114      	movs	r1, #20
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	f004 fdb0 	bl	80055e0 <ssd1306_SetCursor>
	 		  		ssd1306_WriteString("Error - resetear ", Font_7x10, White);
 8000a80:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <main+0x1a0>)
 8000a82:	2301      	movs	r3, #1
 8000a84:	ca06      	ldmia	r2, {r1, r2}
 8000a86:	4823      	ldr	r0, [pc, #140]	; (8000b14 <main+0x1c0>)
 8000a88:	f004 fd84 	bl	8005594 <ssd1306_WriteString>
	 		  		ssd1306_UpdateScreen();
 8000a8c:	f004 fc7e 	bl	800538c <ssd1306_UpdateScreen>
	 		  	  }
	 		  	  // Una vez ingresados los datos de y se a verificado si es correcta o no la key presione  '*' para ingresar nuevamente una key.
	 		  	  if (key_pressed == 0x0E){
 8000a90:	88bb      	ldrh	r3, [r7, #4]
 8000a92:	2b0e      	cmp	r3, #14
 8000a94:	d121      	bne.n	8000ada <main+0x186>
	 		  		  for (uint8_t i = 0; i < 5 ; i++){
 8000a96:	2300      	movs	r3, #0
 8000a98:	71fb      	strb	r3, [r7, #7]
 8000a9a:	e00a      	b.n	8000ab2 <main+0x15e>
	 		  			  memory[i]= 0;
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	4a19      	ldr	r2, [pc, #100]	; (8000b04 <main+0x1b0>)
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	 		  			  count = 0;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <main+0x1b4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
	 		  		  for (uint8_t i = 0; i < 5 ; i++){
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	71fb      	strb	r3, [r7, #7]
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	d9f1      	bls.n	8000a9c <main+0x148>
	 		  		  }
	 		  		  //mostrar en la pantalla que se ingrese la key.
	 		  		  ssd1306_Init();
 8000ab8:	f004 fbda 	bl	8005270 <ssd1306_Init>
	 		  		  ssd1306_Fill(Black);
 8000abc:	2000      	movs	r0, #0
 8000abe:	f004 fc41 	bl	8005344 <ssd1306_Fill>
	 		  		  ssd1306_SetCursor(20, 20);
 8000ac2:	2114      	movs	r1, #20
 8000ac4:	2014      	movs	r0, #20
 8000ac6:	f004 fd8b 	bl	80055e0 <ssd1306_SetCursor>
	 		  		  ssd1306_WriteString("Ingrese key", Font_7x10, White);
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <main+0x1a0>)
 8000acc:	2301      	movs	r3, #1
 8000ace:	ca06      	ldmia	r2, {r1, r2}
 8000ad0:	4811      	ldr	r0, [pc, #68]	; (8000b18 <main+0x1c4>)
 8000ad2:	f004 fd5f 	bl	8005594 <ssd1306_WriteString>
	 		  		  ssd1306_UpdateScreen();
 8000ad6:	f004 fc59 	bl	800538c <ssd1306_UpdateScreen>
	 		  	  }
	 		  key_event = 0xFF; // clean the event
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <main+0x1a8>)
 8000adc:	22ff      	movs	r2, #255	; 0xff
 8000ade:	801a      	strh	r2, [r3, #0]
	  if (key_event != 0xFF) { // check if there is a event from the EXTi callback
 8000ae0:	e762      	b.n	80009a8 <main+0x54>
 8000ae2:	bf00      	nop
 8000ae4:	2000016c 	.word	0x2000016c
 8000ae8:	2000017c 	.word	0x2000017c
 8000aec:	20000188 	.word	0x20000188
 8000af0:	200000e4 	.word	0x200000e4
 8000af4:	20000010 	.word	0x20000010
 8000af8:	080065b4 	.word	0x080065b4
 8000afc:	20000000 	.word	0x20000000
 8000b00:	080065b8 	.word	0x080065b8
 8000b04:	2000018c 	.word	0x2000018c
 8000b08:	20000189 	.word	0x20000189
 8000b0c:	080065cc 	.word	0x080065cc
 8000b10:	080065d4 	.word	0x080065d4
 8000b14:	080065dc 	.word	0x080065dc
 8000b18:	080065f0 	.word	0x080065f0

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b096      	sub	sp, #88	; 0x58
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	2244      	movs	r2, #68	; 0x44
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f004 ff98 	bl	8005a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	463b      	mov	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b3e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b42:	f001 fc81 	bl	8002448 <HAL_PWREx_ControlVoltageScaling>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b4c:	f000 f960 	bl	8000e10 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b50:	2302      	movs	r3, #2
 8000b52:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5a:	2310      	movs	r3, #16
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b62:	2302      	movs	r3, #2
 8000b64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b66:	2301      	movs	r3, #1
 8000b68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b6a:	230a      	movs	r3, #10
 8000b6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b6e:	2307      	movs	r3, #7
 8000b70:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 fcb8 	bl	80024f4 <HAL_RCC_OscConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b8a:	f000 f941 	bl	8000e10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8e:	230f      	movs	r3, #15
 8000b90:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b92:	2303      	movs	r3, #3
 8000b94:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f002 f880 	bl	8002cac <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bb2:	f000 f92d 	bl	8000e10 <Error_Handler>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3758      	adds	r7, #88	; 0x58
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bc6:	4a1c      	ldr	r2, [pc, #112]	; (8000c38 <MX_I2C1_Init+0x78>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <MX_I2C1_Init+0x7c>)
 8000bce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bfa:	480e      	ldr	r0, [pc, #56]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000bfc:	f000 ff6a 	bl	8001ad4 <HAL_I2C_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c06:	f000 f903 	bl	8000e10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4809      	ldr	r0, [pc, #36]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000c0e:	f001 fb75 	bl	80022fc <HAL_I2CEx_ConfigAnalogFilter>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c18:	f000 f8fa 	bl	8000e10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_I2C1_Init+0x74>)
 8000c20:	f001 fbb7 	bl	8002392 <HAL_I2CEx_ConfigDigitalFilter>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c2a:	f000 f8f1 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000090 	.word	0x20000090
 8000c38:	40005400 	.word	0x40005400
 8000c3c:	10909cec 	.word	0x10909cec

08000c40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c46:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <MX_USART2_UART_Init+0x5c>)
 8000c48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c84:	f002 fef2 	bl	8003a6c <HAL_UART_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c8e:	f000 f8bf 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200000e4 	.word	0x200000e4
 8000c9c:	40004400 	.word	0x40004400

08000ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	4b53      	ldr	r3, [pc, #332]	; (8000e04 <MX_GPIO_Init+0x164>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	4a52      	ldr	r2, [pc, #328]	; (8000e04 <MX_GPIO_Init+0x164>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc2:	4b50      	ldr	r3, [pc, #320]	; (8000e04 <MX_GPIO_Init+0x164>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cce:	4b4d      	ldr	r3, [pc, #308]	; (8000e04 <MX_GPIO_Init+0x164>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	4a4c      	ldr	r2, [pc, #304]	; (8000e04 <MX_GPIO_Init+0x164>)
 8000cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cda:	4b4a      	ldr	r3, [pc, #296]	; (8000e04 <MX_GPIO_Init+0x164>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4b47      	ldr	r3, [pc, #284]	; (8000e04 <MX_GPIO_Init+0x164>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	4a46      	ldr	r2, [pc, #280]	; (8000e04 <MX_GPIO_Init+0x164>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf2:	4b44      	ldr	r3, [pc, #272]	; (8000e04 <MX_GPIO_Init+0x164>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	4b41      	ldr	r3, [pc, #260]	; (8000e04 <MX_GPIO_Init+0x164>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	4a40      	ldr	r2, [pc, #256]	; (8000e04 <MX_GPIO_Init+0x164>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0a:	4b3e      	ldr	r3, [pc, #248]	; (8000e04 <MX_GPIO_Init+0x164>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ROW_1_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f000 fea8 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROW_2_Pin|ROW_4_Pin|ROW_3_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2138      	movs	r1, #56	; 0x38
 8000d28:	4837      	ldr	r0, [pc, #220]	; (8000e08 <MX_GPIO_Init+0x168>)
 8000d2a:	f000 fea3 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d34:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4831      	ldr	r0, [pc, #196]	; (8000e0c <MX_GPIO_Init+0x16c>)
 8000d46:	f000 fceb 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin ROW_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|ROW_1_Pin;
 8000d4a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d66:	f000 fcdb 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : COLUMN_1_Pin */
  GPIO_InitStruct.Pin = COLUMN_1_Pin;
 8000d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COLUMN_1_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4821      	ldr	r0, [pc, #132]	; (8000e08 <MX_GPIO_Init+0x168>)
 8000d82:	f000 fccd 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : COLUMN_4_Pin */
  GPIO_InitStruct.Pin = COLUMN_4_Pin;
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d90:	2302      	movs	r3, #2
 8000d92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COLUMN_4_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	481c      	ldr	r0, [pc, #112]	; (8000e0c <MX_GPIO_Init+0x16c>)
 8000d9c:	f000 fcc0 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : COLUMN_2_Pin COLUMN_3_Pin */
  GPIO_InitStruct.Pin = COLUMN_2_Pin|COLUMN_3_Pin;
 8000da0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dac:	2302      	movs	r3, #2
 8000dae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dba:	f000 fcb1 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW_2_Pin ROW_4_Pin ROW_3_Pin */
  GPIO_InitStruct.Pin = ROW_2_Pin|ROW_4_Pin|ROW_3_Pin;
 8000dbe:	2338      	movs	r3, #56	; 0x38
 8000dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <MX_GPIO_Init+0x168>)
 8000dd6:	f000 fca3 	bl	8001720 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2017      	movs	r0, #23
 8000de0:	f000 fbe9 	bl	80015b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000de4:	2017      	movs	r0, #23
 8000de6:	f000 fc02 	bl	80015ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	2028      	movs	r0, #40	; 0x28
 8000df0:	f000 fbe1 	bl	80015b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000df4:	2028      	movs	r0, #40	; 0x28
 8000df6:	f000 fbfa 	bl	80015ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	; 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000
 8000e08:	48000400 	.word	0x48000400
 8000e0c:	48000800 	.word	0x48000800

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <Error_Handler+0x8>

08000e1a <ring_buffer_init>:

/**
 * @brief This function initializes the control struct of the ring buffer
*/
void ring_buffer_init(ring_buffer_t *ring_buffer, uint8_t *buffer, uint16_t capacity)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b085      	sub	sp, #20
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	4613      	mov	r3, r2
 8000e26:	80fb      	strh	r3, [r7, #6]
	ring_buffer->buffer = buffer;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	601a      	str	r2, [r3, #0]
	ring_buffer->capacity = capacity;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	88fa      	ldrh	r2, [r7, #6]
 8000e32:	811a      	strh	r2, [r3, #8]

	ring_buffer->head = 0;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2200      	movs	r2, #0
 8000e38:	809a      	strh	r2, [r3, #4]
	ring_buffer->tail = 0;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	80da      	strh	r2, [r3, #6]
	ring_buffer->is_full = 0;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2200      	movs	r2, #0
 8000e44:	729a      	strb	r2, [r3, #10]
}
 8000e46:	bf00      	nop
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <ring_buffer_put>:
/**
 * @brief This function adds a data in the ring buffer
 * @param data: the value to be added
*/
uint8_t ring_buffer_put(ring_buffer_t *ring_buffer, uint8_t data)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	70fb      	strb	r3, [r7, #3]
	ring_buffer->buffer[ring_buffer->head] = data;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	8892      	ldrh	r2, [r2, #4]
 8000e66:	4413      	add	r3, r2
 8000e68:	78fa      	ldrb	r2, [r7, #3]
 8000e6a:	701a      	strb	r2, [r3, #0]
	ring_buffer->head = (ring_buffer->head + 1) % ring_buffer->capacity;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	889b      	ldrh	r3, [r3, #4]
 8000e70:	3301      	adds	r3, #1
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	8912      	ldrh	r2, [r2, #8]
 8000e76:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e7a:	fb01 f202 	mul.w	r2, r1, r2
 8000e7e:	1a9b      	subs	r3, r3, r2
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	809a      	strh	r2, [r3, #4]

	if (ring_buffer->is_full != 0) {
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	7a9b      	ldrb	r3, [r3, #10]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00c      	beq.n	8000ea8 <ring_buffer_put+0x56>
		ring_buffer->tail = (ring_buffer->tail + 1) % ring_buffer->capacity;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	88db      	ldrh	r3, [r3, #6]
 8000e92:	3301      	adds	r3, #1
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	8912      	ldrh	r2, [r2, #8]
 8000e98:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e9c:	fb01 f202 	mul.w	r2, r1, r2
 8000ea0:	1a9b      	subs	r3, r3, r2
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	80da      	strh	r2, [r3, #6]
	}

	if (ring_buffer->head == ring_buffer->tail) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	889a      	ldrh	r2, [r3, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	88db      	ldrh	r3, [r3, #6]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d104      	bne.n	8000ebe <ring_buffer_put+0x6c>
		ring_buffer->is_full = 1;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	729a      	strb	r2, [r3, #10]
		return 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <ring_buffer_put+0x6e>
	}
	return 1;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_MspInit+0x44>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <HAL_MspInit+0x44>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <HAL_MspInit+0x44>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_MspInit+0x44>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <HAL_MspInit+0x44>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_MspInit+0x44>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000

08000f14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0ac      	sub	sp, #176	; 0xb0
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2288      	movs	r2, #136	; 0x88
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f004 fd93 	bl	8005a60 <memset>
  if(hi2c->Instance==I2C1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a21      	ldr	r2, [pc, #132]	; (8000fc4 <HAL_I2C_MspInit+0xb0>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d13b      	bne.n	8000fbc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f44:	2340      	movs	r3, #64	; 0x40
 8000f46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 f8cf 	bl	80030f4 <HAL_RCCEx_PeriphCLKConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f5c:	f7ff ff58 	bl	8000e10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_I2C_MspInit+0xb4>)
 8000f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f64:	4a18      	ldr	r2, [pc, #96]	; (8000fc8 <HAL_I2C_MspInit+0xb4>)
 8000f66:	f043 0302 	orr.w	r3, r3, #2
 8000f6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <HAL_I2C_MspInit+0xb4>)
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f80:	2312      	movs	r3, #18
 8000f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f92:	2304      	movs	r3, #4
 8000f94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480b      	ldr	r0, [pc, #44]	; (8000fcc <HAL_I2C_MspInit+0xb8>)
 8000fa0:	f000 fbbe 	bl	8001720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_I2C_MspInit+0xb4>)
 8000fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_I2C_MspInit+0xb4>)
 8000faa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fae:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_I2C_MspInit+0xb4>)
 8000fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	37b0      	adds	r7, #176	; 0xb0
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40005400 	.word	0x40005400
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	48000400 	.word	0x48000400

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0ac      	sub	sp, #176	; 0xb0
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2288      	movs	r2, #136	; 0x88
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f004 fd35 	bl	8005a60 <memset>
  if(huart->Instance==USART2)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a25      	ldr	r2, [pc, #148]	; (8001090 <HAL_UART_MspInit+0xc0>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d143      	bne.n	8001088 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001000:	2302      	movs	r3, #2
 8001002:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001004:	2300      	movs	r3, #0
 8001006:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4618      	mov	r0, r3
 800100e:	f002 f871 	bl	80030f4 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001018:	f7ff fefa 	bl	8000e10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <HAL_UART_MspInit+0xc4>)
 800101e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001020:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <HAL_UART_MspInit+0xc4>)
 8001022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001026:	6593      	str	r3, [r2, #88]	; 0x58
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <HAL_UART_MspInit+0xc4>)
 800102a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <HAL_UART_MspInit+0xc4>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	4a16      	ldr	r2, [pc, #88]	; (8001094 <HAL_UART_MspInit+0xc4>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <HAL_UART_MspInit+0xc4>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800104c:	230c      	movs	r3, #12
 800104e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001064:	2307      	movs	r3, #7
 8001066:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f000 fb54 	bl	8001720 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	2026      	movs	r0, #38	; 0x26
 800107e:	f000 fa9a 	bl	80015b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001082:	2026      	movs	r0, #38	; 0x26
 8001084:	f000 fab3 	bl	80015ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001088:	bf00      	nop
 800108a:	37b0      	adds	r7, #176	; 0xb0
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40004400 	.word	0x40004400
 8001094:	40021000 	.word	0x40021000

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800109c:	e7fe      	b.n	800109c <NMI_Handler+0x4>

0800109e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <MemManage_Handler+0x4>

080010aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e4:	f000 f948 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}

080010ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COLUMN_4_Pin);
 80010f0:	2080      	movs	r0, #128	; 0x80
 80010f2:	f000 fcd7 	bl	8001aa4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COLUMN_2_Pin);
 80010f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80010fa:	f000 fcd3 	bl	8001aa4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COLUMN_3_Pin);
 80010fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001102:	f000 fccf 	bl	8001aa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <USART2_IRQHandler+0x10>)
 8001112:	f002 fdcf 	bl	8003cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200000e4 	.word	0x200000e4

08001120 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COLUMN_1_Pin);
 8001124:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001128:	f000 fcbc 	bl	8001aa4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800112c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001130:	f000 fcb8 	bl	8001aa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	e00a      	b.n	8001160 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800114a:	f3af 8000 	nop.w
 800114e:	4601      	mov	r1, r0
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	60ba      	str	r2, [r7, #8]
 8001156:	b2ca      	uxtb	r2, r1
 8001158:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	dbf0      	blt.n	800114a <_read+0x12>
  }

  return len;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800119a:	605a      	str	r2, [r3, #4]
  return 0;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <_isatty>:

int _isatty(int file)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <_sbrk+0x5c>)
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <_sbrk+0x60>)
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <_sbrk+0x64>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <_sbrk+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	429a      	cmp	r2, r3
 800120a:	d207      	bcs.n	800121c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800120c:	f004 fc76 	bl	8005afc <__errno>
 8001210:	4603      	mov	r3, r0
 8001212:	220c      	movs	r2, #12
 8001214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	e009      	b.n	8001230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <_sbrk+0x64>)
 800122c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20018000 	.word	0x20018000
 800123c:	00000400 	.word	0x00000400
 8001240:	2000019c 	.word	0x2000019c
 8001244:	200006f8 	.word	0x200006f8

08001248 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <SystemInit+0x20>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <SystemInit+0x20>)
 8001254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800126c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001270:	f7ff ffea 	bl	8001248 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001276:	490d      	ldr	r1, [pc, #52]	; (80012ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <LoopForever+0xe>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800128c:	4c0a      	ldr	r4, [pc, #40]	; (80012b8 <LoopForever+0x16>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800129a:	f004 fc35 	bl	8005b08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800129e:	f7ff fb59 	bl	8000954 <main>

080012a2 <LoopForever>:

LoopForever:
    b LoopForever
 80012a2:	e7fe      	b.n	80012a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012b0:	08006df4 	.word	0x08006df4
  ldr r2, =_sbss
 80012b4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80012b8:	200006f8 	.word	0x200006f8

080012bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC1_2_IRQHandler>
	...

080012c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_Init+0x3c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <HAL_Init+0x3c>)
 80012d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d6:	2003      	movs	r0, #3
 80012d8:	f000 f962 	bl	80015a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012dc:	2000      	movs	r0, #0
 80012de:	f000 f80f 	bl	8001300 <HAL_InitTick>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	71fb      	strb	r3, [r7, #7]
 80012ec:	e001      	b.n	80012f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012ee:	f7ff fded 	bl	8000ecc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012f2:	79fb      	ldrb	r3, [r7, #7]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40022000 	.word	0x40022000

08001300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <HAL_InitTick+0x6c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d023      	beq.n	800135c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <HAL_InitTick+0x70>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <HAL_InitTick+0x6c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001322:	fbb3 f3f1 	udiv	r3, r3, r1
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f96d 	bl	800160a <HAL_SYSTICK_Config>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10f      	bne.n	8001356 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b0f      	cmp	r3, #15
 800133a:	d809      	bhi.n	8001350 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800133c:	2200      	movs	r2, #0
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	f04f 30ff 	mov.w	r0, #4294967295
 8001344:	f000 f937 	bl	80015b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001348:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <HAL_InitTick+0x74>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e007      	b.n	8001360 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e004      	b.n	8001360 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	73fb      	strb	r3, [r7, #15]
 800135a:	e001      	b.n	8001360 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001360:	7bfb      	ldrb	r3, [r7, #15]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2000000c 	.word	0x2000000c
 8001370:	20000004 	.word	0x20000004
 8001374:	20000008 	.word	0x20000008

08001378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x20>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x24>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_IncTick+0x24>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	2000000c 	.word	0x2000000c
 800139c:	200001a0 	.word	0x200001a0

080013a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_GetTick+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	200001a0 	.word	0x200001a0

080013b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff ffee 	bl	80013a0 <HAL_GetTick>
 80013c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d0:	d005      	beq.n	80013de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_Delay+0x44>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013de:	bf00      	nop
 80013e0:	f7ff ffde 	bl	80013a0 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d8f7      	bhi.n	80013e0 <HAL_Delay+0x28>
  {
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2000000c 	.word	0x2000000c

08001400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800141c:	4013      	ands	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800142c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	db0b      	blt.n	800148e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 021f 	and.w	r2, r3, #31
 800147c:	4907      	ldr	r1, [pc, #28]	; (800149c <__NVIC_EnableIRQ+0x38>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	2001      	movs	r0, #1
 8001486:	fa00 f202 	lsl.w	r2, r0, r2
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e100 	.word	0xe000e100

080014a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	db0a      	blt.n	80014ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	490c      	ldr	r1, [pc, #48]	; (80014ec <__NVIC_SetPriority+0x4c>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c8:	e00a      	b.n	80014e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4908      	ldr	r1, [pc, #32]	; (80014f0 <__NVIC_SetPriority+0x50>)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	3b04      	subs	r3, #4
 80014d8:	0112      	lsls	r2, r2, #4
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	440b      	add	r3, r1
 80014de:	761a      	strb	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000e100 	.word	0xe000e100
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f1c3 0307 	rsb	r3, r3, #7
 800150e:	2b04      	cmp	r3, #4
 8001510:	bf28      	it	cs
 8001512:	2304      	movcs	r3, #4
 8001514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3304      	adds	r3, #4
 800151a:	2b06      	cmp	r3, #6
 800151c:	d902      	bls.n	8001524 <NVIC_EncodePriority+0x30>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3b03      	subs	r3, #3
 8001522:	e000      	b.n	8001526 <NVIC_EncodePriority+0x32>
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	f04f 32ff 	mov.w	r2, #4294967295
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	401a      	ands	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800153c:	f04f 31ff 	mov.w	r1, #4294967295
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43d9      	mvns	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	4313      	orrs	r3, r2
         );
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800156c:	d301      	bcc.n	8001572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156e:	2301      	movs	r3, #1
 8001570:	e00f      	b.n	8001592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <SysTick_Config+0x40>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157a:	210f      	movs	r1, #15
 800157c:	f04f 30ff 	mov.w	r0, #4294967295
 8001580:	f7ff ff8e 	bl	80014a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <SysTick_Config+0x40>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <SysTick_Config+0x40>)
 800158c:	2207      	movs	r2, #7
 800158e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	e000e010 	.word	0xe000e010

080015a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ff29 	bl	8001400 <__NVIC_SetPriorityGrouping>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015c8:	f7ff ff3e 	bl	8001448 <__NVIC_GetPriorityGrouping>
 80015cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	6978      	ldr	r0, [r7, #20]
 80015d4:	f7ff ff8e 	bl	80014f4 <NVIC_EncodePriority>
 80015d8:	4602      	mov	r2, r0
 80015da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff5d 	bl	80014a0 <__NVIC_SetPriority>
}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff31 	bl	8001464 <__NVIC_EnableIRQ>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ffa2 	bl	800155c <SysTick_Config>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001622:	b480      	push	{r7}
 8001624:	b085      	sub	sp, #20
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d008      	beq.n	800164c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2204      	movs	r2, #4
 800163e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e022      	b.n	8001692 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 020e 	bic.w	r2, r2, #14
 800165a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0201 	bic.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001670:	f003 021c 	and.w	r2, r3, #28
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	2101      	movs	r1, #1
 800167a:	fa01 f202 	lsl.w	r2, r1, r2
 800167e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001690:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001692:	4618      	mov	r0, r3
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d005      	beq.n	80016c2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2204      	movs	r2, #4
 80016ba:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	e029      	b.n	8001716 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 020e 	bic.w	r2, r2, #14
 80016d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0201 	bic.w	r2, r2, #1
 80016e0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f003 021c 	and.w	r2, r3, #28
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	2101      	movs	r1, #1
 80016f0:	fa01 f202 	lsl.w	r2, r1, r2
 80016f4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	4798      	blx	r3
    }
  }
  return status;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172e:	e17f      	b.n	8001a30 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2101      	movs	r1, #1
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 8171 	beq.w	8001a2a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b01      	cmp	r3, #1
 8001752:	d005      	beq.n	8001760 <HAL_GPIO_Init+0x40>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d130      	bne.n	80017c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001796:	2201      	movs	r2, #1
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	f003 0201 	and.w	r2, r3, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d118      	bne.n	8001800 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017d4:	2201      	movs	r2, #1
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	08db      	lsrs	r3, r3, #3
 80017ea:	f003 0201 	and.w	r2, r3, #1
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b03      	cmp	r3, #3
 800180a:	d017      	beq.n	800183c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	2203      	movs	r2, #3
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d123      	bne.n	8001890 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	08da      	lsrs	r2, r3, #3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3208      	adds	r2, #8
 8001850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	220f      	movs	r2, #15
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	08da      	lsrs	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3208      	adds	r2, #8
 800188a:	6939      	ldr	r1, [r7, #16]
 800188c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	2203      	movs	r2, #3
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0203 	and.w	r2, r3, #3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80ac 	beq.w	8001a2a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	4b5f      	ldr	r3, [pc, #380]	; (8001a50 <HAL_GPIO_Init+0x330>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d6:	4a5e      	ldr	r2, [pc, #376]	; (8001a50 <HAL_GPIO_Init+0x330>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6613      	str	r3, [r2, #96]	; 0x60
 80018de:	4b5c      	ldr	r3, [pc, #368]	; (8001a50 <HAL_GPIO_Init+0x330>)
 80018e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018ea:	4a5a      	ldr	r2, [pc, #360]	; (8001a54 <HAL_GPIO_Init+0x334>)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001914:	d025      	beq.n	8001962 <HAL_GPIO_Init+0x242>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4f      	ldr	r2, [pc, #316]	; (8001a58 <HAL_GPIO_Init+0x338>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01f      	beq.n	800195e <HAL_GPIO_Init+0x23e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4e      	ldr	r2, [pc, #312]	; (8001a5c <HAL_GPIO_Init+0x33c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d019      	beq.n	800195a <HAL_GPIO_Init+0x23a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4d      	ldr	r2, [pc, #308]	; (8001a60 <HAL_GPIO_Init+0x340>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_GPIO_Init+0x236>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4c      	ldr	r2, [pc, #304]	; (8001a64 <HAL_GPIO_Init+0x344>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00d      	beq.n	8001952 <HAL_GPIO_Init+0x232>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4b      	ldr	r2, [pc, #300]	; (8001a68 <HAL_GPIO_Init+0x348>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d007      	beq.n	800194e <HAL_GPIO_Init+0x22e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4a      	ldr	r2, [pc, #296]	; (8001a6c <HAL_GPIO_Init+0x34c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d101      	bne.n	800194a <HAL_GPIO_Init+0x22a>
 8001946:	2306      	movs	r3, #6
 8001948:	e00c      	b.n	8001964 <HAL_GPIO_Init+0x244>
 800194a:	2307      	movs	r3, #7
 800194c:	e00a      	b.n	8001964 <HAL_GPIO_Init+0x244>
 800194e:	2305      	movs	r3, #5
 8001950:	e008      	b.n	8001964 <HAL_GPIO_Init+0x244>
 8001952:	2304      	movs	r3, #4
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x244>
 8001956:	2303      	movs	r3, #3
 8001958:	e004      	b.n	8001964 <HAL_GPIO_Init+0x244>
 800195a:	2302      	movs	r3, #2
 800195c:	e002      	b.n	8001964 <HAL_GPIO_Init+0x244>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x244>
 8001962:	2300      	movs	r3, #0
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	f002 0203 	and.w	r2, r2, #3
 800196a:	0092      	lsls	r2, r2, #2
 800196c:	4093      	lsls	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001974:	4937      	ldr	r1, [pc, #220]	; (8001a54 <HAL_GPIO_Init+0x334>)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3302      	adds	r3, #2
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001982:	4b3b      	ldr	r3, [pc, #236]	; (8001a70 <HAL_GPIO_Init+0x350>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019a6:	4a32      	ldr	r2, [pc, #200]	; (8001a70 <HAL_GPIO_Init+0x350>)
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019ac:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <HAL_GPIO_Init+0x350>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019d0:	4a27      	ldr	r2, [pc, #156]	; (8001a70 <HAL_GPIO_Init+0x350>)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019d6:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <HAL_GPIO_Init+0x350>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019fa:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <HAL_GPIO_Init+0x350>)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_GPIO_Init+0x350>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a24:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <HAL_GPIO_Init+0x350>)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f47f ae78 	bne.w	8001730 <HAL_GPIO_Init+0x10>
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40010000 	.word	0x40010000
 8001a58:	48000400 	.word	0x48000400
 8001a5c:	48000800 	.word	0x48000800
 8001a60:	48000c00 	.word	0x48000c00
 8001a64:	48001000 	.word	0x48001000
 8001a68:	48001400 	.word	0x48001400
 8001a6c:	48001800 	.word	0x48001800
 8001a70:	40010400 	.word	0x40010400

08001a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a84:	787b      	ldrb	r3, [r7, #1]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d006      	beq.n	8001ac8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aba:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fd8a 	bl	80005dc <HAL_GPIO_EXTI_Callback>
  }
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40010400 	.word	0x40010400

08001ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e08d      	b.n	8001c02 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff fa0a 	bl	8000f14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2224      	movs	r2, #36	; 0x24
 8001b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0201 	bic.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d107      	bne.n	8001b4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	e006      	b.n	8001b5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d108      	bne.n	8001b76 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	e007      	b.n	8001b86 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ba8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691a      	ldr	r2, [r3, #16]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69d9      	ldr	r1, [r3, #28]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1a      	ldr	r2, [r3, #32]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2220      	movs	r2, #32
 8001bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	4608      	mov	r0, r1
 8001c16:	4611      	mov	r1, r2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	817b      	strh	r3, [r7, #10]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	813b      	strh	r3, [r7, #8]
 8001c22:	4613      	mov	r3, r2
 8001c24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b20      	cmp	r3, #32
 8001c30:	f040 80f9 	bne.w	8001e26 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <HAL_I2C_Mem_Write+0x34>
 8001c3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d105      	bne.n	8001c4c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0ed      	b.n	8001e28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_I2C_Mem_Write+0x4e>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e0e6      	b.n	8001e28 <HAL_I2C_Mem_Write+0x21c>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c62:	f7ff fb9d 	bl	80013a0 <HAL_GetTick>
 8001c66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	2319      	movs	r3, #25
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 f955 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0d1      	b.n	8001e28 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2221      	movs	r2, #33	; 0x21
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2240      	movs	r2, #64	; 0x40
 8001c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a3a      	ldr	r2, [r7, #32]
 8001c9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cac:	88f8      	ldrh	r0, [r7, #6]
 8001cae:	893a      	ldrh	r2, [r7, #8]
 8001cb0:	8979      	ldrh	r1, [r7, #10]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	4603      	mov	r3, r0
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 f8b9 	bl	8001e34 <I2C_RequestMemoryWrite>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0a9      	b.n	8001e28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	2bff      	cmp	r3, #255	; 0xff
 8001cdc:	d90e      	bls.n	8001cfc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	22ff      	movs	r2, #255	; 0xff
 8001ce2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	8979      	ldrh	r1, [r7, #10]
 8001cec:	2300      	movs	r3, #0
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 facf 	bl	8002298 <I2C_TransferConfig>
 8001cfa:	e00f      	b.n	8001d1c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	8979      	ldrh	r1, [r7, #10]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 fabe 	bl	8002298 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 f94e 	bl	8001fc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e07b      	b.n	8001e28 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	781a      	ldrb	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d034      	beq.n	8001dd4 <HAL_I2C_Mem_Write+0x1c8>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d130      	bne.n	8001dd4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2180      	movs	r1, #128	; 0x80
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 f8d1 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e04d      	b.n	8001e28 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	2bff      	cmp	r3, #255	; 0xff
 8001d94:	d90e      	bls.n	8001db4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	22ff      	movs	r2, #255	; 0xff
 8001d9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	8979      	ldrh	r1, [r7, #10]
 8001da4:	2300      	movs	r3, #0
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 fa73 	bl	8002298 <I2C_TransferConfig>
 8001db2:	e00f      	b.n	8001dd4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	8979      	ldrh	r1, [r7, #10]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 fa62 	bl	8002298 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d19e      	bne.n	8001d1c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f934 	bl	8002050 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e01a      	b.n	8001e28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2220      	movs	r2, #32
 8001df8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6859      	ldr	r1, [r3, #4]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_I2C_Mem_Write+0x224>)
 8001e06:	400b      	ands	r3, r1
 8001e08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	e000      	b.n	8001e28 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001e26:	2302      	movs	r3, #2
  }
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	fe00e800 	.word	0xfe00e800

08001e34 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	4608      	mov	r0, r1
 8001e3e:	4611      	mov	r1, r2
 8001e40:	461a      	mov	r2, r3
 8001e42:	4603      	mov	r3, r0
 8001e44:	817b      	strh	r3, [r7, #10]
 8001e46:	460b      	mov	r3, r1
 8001e48:	813b      	strh	r3, [r7, #8]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	8979      	ldrh	r1, [r7, #10]
 8001e54:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <I2C_RequestMemoryWrite+0xa4>)
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 fa1b 	bl	8002298 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	69b9      	ldr	r1, [r7, #24]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 f8ab 	bl	8001fc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e02c      	b.n	8001ed0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e76:	88fb      	ldrh	r3, [r7, #6]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d105      	bne.n	8001e88 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e7c:	893b      	ldrh	r3, [r7, #8]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	629a      	str	r2, [r3, #40]	; 0x28
 8001e86:	e015      	b.n	8001eb4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e88:	893b      	ldrh	r3, [r7, #8]
 8001e8a:	0a1b      	lsrs	r3, r3, #8
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	69b9      	ldr	r1, [r7, #24]
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 f891 	bl	8001fc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e012      	b.n	8001ed0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001eaa:	893b      	ldrh	r3, [r7, #8]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2180      	movs	r1, #128	; 0x80
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 f830 	bl	8001f24 <I2C_WaitOnFlagUntilTimeout>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	80002000 	.word	0x80002000

08001edc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d103      	bne.n	8001efa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d007      	beq.n	8001f18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	619a      	str	r2, [r3, #24]
  }
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	4613      	mov	r3, r2
 8001f32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f34:	e031      	b.n	8001f9a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3c:	d02d      	beq.n	8001f9a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3e:	f7ff fa2f 	bl	80013a0 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d302      	bcc.n	8001f54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d122      	bne.n	8001f9a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	bf0c      	ite	eq
 8001f64:	2301      	moveq	r3, #1
 8001f66:	2300      	movne	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d113      	bne.n	8001f9a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f043 0220 	orr.w	r2, r3, #32
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2220      	movs	r2, #32
 8001f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00f      	b.n	8001fba <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699a      	ldr	r2, [r3, #24]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	bf0c      	ite	eq
 8001faa:	2301      	moveq	r3, #1
 8001fac:	2300      	movne	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d0be      	beq.n	8001f36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fce:	e033      	b.n	8002038 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	68b9      	ldr	r1, [r7, #8]
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 f87f 	bl	80020d8 <I2C_IsErrorOccurred>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e031      	b.n	8002048 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fea:	d025      	beq.n	8002038 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fec:	f7ff f9d8 	bl	80013a0 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d302      	bcc.n	8002002 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d11a      	bne.n	8002038 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b02      	cmp	r3, #2
 800200e:	d013      	beq.n	8002038 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	f043 0220 	orr.w	r2, r3, #32
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2220      	movs	r2, #32
 8002020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e007      	b.n	8002048 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b02      	cmp	r3, #2
 8002044:	d1c4      	bne.n	8001fd0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800205c:	e02f      	b.n	80020be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 f838 	bl	80020d8 <I2C_IsErrorOccurred>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e02d      	b.n	80020ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002072:	f7ff f995 	bl	80013a0 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	429a      	cmp	r2, r3
 8002080:	d302      	bcc.n	8002088 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d11a      	bne.n	80020be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b20      	cmp	r3, #32
 8002094:	d013      	beq.n	80020be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	f043 0220 	orr.w	r2, r3, #32
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2220      	movs	r2, #32
 80020a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e007      	b.n	80020ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d1c8      	bne.n	800205e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	d068      	beq.n	80021d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2210      	movs	r2, #16
 800210a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800210c:	e049      	b.n	80021a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d045      	beq.n	80021a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002116:	f7ff f943 	bl	80013a0 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	429a      	cmp	r2, r3
 8002124:	d302      	bcc.n	800212c <I2C_IsErrorOccurred+0x54>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d13a      	bne.n	80021a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002136:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800213e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800214a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800214e:	d121      	bne.n	8002194 <I2C_IsErrorOccurred+0xbc>
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002156:	d01d      	beq.n	8002194 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002158:	7cfb      	ldrb	r3, [r7, #19]
 800215a:	2b20      	cmp	r3, #32
 800215c:	d01a      	beq.n	8002194 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800216c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800216e:	f7ff f917 	bl	80013a0 <HAL_GetTick>
 8002172:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002174:	e00e      	b.n	8002194 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002176:	f7ff f913 	bl	80013a0 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b19      	cmp	r3, #25
 8002182:	d907      	bls.n	8002194 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	f043 0320 	orr.w	r3, r3, #32
 800218a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002192:	e006      	b.n	80021a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b20      	cmp	r3, #32
 80021a0:	d1e9      	bne.n	8002176 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b20      	cmp	r3, #32
 80021ae:	d003      	beq.n	80021b8 <I2C_IsErrorOccurred+0xe0>
 80021b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0aa      	beq.n	800210e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d103      	bne.n	80021c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2220      	movs	r2, #32
 80021c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00b      	beq.n	8002200 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	f043 0308 	orr.w	r3, r3, #8
 8002210:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800221a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00b      	beq.n	8002244 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800222c:	6a3b      	ldr	r3, [r7, #32]
 800222e:	f043 0302 	orr.w	r3, r3, #2
 8002232:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800223c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01c      	beq.n	8002286 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f7ff fe45 	bl	8001edc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6859      	ldr	r1, [r3, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <I2C_IsErrorOccurred+0x1bc>)
 800225e:	400b      	ands	r3, r1
 8002260:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	431a      	orrs	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2220      	movs	r2, #32
 8002272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800228a:	4618      	mov	r0, r3
 800228c:	3728      	adds	r7, #40	; 0x28
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	fe00e800 	.word	0xfe00e800

08002298 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	817b      	strh	r3, [r7, #10]
 80022a6:	4613      	mov	r3, r2
 80022a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022aa:	897b      	ldrh	r3, [r7, #10]
 80022ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022b0:	7a7b      	ldrb	r3, [r7, #9]
 80022b2:	041b      	lsls	r3, r3, #16
 80022b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	0d5b      	lsrs	r3, r3, #21
 80022d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <I2C_TransferConfig+0x60>)
 80022d8:	430b      	orrs	r3, r1
 80022da:	43db      	mvns	r3, r3
 80022dc:	ea02 0103 	and.w	r1, r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80022ea:	bf00      	nop
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	03ff63ff 	.word	0x03ff63ff

080022fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b20      	cmp	r3, #32
 8002310:	d138      	bne.n	8002384 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800231c:	2302      	movs	r3, #2
 800231e:	e032      	b.n	8002386 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2224      	movs	r2, #36	; 0x24
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800234e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6819      	ldr	r1, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	e000      	b.n	8002386 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002384:	2302      	movs	r3, #2
  }
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002392:	b480      	push	{r7}
 8002394:	b085      	sub	sp, #20
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d139      	bne.n	800241c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e033      	b.n	800241e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2224      	movs	r2, #36	; 0x24
 80023c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0201 	bic.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	e000      	b.n	800241e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800241c:	2302      	movs	r3, #2
  }
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <HAL_PWREx_GetVoltageRange+0x18>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40007000 	.word	0x40007000

08002448 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002456:	d130      	bne.n	80024ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002458:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002464:	d038      	beq.n	80024d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800246e:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002470:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002474:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002476:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2232      	movs	r2, #50	; 0x32
 800247c:	fb02 f303 	mul.w	r3, r2, r3
 8002480:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	0c9b      	lsrs	r3, r3, #18
 8002488:	3301      	adds	r3, #1
 800248a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800248c:	e002      	b.n	8002494 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3b01      	subs	r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002494:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a0:	d102      	bne.n	80024a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f2      	bne.n	800248e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024a8:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b4:	d110      	bne.n	80024d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e00f      	b.n	80024da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024ba:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c6:	d007      	beq.n	80024d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024c8:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024d0:	4a05      	ldr	r2, [pc, #20]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40007000 	.word	0x40007000
 80024ec:	20000004 	.word	0x20000004
 80024f0:	431bde83 	.word	0x431bde83

080024f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e3ca      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002506:	4b97      	ldr	r3, [pc, #604]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002510:	4b94      	ldr	r3, [pc, #592]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80e4 	beq.w	80026f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <HAL_RCC_OscConfig+0x4a>
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b0c      	cmp	r3, #12
 8002532:	f040 808b 	bne.w	800264c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b01      	cmp	r3, #1
 800253a:	f040 8087 	bne.w	800264c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800253e:	4b89      	ldr	r3, [pc, #548]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d005      	beq.n	8002556 <HAL_RCC_OscConfig+0x62>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e3a2      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1a      	ldr	r2, [r3, #32]
 800255a:	4b82      	ldr	r3, [pc, #520]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <HAL_RCC_OscConfig+0x7c>
 8002566:	4b7f      	ldr	r3, [pc, #508]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800256e:	e005      	b.n	800257c <HAL_RCC_OscConfig+0x88>
 8002570:	4b7c      	ldr	r3, [pc, #496]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800257c:	4293      	cmp	r3, r2
 800257e:	d223      	bcs.n	80025c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4618      	mov	r0, r3
 8002586:	f000 fd55 	bl	8003034 <RCC_SetFlashLatencyFromMSIRange>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e383      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002594:	4b73      	ldr	r3, [pc, #460]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a72      	ldr	r2, [pc, #456]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800259a:	f043 0308 	orr.w	r3, r3, #8
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b70      	ldr	r3, [pc, #448]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	496d      	ldr	r1, [pc, #436]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025b2:	4b6c      	ldr	r3, [pc, #432]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	4968      	ldr	r1, [pc, #416]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	604b      	str	r3, [r1, #4]
 80025c6:	e025      	b.n	8002614 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025c8:	4b66      	ldr	r3, [pc, #408]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a65      	ldr	r2, [pc, #404]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025ce:	f043 0308 	orr.w	r3, r3, #8
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	4b63      	ldr	r3, [pc, #396]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	4960      	ldr	r1, [pc, #384]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025e6:	4b5f      	ldr	r3, [pc, #380]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	021b      	lsls	r3, r3, #8
 80025f4:	495b      	ldr	r1, [pc, #364]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d109      	bne.n	8002614 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fd15 	bl	8003034 <RCC_SetFlashLatencyFromMSIRange>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e343      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002614:	f000 fc4a 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002618:	4602      	mov	r2, r0
 800261a:	4b52      	ldr	r3, [pc, #328]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	4950      	ldr	r1, [pc, #320]	; (8002768 <HAL_RCC_OscConfig+0x274>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	fa22 f303 	lsr.w	r3, r2, r3
 8002630:	4a4e      	ldr	r2, [pc, #312]	; (800276c <HAL_RCC_OscConfig+0x278>)
 8002632:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002634:	4b4e      	ldr	r3, [pc, #312]	; (8002770 <HAL_RCC_OscConfig+0x27c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe fe61 	bl	8001300 <HAL_InitTick>
 800263e:	4603      	mov	r3, r0
 8002640:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d052      	beq.n	80026ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	e327      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d032      	beq.n	80026ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002654:	4b43      	ldr	r3, [pc, #268]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a42      	ldr	r2, [pc, #264]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002660:	f7fe fe9e 	bl	80013a0 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002668:	f7fe fe9a 	bl	80013a0 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e310      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800267a:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002686:	4b37      	ldr	r3, [pc, #220]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a36      	ldr	r2, [pc, #216]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800268c:	f043 0308 	orr.w	r3, r3, #8
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b34      	ldr	r3, [pc, #208]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	4931      	ldr	r1, [pc, #196]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026a4:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	492c      	ldr	r1, [pc, #176]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
 80026b8:	e01a      	b.n	80026f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026ba:	4b2a      	ldr	r3, [pc, #168]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a29      	ldr	r2, [pc, #164]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026c6:	f7fe fe6b 	bl	80013a0 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026ce:	f7fe fe67 	bl	80013a0 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e2dd      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026e0:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCC_OscConfig+0x1da>
 80026ec:	e000      	b.n	80026f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d074      	beq.n	80027e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d005      	beq.n	800270e <HAL_RCC_OscConfig+0x21a>
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2b0c      	cmp	r3, #12
 8002706:	d10e      	bne.n	8002726 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2b03      	cmp	r3, #3
 800270c:	d10b      	bne.n	8002726 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d064      	beq.n	80027e4 <HAL_RCC_OscConfig+0x2f0>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d160      	bne.n	80027e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e2ba      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x24a>
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0b      	ldr	r2, [pc, #44]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e026      	b.n	800278c <HAL_RCC_OscConfig+0x298>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002746:	d115      	bne.n	8002774 <HAL_RCC_OscConfig+0x280>
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a05      	ldr	r2, [pc, #20]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800274e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a02      	ldr	r2, [pc, #8]	; (8002764 <HAL_RCC_OscConfig+0x270>)
 800275a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	e014      	b.n	800278c <HAL_RCC_OscConfig+0x298>
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000
 8002768:	080065fc 	.word	0x080065fc
 800276c:	20000004 	.word	0x20000004
 8002770:	20000008 	.word	0x20000008
 8002774:	4ba0      	ldr	r3, [pc, #640]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a9f      	ldr	r2, [pc, #636]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800277a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b9d      	ldr	r3, [pc, #628]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a9c      	ldr	r2, [pc, #624]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7fe fe04 	bl	80013a0 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279c:	f7fe fe00 	bl	80013a0 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e276      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ae:	4b92      	ldr	r3, [pc, #584]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x2a8>
 80027ba:	e014      	b.n	80027e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7fe fdf0 	bl	80013a0 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe fdec 	bl	80013a0 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e262      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027d6:	4b88      	ldr	r3, [pc, #544]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x2d0>
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d060      	beq.n	80028b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_OscConfig+0x310>
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d119      	bne.n	8002832 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d116      	bne.n	8002832 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002804:	4b7c      	ldr	r3, [pc, #496]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_OscConfig+0x328>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e23f      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281c:	4b76      	ldr	r3, [pc, #472]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	061b      	lsls	r3, r3, #24
 800282a:	4973      	ldr	r1, [pc, #460]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002830:	e040      	b.n	80028b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d023      	beq.n	8002882 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800283a:	4b6f      	ldr	r3, [pc, #444]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a6e      	ldr	r2, [pc, #440]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002846:	f7fe fdab 	bl	80013a0 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284e:	f7fe fda7 	bl	80013a0 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e21d      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002860:	4b65      	ldr	r3, [pc, #404]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286c:	4b62      	ldr	r3, [pc, #392]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	061b      	lsls	r3, r3, #24
 800287a:	495f      	ldr	r1, [pc, #380]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
 8002880:	e018      	b.n	80028b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002882:	4b5d      	ldr	r3, [pc, #372]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a5c      	ldr	r2, [pc, #368]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800288c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288e:	f7fe fd87 	bl	80013a0 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002896:	f7fe fd83 	bl	80013a0 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e1f9      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028a8:	4b53      	ldr	r3, [pc, #332]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f0      	bne.n	8002896 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d03c      	beq.n	800293a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d01c      	beq.n	8002902 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c8:	4b4b      	ldr	r3, [pc, #300]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80028ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ce:	4a4a      	ldr	r2, [pc, #296]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d8:	f7fe fd62 	bl	80013a0 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e0:	f7fe fd5e 	bl	80013a0 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1d4      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028f2:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80028f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ef      	beq.n	80028e0 <HAL_RCC_OscConfig+0x3ec>
 8002900:	e01b      	b.n	800293a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002902:	4b3d      	ldr	r3, [pc, #244]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002908:	4a3b      	ldr	r2, [pc, #236]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002912:	f7fe fd45 	bl	80013a0 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291a:	f7fe fd41 	bl	80013a0 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e1b7      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800292c:	4b32      	ldr	r3, [pc, #200]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800292e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1ef      	bne.n	800291a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80a6 	beq.w	8002a94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002948:	2300      	movs	r3, #0
 800294a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800294c:	4b2a      	ldr	r3, [pc, #168]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800294e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10d      	bne.n	8002974 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002958:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	4a26      	ldr	r2, [pc, #152]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 800295e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002962:	6593      	str	r3, [r2, #88]	; 0x58
 8002964:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002970:	2301      	movs	r3, #1
 8002972:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002974:	4b21      	ldr	r3, [pc, #132]	; (80029fc <HAL_RCC_OscConfig+0x508>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d118      	bne.n	80029b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002980:	4b1e      	ldr	r3, [pc, #120]	; (80029fc <HAL_RCC_OscConfig+0x508>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <HAL_RCC_OscConfig+0x508>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298c:	f7fe fd08 	bl	80013a0 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002994:	f7fe fd04 	bl	80013a0 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e17a      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_RCC_OscConfig+0x508>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d108      	bne.n	80029cc <HAL_RCC_OscConfig+0x4d8>
 80029ba:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c0:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ca:	e029      	b.n	8002a20 <HAL_RCC_OscConfig+0x52c>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b05      	cmp	r3, #5
 80029d2:	d115      	bne.n	8002a00 <HAL_RCC_OscConfig+0x50c>
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80029dc:	f043 0304 	orr.w	r3, r3, #4
 80029e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ea:	4a03      	ldr	r2, [pc, #12]	; (80029f8 <HAL_RCC_OscConfig+0x504>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029f4:	e014      	b.n	8002a20 <HAL_RCC_OscConfig+0x52c>
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40007000 	.word	0x40007000
 8002a00:	4b9c      	ldr	r3, [pc, #624]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a06:	4a9b      	ldr	r2, [pc, #620]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a10:	4b98      	ldr	r3, [pc, #608]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	4a97      	ldr	r2, [pc, #604]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a18:	f023 0304 	bic.w	r3, r3, #4
 8002a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d016      	beq.n	8002a56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7fe fcba 	bl	80013a0 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a30:	f7fe fcb6 	bl	80013a0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e12a      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a46:	4b8b      	ldr	r3, [pc, #556]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ed      	beq.n	8002a30 <HAL_RCC_OscConfig+0x53c>
 8002a54:	e015      	b.n	8002a82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a56:	f7fe fca3 	bl	80013a0 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7fe fc9f 	bl	80013a0 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e113      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a74:	4b7f      	ldr	r3, [pc, #508]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1ed      	bne.n	8002a5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a82:	7ffb      	ldrb	r3, [r7, #31]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d105      	bne.n	8002a94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a88:	4b7a      	ldr	r3, [pc, #488]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	4a79      	ldr	r2, [pc, #484]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a92:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80fe 	beq.w	8002c9a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	f040 80d0 	bne.w	8002c48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002aa8:	4b72      	ldr	r3, [pc, #456]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f003 0203 	and.w	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d130      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d127      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d11f      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ae8:	2a07      	cmp	r2, #7
 8002aea:	bf14      	ite	ne
 8002aec:	2201      	movne	r2, #1
 8002aee:	2200      	moveq	r2, #0
 8002af0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d113      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b00:	085b      	lsrs	r3, r3, #1
 8002b02:	3b01      	subs	r3, #1
 8002b04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d109      	bne.n	8002b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	3b01      	subs	r3, #1
 8002b18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d06e      	beq.n	8002bfc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2b0c      	cmp	r3, #12
 8002b22:	d069      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b24:	4b53      	ldr	r3, [pc, #332]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b30:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0ad      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b40:	4b4c      	ldr	r3, [pc, #304]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a4b      	ldr	r2, [pc, #300]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b4c:	f7fe fc28 	bl	80013a0 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b54:	f7fe fc24 	bl	80013a0 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e09a      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b66:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b72:	4b40      	ldr	r3, [pc, #256]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	4b40      	ldr	r3, [pc, #256]	; (8002c78 <HAL_RCC_OscConfig+0x784>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b82:	3a01      	subs	r2, #1
 8002b84:	0112      	lsls	r2, r2, #4
 8002b86:	4311      	orrs	r1, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b8c:	0212      	lsls	r2, r2, #8
 8002b8e:	4311      	orrs	r1, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b94:	0852      	lsrs	r2, r2, #1
 8002b96:	3a01      	subs	r2, #1
 8002b98:	0552      	lsls	r2, r2, #21
 8002b9a:	4311      	orrs	r1, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ba0:	0852      	lsrs	r2, r2, #1
 8002ba2:	3a01      	subs	r2, #1
 8002ba4:	0652      	lsls	r2, r2, #25
 8002ba6:	4311      	orrs	r1, r2
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bac:	0912      	lsrs	r2, r2, #4
 8002bae:	0452      	lsls	r2, r2, #17
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	4930      	ldr	r1, [pc, #192]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bb8:	4b2e      	ldr	r3, [pc, #184]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a2d      	ldr	r2, [pc, #180]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bc4:	4b2b      	ldr	r3, [pc, #172]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4a2a      	ldr	r2, [pc, #168]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bd0:	f7fe fbe6 	bl	80013a0 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe fbe2 	bl	80013a0 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e058      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bea:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bf6:	e050      	b.n	8002c9a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e04f      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d148      	bne.n	8002c9a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c08:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a19      	ldr	r2, [pc, #100]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c14:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4a16      	ldr	r2, [pc, #88]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c20:	f7fe fbbe 	bl	80013a0 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe fbba 	bl	80013a0 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e030      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x734>
 8002c46:	e028      	b.n	8002c9a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2b0c      	cmp	r3, #12
 8002c4c:	d023      	beq.n	8002c96 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a08      	ldr	r2, [pc, #32]	; (8002c74 <HAL_RCC_OscConfig+0x780>)
 8002c54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7fe fba1 	bl	80013a0 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c60:	e00c      	b.n	8002c7c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c62:	f7fe fb9d 	bl	80013a0 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d905      	bls.n	8002c7c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e013      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
 8002c74:	40021000 	.word	0x40021000
 8002c78:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_RCC_OscConfig+0x7b0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1ec      	bne.n	8002c62 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_RCC_OscConfig+0x7b0>)
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	4905      	ldr	r1, [pc, #20]	; (8002ca4 <HAL_RCC_OscConfig+0x7b0>)
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_RCC_OscConfig+0x7b4>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	60cb      	str	r3, [r1, #12]
 8002c94:	e001      	b.n	8002c9a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3720      	adds	r7, #32
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	feeefffc 	.word	0xfeeefffc

08002cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0e7      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b75      	ldr	r3, [pc, #468]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d910      	bls.n	8002cf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b72      	ldr	r3, [pc, #456]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 0207 	bic.w	r2, r3, #7
 8002cd6:	4970      	ldr	r1, [pc, #448]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b6e      	ldr	r3, [pc, #440]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0cf      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d010      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	4b66      	ldr	r3, [pc, #408]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d908      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d0c:	4b63      	ldr	r3, [pc, #396]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4960      	ldr	r1, [pc, #384]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d04c      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d107      	bne.n	8002d42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d32:	4b5a      	ldr	r3, [pc, #360]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d121      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e0a6      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d4a:	4b54      	ldr	r3, [pc, #336]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d115      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e09a      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d62:	4b4e      	ldr	r3, [pc, #312]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e08e      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d72:	4b4a      	ldr	r3, [pc, #296]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e086      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d82:	4b46      	ldr	r3, [pc, #280]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f023 0203 	bic.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4943      	ldr	r1, [pc, #268]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d94:	f7fe fb04 	bl	80013a0 <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9c:	f7fe fb00 	bl	80013a0 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e06e      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db2:	4b3a      	ldr	r3, [pc, #232]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 020c 	and.w	r2, r3, #12
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d1eb      	bne.n	8002d9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d010      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d208      	bcs.n	8002df2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de0:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	492b      	ldr	r1, [pc, #172]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df2:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d210      	bcs.n	8002e22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 0207 	bic.w	r2, r3, #7
 8002e08:	4923      	ldr	r1, [pc, #140]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e10:	4b21      	ldr	r3, [pc, #132]	; (8002e98 <HAL_RCC_ClockConfig+0x1ec>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e036      	b.n	8002e90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e2e:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	4918      	ldr	r1, [pc, #96]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d009      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4910      	ldr	r1, [pc, #64]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e60:	f000 f824 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002e64:	4602      	mov	r2, r0
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <HAL_RCC_ClockConfig+0x1f0>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	490b      	ldr	r1, [pc, #44]	; (8002ea0 <HAL_RCC_ClockConfig+0x1f4>)
 8002e72:	5ccb      	ldrb	r3, [r1, r3]
 8002e74:	f003 031f 	and.w	r3, r3, #31
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7c:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_RCC_ClockConfig+0x1fc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe fa3b 	bl	8001300 <HAL_InitTick>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e8e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40022000 	.word	0x40022000
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	080065fc 	.word	0x080065fc
 8002ea4:	20000004 	.word	0x20000004
 8002ea8:	20000008 	.word	0x20000008

08002eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b089      	sub	sp, #36	; 0x24
 8002eb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eba:	4b3e      	ldr	r3, [pc, #248]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ec4:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	2b0c      	cmp	r3, #12
 8002ed8:	d121      	bne.n	8002f1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d11e      	bne.n	8002f1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ee0:	4b34      	ldr	r3, [pc, #208]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002eec:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	e005      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002efc:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f08:	4a2b      	ldr	r2, [pc, #172]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10d      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d102      	bne.n	8002f2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f24:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	e004      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d101      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f30:	4b23      	ldr	r3, [pc, #140]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	d134      	bne.n	8002fa4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f3a:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d003      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0xac>
 8002f50:	e005      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f52:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f54:	617b      	str	r3, [r7, #20]
      break;
 8002f56:	e005      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f5a:	617b      	str	r3, [r7, #20]
      break;
 8002f5c:	e002      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	617b      	str	r3, [r7, #20]
      break;
 8002f62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	3301      	adds	r3, #1
 8002f70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	fb03 f202 	mul.w	r2, r3, r2
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	0e5b      	lsrs	r3, r3, #25
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	3301      	adds	r3, #1
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fa4:	69bb      	ldr	r3, [r7, #24]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3724      	adds	r7, #36	; 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	08006614 	.word	0x08006614
 8002fbc:	00f42400 	.word	0x00f42400
 8002fc0:	007a1200 	.word	0x007a1200

08002fc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20000004 	.word	0x20000004

08002fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fe0:	f7ff fff0 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	4904      	ldr	r1, [pc, #16]	; (8003004 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ff2:	5ccb      	ldrb	r3, [r1, r3]
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40021000 	.word	0x40021000
 8003004:	0800660c 	.word	0x0800660c

08003008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800300c:	f7ff ffda 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8003010:	4602      	mov	r2, r0
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	0adb      	lsrs	r3, r3, #11
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	4904      	ldr	r1, [pc, #16]	; (8003030 <HAL_RCC_GetPCLK2Freq+0x28>)
 800301e:	5ccb      	ldrb	r3, [r1, r3]
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000
 8003030:	0800660c 	.word	0x0800660c

08003034 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003040:	4b2a      	ldr	r3, [pc, #168]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800304c:	f7ff f9ee 	bl	800242c <HAL_PWREx_GetVoltageRange>
 8003050:	6178      	str	r0, [r7, #20]
 8003052:	e014      	b.n	800307e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003054:	4b25      	ldr	r3, [pc, #148]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	4a24      	ldr	r2, [pc, #144]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800305a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305e:	6593      	str	r3, [r2, #88]	; 0x58
 8003060:	4b22      	ldr	r3, [pc, #136]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800306c:	f7ff f9de 	bl	800242c <HAL_PWREx_GetVoltageRange>
 8003070:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003072:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	4a1d      	ldr	r2, [pc, #116]	; (80030ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800307c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003084:	d10b      	bne.n	800309e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b80      	cmp	r3, #128	; 0x80
 800308a:	d919      	bls.n	80030c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2ba0      	cmp	r3, #160	; 0xa0
 8003090:	d902      	bls.n	8003098 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003092:	2302      	movs	r3, #2
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	e013      	b.n	80030c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003098:	2301      	movs	r3, #1
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	e010      	b.n	80030c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b80      	cmp	r3, #128	; 0x80
 80030a2:	d902      	bls.n	80030aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030a4:	2303      	movs	r3, #3
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	e00a      	b.n	80030c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b80      	cmp	r3, #128	; 0x80
 80030ae:	d102      	bne.n	80030b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030b0:	2302      	movs	r3, #2
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	e004      	b.n	80030c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b70      	cmp	r3, #112	; 0x70
 80030ba:	d101      	bne.n	80030c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030bc:	2301      	movs	r3, #1
 80030be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f023 0207 	bic.w	r2, r3, #7
 80030c8:	4909      	ldr	r1, [pc, #36]	; (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030d0:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d001      	beq.n	80030e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40022000 	.word	0x40022000

080030f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030fc:	2300      	movs	r3, #0
 80030fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003100:	2300      	movs	r3, #0
 8003102:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800310c:	2b00      	cmp	r3, #0
 800310e:	d041      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003114:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003118:	d02a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800311a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800311e:	d824      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003120:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003124:	d008      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003126:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800312a:	d81e      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003130:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003134:	d010      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003136:	e018      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003138:	4b86      	ldr	r3, [pc, #536]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4a85      	ldr	r2, [pc, #532]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003142:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003144:	e015      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3304      	adds	r3, #4
 800314a:	2100      	movs	r1, #0
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fabb 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 8003152:	4603      	mov	r3, r0
 8003154:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003156:	e00c      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3320      	adds	r3, #32
 800315c:	2100      	movs	r1, #0
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fba6 	bl	80038b0 <RCCEx_PLLSAI2_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003168:	e003      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	74fb      	strb	r3, [r7, #19]
      break;
 800316e:	e000      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003172:	7cfb      	ldrb	r3, [r7, #19]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10b      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003178:	4b76      	ldr	r3, [pc, #472]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003186:	4973      	ldr	r1, [pc, #460]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800318e:	e001      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003190:	7cfb      	ldrb	r3, [r7, #19]
 8003192:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d041      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031a8:	d02a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031ae:	d824      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031b4:	d008      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031ba:	d81e      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031c4:	d010      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031c6:	e018      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031c8:	4b62      	ldr	r3, [pc, #392]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a61      	ldr	r2, [pc, #388]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031d4:	e015      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3304      	adds	r3, #4
 80031da:	2100      	movs	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fa73 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031e6:	e00c      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3320      	adds	r3, #32
 80031ec:	2100      	movs	r1, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fb5e 	bl	80038b0 <RCCEx_PLLSAI2_Config>
 80031f4:	4603      	mov	r3, r0
 80031f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031f8:	e003      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	74fb      	strb	r3, [r7, #19]
      break;
 80031fe:	e000      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003200:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003202:	7cfb      	ldrb	r3, [r7, #19]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10b      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003208:	4b52      	ldr	r3, [pc, #328]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003216:	494f      	ldr	r1, [pc, #316]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800321e:	e001      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003220:	7cfb      	ldrb	r3, [r7, #19]
 8003222:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80a0 	beq.w	8003372 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003232:	2300      	movs	r3, #0
 8003234:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003236:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003246:	2300      	movs	r3, #0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00d      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324c:	4b41      	ldr	r3, [pc, #260]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	4a40      	ldr	r2, [pc, #256]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003256:	6593      	str	r3, [r2, #88]	; 0x58
 8003258:	4b3e      	ldr	r3, [pc, #248]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003264:	2301      	movs	r3, #1
 8003266:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003268:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a3a      	ldr	r2, [pc, #232]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800326e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003272:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003274:	f7fe f894 	bl	80013a0 <HAL_GetTick>
 8003278:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800327a:	e009      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327c:	f7fe f890 	bl	80013a0 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d902      	bls.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	74fb      	strb	r3, [r7, #19]
        break;
 800328e:	e005      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003290:	4b31      	ldr	r3, [pc, #196]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0ef      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d15c      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032a2:	4b2c      	ldr	r3, [pc, #176]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01f      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d019      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032c0:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032cc:	4b21      	ldr	r3, [pc, #132]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	4a20      	ldr	r2, [pc, #128]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032dc:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e2:	4a1c      	ldr	r2, [pc, #112]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032ec:	4a19      	ldr	r2, [pc, #100]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d016      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fe f84f 	bl	80013a0 <HAL_GetTick>
 8003302:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003304:	e00b      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003306:	f7fe f84b 	bl	80013a0 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f241 3288 	movw	r2, #5000	; 0x1388
 8003314:	4293      	cmp	r3, r2
 8003316:	d902      	bls.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	74fb      	strb	r3, [r7, #19]
            break;
 800331c:	e006      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800331e:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0ec      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800332c:	7cfb      	ldrb	r3, [r7, #19]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10c      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003332:	4b08      	ldr	r3, [pc, #32]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003342:	4904      	ldr	r1, [pc, #16]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800334a:	e009      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800334c:	7cfb      	ldrb	r3, [r7, #19]
 800334e:	74bb      	strb	r3, [r7, #18]
 8003350:	e006      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
 8003358:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335c:	7cfb      	ldrb	r3, [r7, #19]
 800335e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003360:	7c7b      	ldrb	r3, [r7, #17]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d105      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003366:	4b9e      	ldr	r3, [pc, #632]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	4a9d      	ldr	r2, [pc, #628]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003370:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800337e:	4b98      	ldr	r3, [pc, #608]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003384:	f023 0203 	bic.w	r2, r3, #3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338c:	4994      	ldr	r1, [pc, #592]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033a0:	4b8f      	ldr	r3, [pc, #572]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a6:	f023 020c 	bic.w	r2, r3, #12
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ae:	498c      	ldr	r1, [pc, #560]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033c2:	4b87      	ldr	r3, [pc, #540]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	4983      	ldr	r1, [pc, #524]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00a      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033e4:	4b7e      	ldr	r3, [pc, #504]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	497b      	ldr	r1, [pc, #492]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003406:	4b76      	ldr	r3, [pc, #472]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003414:	4972      	ldr	r1, [pc, #456]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003428:	4b6d      	ldr	r3, [pc, #436]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003436:	496a      	ldr	r1, [pc, #424]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800344a:	4b65      	ldr	r3, [pc, #404]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003450:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003458:	4961      	ldr	r1, [pc, #388]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800346c:	4b5c      	ldr	r3, [pc, #368]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003472:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347a:	4959      	ldr	r1, [pc, #356]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800348e:	4b54      	ldr	r3, [pc, #336]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003494:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349c:	4950      	ldr	r1, [pc, #320]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034b0:	4b4b      	ldr	r3, [pc, #300]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	4948      	ldr	r1, [pc, #288]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034d2:	4b43      	ldr	r3, [pc, #268]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e0:	493f      	ldr	r1, [pc, #252]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d028      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034f4:	4b3a      	ldr	r3, [pc, #232]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003502:	4937      	ldr	r1, [pc, #220]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800350e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003512:	d106      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003514:	4b32      	ldr	r3, [pc, #200]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4a31      	ldr	r2, [pc, #196]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800351e:	60d3      	str	r3, [r2, #12]
 8003520:	e011      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003526:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800352a:	d10c      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3304      	adds	r3, #4
 8003530:	2101      	movs	r1, #1
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f8c8 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 8003538:	4603      	mov	r3, r0
 800353a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003542:	7cfb      	ldrb	r3, [r7, #19]
 8003544:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d028      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003552:	4b23      	ldr	r3, [pc, #140]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	491f      	ldr	r1, [pc, #124]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003570:	d106      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003572:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	4a1a      	ldr	r2, [pc, #104]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003578:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800357c:	60d3      	str	r3, [r2, #12]
 800357e:	e011      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003584:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003588:	d10c      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3304      	adds	r3, #4
 800358e:	2101      	movs	r1, #1
 8003590:	4618      	mov	r0, r3
 8003592:	f000 f899 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 8003596:	4603      	mov	r3, r0
 8003598:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800359a:	7cfb      	ldrb	r3, [r7, #19]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d02b      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035be:	4908      	ldr	r1, [pc, #32]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ce:	d109      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d0:	4b03      	ldr	r3, [pc, #12]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4a02      	ldr	r2, [pc, #8]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035da:	60d3      	str	r3, [r2, #12]
 80035dc:	e014      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035ec:	d10c      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3304      	adds	r3, #4
 80035f2:	2101      	movs	r1, #1
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 f867 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035fe:	7cfb      	ldrb	r3, [r7, #19]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003604:	7cfb      	ldrb	r3, [r7, #19]
 8003606:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d02f      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003614:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003622:	4928      	ldr	r1, [pc, #160]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800362e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003632:	d10d      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3304      	adds	r3, #4
 8003638:	2102      	movs	r1, #2
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f844 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d014      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800364a:	7cfb      	ldrb	r3, [r7, #19]
 800364c:	74bb      	strb	r3, [r7, #18]
 800364e:	e011      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003658:	d10c      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3320      	adds	r3, #32
 800365e:	2102      	movs	r1, #2
 8003660:	4618      	mov	r0, r3
 8003662:	f000 f925 	bl	80038b0 <RCCEx_PLLSAI2_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800366a:	7cfb      	ldrb	r3, [r7, #19]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003670:	7cfb      	ldrb	r3, [r7, #19]
 8003672:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003680:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003686:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800368e:	490d      	ldr	r1, [pc, #52]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036a2:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036b2:	4904      	ldr	r1, [pc, #16]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40021000 	.word	0x40021000

080036c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036d6:	4b75      	ldr	r3, [pc, #468]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d018      	beq.n	8003714 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036e2:	4b72      	ldr	r3, [pc, #456]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f003 0203 	and.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d10d      	bne.n	800370e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
       ||
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036fa:	4b6c      	ldr	r3, [pc, #432]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
       ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d047      	beq.n	800379e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
 8003712:	e044      	b.n	800379e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d018      	beq.n	800374e <RCCEx_PLLSAI1_Config+0x86>
 800371c:	2b03      	cmp	r3, #3
 800371e:	d825      	bhi.n	800376c <RCCEx_PLLSAI1_Config+0xa4>
 8003720:	2b01      	cmp	r3, #1
 8003722:	d002      	beq.n	800372a <RCCEx_PLLSAI1_Config+0x62>
 8003724:	2b02      	cmp	r3, #2
 8003726:	d009      	beq.n	800373c <RCCEx_PLLSAI1_Config+0x74>
 8003728:	e020      	b.n	800376c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800372a:	4b60      	ldr	r3, [pc, #384]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d11d      	bne.n	8003772 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800373a:	e01a      	b.n	8003772 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800373c:	4b5b      	ldr	r3, [pc, #364]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d116      	bne.n	8003776 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374c:	e013      	b.n	8003776 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800374e:	4b57      	ldr	r3, [pc, #348]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10f      	bne.n	800377a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800375a:	4b54      	ldr	r3, [pc, #336]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800376a:	e006      	b.n	800377a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
      break;
 8003770:	e004      	b.n	800377c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003772:	bf00      	nop
 8003774:	e002      	b.n	800377c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800377a:	bf00      	nop
    }

    if(status == HAL_OK)
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10d      	bne.n	800379e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003782:	4b4a      	ldr	r3, [pc, #296]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6819      	ldr	r1, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	3b01      	subs	r3, #1
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	430b      	orrs	r3, r1
 8003798:	4944      	ldr	r1, [pc, #272]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d17d      	bne.n	80038a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037a4:	4b41      	ldr	r3, [pc, #260]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a40      	ldr	r2, [pc, #256]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80037aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b0:	f7fd fdf6 	bl	80013a0 <HAL_GetTick>
 80037b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037b6:	e009      	b.n	80037cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037b8:	f7fd fdf2 	bl	80013a0 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d902      	bls.n	80037cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	73fb      	strb	r3, [r7, #15]
        break;
 80037ca:	e005      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037cc:	4b37      	ldr	r3, [pc, #220]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ef      	bne.n	80037b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d160      	bne.n	80038a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d111      	bne.n	8003808 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037e4:	4b31      	ldr	r3, [pc, #196]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6892      	ldr	r2, [r2, #8]
 80037f4:	0211      	lsls	r1, r2, #8
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68d2      	ldr	r2, [r2, #12]
 80037fa:	0912      	lsrs	r2, r2, #4
 80037fc:	0452      	lsls	r2, r2, #17
 80037fe:	430a      	orrs	r2, r1
 8003800:	492a      	ldr	r1, [pc, #168]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003802:	4313      	orrs	r3, r2
 8003804:	610b      	str	r3, [r1, #16]
 8003806:	e027      	b.n	8003858 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d112      	bne.n	8003834 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800380e:	4b27      	ldr	r3, [pc, #156]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003816:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6892      	ldr	r2, [r2, #8]
 800381e:	0211      	lsls	r1, r2, #8
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6912      	ldr	r2, [r2, #16]
 8003824:	0852      	lsrs	r2, r2, #1
 8003826:	3a01      	subs	r2, #1
 8003828:	0552      	lsls	r2, r2, #21
 800382a:	430a      	orrs	r2, r1
 800382c:	491f      	ldr	r1, [pc, #124]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800382e:	4313      	orrs	r3, r2
 8003830:	610b      	str	r3, [r1, #16]
 8003832:	e011      	b.n	8003858 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003834:	4b1d      	ldr	r3, [pc, #116]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800383c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6892      	ldr	r2, [r2, #8]
 8003844:	0211      	lsls	r1, r2, #8
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6952      	ldr	r2, [r2, #20]
 800384a:	0852      	lsrs	r2, r2, #1
 800384c:	3a01      	subs	r2, #1
 800384e:	0652      	lsls	r2, r2, #25
 8003850:	430a      	orrs	r2, r1
 8003852:	4916      	ldr	r1, [pc, #88]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003854:	4313      	orrs	r3, r2
 8003856:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003858:	4b14      	ldr	r3, [pc, #80]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a13      	ldr	r2, [pc, #76]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800385e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003862:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003864:	f7fd fd9c 	bl	80013a0 <HAL_GetTick>
 8003868:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800386a:	e009      	b.n	8003880 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800386c:	f7fd fd98 	bl	80013a0 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d902      	bls.n	8003880 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	73fb      	strb	r3, [r7, #15]
          break;
 800387e:	e005      	b.n	800388c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003880:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0ef      	beq.n	800386c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003892:	4b06      	ldr	r3, [pc, #24]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003894:	691a      	ldr	r2, [r3, #16]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	4904      	ldr	r1, [pc, #16]	; (80038ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800389c:	4313      	orrs	r3, r2
 800389e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40021000 	.word	0x40021000

080038b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038be:	4b6a      	ldr	r3, [pc, #424]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d018      	beq.n	80038fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038ca:	4b67      	ldr	r3, [pc, #412]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0203 	and.w	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d10d      	bne.n	80038f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
       ||
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d009      	beq.n	80038f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038e2:	4b61      	ldr	r3, [pc, #388]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	091b      	lsrs	r3, r3, #4
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
       ||
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d047      	beq.n	8003986 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
 80038fa:	e044      	b.n	8003986 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b03      	cmp	r3, #3
 8003902:	d018      	beq.n	8003936 <RCCEx_PLLSAI2_Config+0x86>
 8003904:	2b03      	cmp	r3, #3
 8003906:	d825      	bhi.n	8003954 <RCCEx_PLLSAI2_Config+0xa4>
 8003908:	2b01      	cmp	r3, #1
 800390a:	d002      	beq.n	8003912 <RCCEx_PLLSAI2_Config+0x62>
 800390c:	2b02      	cmp	r3, #2
 800390e:	d009      	beq.n	8003924 <RCCEx_PLLSAI2_Config+0x74>
 8003910:	e020      	b.n	8003954 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003912:	4b55      	ldr	r3, [pc, #340]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d11d      	bne.n	800395a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003922:	e01a      	b.n	800395a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003924:	4b50      	ldr	r3, [pc, #320]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392c:	2b00      	cmp	r3, #0
 800392e:	d116      	bne.n	800395e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003934:	e013      	b.n	800395e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003936:	4b4c      	ldr	r3, [pc, #304]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10f      	bne.n	8003962 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003942:	4b49      	ldr	r3, [pc, #292]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003952:	e006      	b.n	8003962 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]
      break;
 8003958:	e004      	b.n	8003964 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800395a:	bf00      	nop
 800395c:	e002      	b.n	8003964 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800395e:	bf00      	nop
 8003960:	e000      	b.n	8003964 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003962:	bf00      	nop
    }

    if(status == HAL_OK)
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10d      	bne.n	8003986 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800396a:	4b3f      	ldr	r3, [pc, #252]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6819      	ldr	r1, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	3b01      	subs	r3, #1
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	430b      	orrs	r3, r1
 8003980:	4939      	ldr	r1, [pc, #228]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003982:	4313      	orrs	r3, r2
 8003984:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d167      	bne.n	8003a5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800398c:	4b36      	ldr	r3, [pc, #216]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a35      	ldr	r2, [pc, #212]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003998:	f7fd fd02 	bl	80013a0 <HAL_GetTick>
 800399c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800399e:	e009      	b.n	80039b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039a0:	f7fd fcfe 	bl	80013a0 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d902      	bls.n	80039b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	73fb      	strb	r3, [r7, #15]
        break;
 80039b2:	e005      	b.n	80039c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039b4:	4b2c      	ldr	r3, [pc, #176]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1ef      	bne.n	80039a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d14a      	bne.n	8003a5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d111      	bne.n	80039f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039cc:	4b26      	ldr	r3, [pc, #152]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6892      	ldr	r2, [r2, #8]
 80039dc:	0211      	lsls	r1, r2, #8
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	68d2      	ldr	r2, [r2, #12]
 80039e2:	0912      	lsrs	r2, r2, #4
 80039e4:	0452      	lsls	r2, r2, #17
 80039e6:	430a      	orrs	r2, r1
 80039e8:	491f      	ldr	r1, [pc, #124]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	614b      	str	r3, [r1, #20]
 80039ee:	e011      	b.n	8003a14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039f0:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6892      	ldr	r2, [r2, #8]
 8003a00:	0211      	lsls	r1, r2, #8
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6912      	ldr	r2, [r2, #16]
 8003a06:	0852      	lsrs	r2, r2, #1
 8003a08:	3a01      	subs	r2, #1
 8003a0a:	0652      	lsls	r2, r2, #25
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	4916      	ldr	r1, [pc, #88]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a14:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a13      	ldr	r2, [pc, #76]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fd fcbe 	bl	80013a0 <HAL_GetTick>
 8003a24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a26:	e009      	b.n	8003a3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a28:	f7fd fcba 	bl	80013a0 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d902      	bls.n	8003a3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	73fb      	strb	r3, [r7, #15]
          break;
 8003a3a:	e005      	b.n	8003a48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0ef      	beq.n	8003a28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a50:	695a      	ldr	r2, [r3, #20]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	4904      	ldr	r1, [pc, #16]	; (8003a68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000

08003a6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e040      	b.n	8003b00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fd fa9e 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2224      	movs	r2, #36	; 0x24
 8003a98:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0201 	bic.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fec0 	bl	8004838 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fc05 	bl	80042c8 <UART_SetConfig>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e01b      	b.n	8003b00 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 ff3f 	bl	800497c <UART_CheckIdleState>
 8003afe:	4603      	mov	r3, r0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08a      	sub	sp, #40	; 0x28
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	4613      	mov	r3, r2
 8003b16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d178      	bne.n	8003c12 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <HAL_UART_Transmit+0x24>
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e071      	b.n	8003c14 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2221      	movs	r2, #33	; 0x21
 8003b3c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b3e:	f7fd fc2f 	bl	80013a0 <HAL_GetTick>
 8003b42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	88fa      	ldrh	r2, [r7, #6]
 8003b48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	88fa      	ldrh	r2, [r7, #6]
 8003b50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5c:	d108      	bne.n	8003b70 <HAL_UART_Transmit+0x68>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d104      	bne.n	8003b70 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	e003      	b.n	8003b78 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b78:	e030      	b.n	8003bdc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2200      	movs	r2, #0
 8003b82:	2180      	movs	r1, #128	; 0x80
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 ffa1 	bl	8004acc <UART_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d004      	beq.n	8003b9a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e03c      	b.n	8003c14 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10b      	bne.n	8003bb8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	881a      	ldrh	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bac:	b292      	uxth	r2, r2
 8003bae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	e008      	b.n	8003bca <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	781a      	ldrb	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	b292      	uxth	r2, r2
 8003bc2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1c8      	bne.n	8003b7a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2140      	movs	r1, #64	; 0x40
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 ff6a 	bl	8004acc <UART_WaitOnFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d004      	beq.n	8003c08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e005      	b.n	8003c14 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	e000      	b.n	8003c14 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003c12:	2302      	movs	r3, #2
  }
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3720      	adds	r7, #32
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08a      	sub	sp, #40	; 0x28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	4613      	mov	r3, r2
 8003c28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d137      	bne.n	8003ca4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_UART_Receive_IT+0x24>
 8003c3a:	88fb      	ldrh	r3, [r7, #6]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e030      	b.n	8003ca6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a18      	ldr	r2, [pc, #96]	; (8003cb0 <HAL_UART_Receive_IT+0x94>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d01f      	beq.n	8003c94 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d018      	beq.n	8003c94 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	e853 3f00 	ldrex	r3, [r3]
 8003c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	623b      	str	r3, [r7, #32]
 8003c82:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c84:	69f9      	ldr	r1, [r7, #28]
 8003c86:	6a3a      	ldr	r2, [r7, #32]
 8003c88:	e841 2300 	strex	r3, r2, [r1]
 8003c8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e6      	bne.n	8003c62 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	461a      	mov	r2, r3
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 ff7e 	bl	8004b9c <UART_Start_Receive_IT>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	e000      	b.n	8003ca6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
  }
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3728      	adds	r7, #40	; 0x28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40008000 	.word	0x40008000

08003cb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b0ba      	sub	sp, #232	; 0xe8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003cda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003cde:	f640 030f 	movw	r3, #2063	; 0x80f
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003ce8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d115      	bne.n	8003d1c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00f      	beq.n	8003d1c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d009      	beq.n	8003d1c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 82ae 	beq.w	800426e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	4798      	blx	r3
      }
      return;
 8003d1a:	e2a8      	b.n	800426e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003d1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8117 	beq.w	8003f54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d36:	4b85      	ldr	r3, [pc, #532]	; (8003f4c <HAL_UART_IRQHandler+0x298>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 810a 	beq.w	8003f54 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d011      	beq.n	8003d70 <HAL_UART_IRQHandler+0xbc>
 8003d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00b      	beq.n	8003d70 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d66:	f043 0201 	orr.w	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d011      	beq.n	8003da0 <HAL_UART_IRQHandler+0xec>
 8003d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00b      	beq.n	8003da0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d96:	f043 0204 	orr.w	r2, r3, #4
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d011      	beq.n	8003dd0 <HAL_UART_IRQHandler+0x11c>
 8003dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00b      	beq.n	8003dd0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc6:	f043 0202 	orr.w	r2, r3, #2
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d017      	beq.n	8003e0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003de8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00b      	beq.n	8003e0c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2208      	movs	r2, #8
 8003dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e02:	f043 0208 	orr.w	r2, r3, #8
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d012      	beq.n	8003e3e <HAL_UART_IRQHandler+0x18a>
 8003e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00c      	beq.n	8003e3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e34:	f043 0220 	orr.w	r2, r3, #32
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 8214 	beq.w	8004272 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00d      	beq.n	8003e72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e86:	2b40      	cmp	r3, #64	; 0x40
 8003e88:	d005      	beq.n	8003e96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d04f      	beq.n	8003f36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 ff46 	bl	8004d28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea6:	2b40      	cmp	r3, #64	; 0x40
 8003ea8:	d141      	bne.n	8003f2e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3308      	adds	r3, #8
 8003eb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ed6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003eda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ee2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003eee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1d9      	bne.n	8003eaa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d013      	beq.n	8003f26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f02:	4a13      	ldr	r2, [pc, #76]	; (8003f50 <HAL_UART_IRQHandler+0x29c>)
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fd fbc7 	bl	800169e <HAL_DMA_Abort_IT>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d017      	beq.n	8003f46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f20:	4610      	mov	r0, r2
 8003f22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f24:	e00f      	b.n	8003f46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f9b8 	bl	800429c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2c:	e00b      	b.n	8003f46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f9b4 	bl	800429c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f34:	e007      	b.n	8003f46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f9b0 	bl	800429c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003f44:	e195      	b.n	8004272 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f46:	bf00      	nop
    return;
 8003f48:	e193      	b.n	8004272 <HAL_UART_IRQHandler+0x5be>
 8003f4a:	bf00      	nop
 8003f4c:	04000120 	.word	0x04000120
 8003f50:	08004df1 	.word	0x08004df1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	f040 814e 	bne.w	80041fa <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 8147 	beq.w	80041fa <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 8140 	beq.w	80041fa <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2210      	movs	r2, #16
 8003f80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	f040 80b8 	bne.w	8004102 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8167 	beq.w	8004276 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	f080 815f 	bcs.w	8004276 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f040 8086 	bne.w	80040e0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fe0:	e853 3f00 	ldrex	r3, [r3]
 8003fe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ffe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004002:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800400a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004016:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1da      	bne.n	8003fd4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3308      	adds	r3, #8
 8004024:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800402e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3308      	adds	r3, #8
 800403e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004042:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004046:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800404a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004054:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e1      	bne.n	800401e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3308      	adds	r3, #8
 8004060:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800406a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800406c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3308      	adds	r3, #8
 800407a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800407e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004080:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004082:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004084:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800408c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e3      	bne.n	800405a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2220      	movs	r2, #32
 8004096:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b0:	f023 0310 	bic.w	r3, r3, #16
 80040b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80040c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040ca:	e841 2300 	strex	r3, r2, [r1]
 80040ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1e4      	bne.n	80040a0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fd faa1 	bl	8001622 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	4619      	mov	r1, r3
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8d8 	bl	80042b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004100:	e0b9      	b.n	8004276 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800410e:	b29b      	uxth	r3, r3
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 80ab 	beq.w	800427a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004124:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 80a6 	beq.w	800427a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800413c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800413e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004142:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004150:	647b      	str	r3, [r7, #68]	; 0x44
 8004152:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004156:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e4      	bne.n	800412e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3308      	adds	r3, #8
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	623b      	str	r3, [r7, #32]
   return(result);
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3308      	adds	r3, #8
 8004184:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004188:	633a      	str	r2, [r7, #48]	; 0x30
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800418e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e3      	bne.n	8004164 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	e853 3f00 	ldrex	r3, [r3]
 80041bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f023 0310 	bic.w	r3, r3, #16
 80041c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041d2:	61fb      	str	r3, [r7, #28]
 80041d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	69b9      	ldr	r1, [r7, #24]
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	617b      	str	r3, [r7, #20]
   return(result);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e4      	bne.n	80041b0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2202      	movs	r2, #2
 80041ea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041f0:	4619      	mov	r1, r3
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f85c 	bl	80042b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041f8:	e03f      	b.n	800427a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00e      	beq.n	8004224 <HAL_UART_IRQHandler+0x570>
 8004206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800420a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800421a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 ffe3 	bl	80051e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004222:	e02d      	b.n	8004280 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00e      	beq.n	800424e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01c      	beq.n	800427e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4798      	blx	r3
    }
    return;
 800424c:	e017      	b.n	800427e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800424e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d012      	beq.n	8004280 <HAL_UART_IRQHandler+0x5cc>
 800425a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00c      	beq.n	8004280 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fdd8 	bl	8004e1c <UART_EndTransmit_IT>
    return;
 800426c:	e008      	b.n	8004280 <HAL_UART_IRQHandler+0x5cc>
      return;
 800426e:	bf00      	nop
 8004270:	e006      	b.n	8004280 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004272:	bf00      	nop
 8004274:	e004      	b.n	8004280 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004276:	bf00      	nop
 8004278:	e002      	b.n	8004280 <HAL_UART_IRQHandler+0x5cc>
      return;
 800427a:	bf00      	nop
 800427c:	e000      	b.n	8004280 <HAL_UART_IRQHandler+0x5cc>
    return;
 800427e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004280:	37e8      	adds	r7, #232	; 0xe8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop

08004288 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042cc:	b08a      	sub	sp, #40	; 0x28
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4ba4      	ldr	r3, [pc, #656]	; (8004588 <UART_SetConfig+0x2c0>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004300:	430b      	orrs	r3, r1
 8004302:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a99      	ldr	r2, [pc, #612]	; (800458c <UART_SetConfig+0x2c4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004330:	4313      	orrs	r3, r2
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004344:	430a      	orrs	r2, r1
 8004346:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a90      	ldr	r2, [pc, #576]	; (8004590 <UART_SetConfig+0x2c8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d126      	bne.n	80043a0 <UART_SetConfig+0xd8>
 8004352:	4b90      	ldr	r3, [pc, #576]	; (8004594 <UART_SetConfig+0x2cc>)
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	2b03      	cmp	r3, #3
 800435e:	d81b      	bhi.n	8004398 <UART_SetConfig+0xd0>
 8004360:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <UART_SetConfig+0xa0>)
 8004362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004366:	bf00      	nop
 8004368:	08004379 	.word	0x08004379
 800436c:	08004389 	.word	0x08004389
 8004370:	08004381 	.word	0x08004381
 8004374:	08004391 	.word	0x08004391
 8004378:	2301      	movs	r3, #1
 800437a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437e:	e116      	b.n	80045ae <UART_SetConfig+0x2e6>
 8004380:	2302      	movs	r3, #2
 8004382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004386:	e112      	b.n	80045ae <UART_SetConfig+0x2e6>
 8004388:	2304      	movs	r3, #4
 800438a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438e:	e10e      	b.n	80045ae <UART_SetConfig+0x2e6>
 8004390:	2308      	movs	r3, #8
 8004392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004396:	e10a      	b.n	80045ae <UART_SetConfig+0x2e6>
 8004398:	2310      	movs	r3, #16
 800439a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439e:	e106      	b.n	80045ae <UART_SetConfig+0x2e6>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a7c      	ldr	r2, [pc, #496]	; (8004598 <UART_SetConfig+0x2d0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d138      	bne.n	800441c <UART_SetConfig+0x154>
 80043aa:	4b7a      	ldr	r3, [pc, #488]	; (8004594 <UART_SetConfig+0x2cc>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	f003 030c 	and.w	r3, r3, #12
 80043b4:	2b0c      	cmp	r3, #12
 80043b6:	d82d      	bhi.n	8004414 <UART_SetConfig+0x14c>
 80043b8:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <UART_SetConfig+0xf8>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043f5 	.word	0x080043f5
 80043c4:	08004415 	.word	0x08004415
 80043c8:	08004415 	.word	0x08004415
 80043cc:	08004415 	.word	0x08004415
 80043d0:	08004405 	.word	0x08004405
 80043d4:	08004415 	.word	0x08004415
 80043d8:	08004415 	.word	0x08004415
 80043dc:	08004415 	.word	0x08004415
 80043e0:	080043fd 	.word	0x080043fd
 80043e4:	08004415 	.word	0x08004415
 80043e8:	08004415 	.word	0x08004415
 80043ec:	08004415 	.word	0x08004415
 80043f0:	0800440d 	.word	0x0800440d
 80043f4:	2300      	movs	r3, #0
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fa:	e0d8      	b.n	80045ae <UART_SetConfig+0x2e6>
 80043fc:	2302      	movs	r3, #2
 80043fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004402:	e0d4      	b.n	80045ae <UART_SetConfig+0x2e6>
 8004404:	2304      	movs	r3, #4
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440a:	e0d0      	b.n	80045ae <UART_SetConfig+0x2e6>
 800440c:	2308      	movs	r3, #8
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004412:	e0cc      	b.n	80045ae <UART_SetConfig+0x2e6>
 8004414:	2310      	movs	r3, #16
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441a:	e0c8      	b.n	80045ae <UART_SetConfig+0x2e6>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a5e      	ldr	r2, [pc, #376]	; (800459c <UART_SetConfig+0x2d4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d125      	bne.n	8004472 <UART_SetConfig+0x1aa>
 8004426:	4b5b      	ldr	r3, [pc, #364]	; (8004594 <UART_SetConfig+0x2cc>)
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004430:	2b30      	cmp	r3, #48	; 0x30
 8004432:	d016      	beq.n	8004462 <UART_SetConfig+0x19a>
 8004434:	2b30      	cmp	r3, #48	; 0x30
 8004436:	d818      	bhi.n	800446a <UART_SetConfig+0x1a2>
 8004438:	2b20      	cmp	r3, #32
 800443a:	d00a      	beq.n	8004452 <UART_SetConfig+0x18a>
 800443c:	2b20      	cmp	r3, #32
 800443e:	d814      	bhi.n	800446a <UART_SetConfig+0x1a2>
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <UART_SetConfig+0x182>
 8004444:	2b10      	cmp	r3, #16
 8004446:	d008      	beq.n	800445a <UART_SetConfig+0x192>
 8004448:	e00f      	b.n	800446a <UART_SetConfig+0x1a2>
 800444a:	2300      	movs	r3, #0
 800444c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004450:	e0ad      	b.n	80045ae <UART_SetConfig+0x2e6>
 8004452:	2302      	movs	r3, #2
 8004454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004458:	e0a9      	b.n	80045ae <UART_SetConfig+0x2e6>
 800445a:	2304      	movs	r3, #4
 800445c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004460:	e0a5      	b.n	80045ae <UART_SetConfig+0x2e6>
 8004462:	2308      	movs	r3, #8
 8004464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004468:	e0a1      	b.n	80045ae <UART_SetConfig+0x2e6>
 800446a:	2310      	movs	r3, #16
 800446c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004470:	e09d      	b.n	80045ae <UART_SetConfig+0x2e6>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a4a      	ldr	r2, [pc, #296]	; (80045a0 <UART_SetConfig+0x2d8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d125      	bne.n	80044c8 <UART_SetConfig+0x200>
 800447c:	4b45      	ldr	r3, [pc, #276]	; (8004594 <UART_SetConfig+0x2cc>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004486:	2bc0      	cmp	r3, #192	; 0xc0
 8004488:	d016      	beq.n	80044b8 <UART_SetConfig+0x1f0>
 800448a:	2bc0      	cmp	r3, #192	; 0xc0
 800448c:	d818      	bhi.n	80044c0 <UART_SetConfig+0x1f8>
 800448e:	2b80      	cmp	r3, #128	; 0x80
 8004490:	d00a      	beq.n	80044a8 <UART_SetConfig+0x1e0>
 8004492:	2b80      	cmp	r3, #128	; 0x80
 8004494:	d814      	bhi.n	80044c0 <UART_SetConfig+0x1f8>
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <UART_SetConfig+0x1d8>
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d008      	beq.n	80044b0 <UART_SetConfig+0x1e8>
 800449e:	e00f      	b.n	80044c0 <UART_SetConfig+0x1f8>
 80044a0:	2300      	movs	r3, #0
 80044a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a6:	e082      	b.n	80045ae <UART_SetConfig+0x2e6>
 80044a8:	2302      	movs	r3, #2
 80044aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ae:	e07e      	b.n	80045ae <UART_SetConfig+0x2e6>
 80044b0:	2304      	movs	r3, #4
 80044b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b6:	e07a      	b.n	80045ae <UART_SetConfig+0x2e6>
 80044b8:	2308      	movs	r3, #8
 80044ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044be:	e076      	b.n	80045ae <UART_SetConfig+0x2e6>
 80044c0:	2310      	movs	r3, #16
 80044c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c6:	e072      	b.n	80045ae <UART_SetConfig+0x2e6>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a35      	ldr	r2, [pc, #212]	; (80045a4 <UART_SetConfig+0x2dc>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d12a      	bne.n	8004528 <UART_SetConfig+0x260>
 80044d2:	4b30      	ldr	r3, [pc, #192]	; (8004594 <UART_SetConfig+0x2cc>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044e0:	d01a      	beq.n	8004518 <UART_SetConfig+0x250>
 80044e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044e6:	d81b      	bhi.n	8004520 <UART_SetConfig+0x258>
 80044e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ec:	d00c      	beq.n	8004508 <UART_SetConfig+0x240>
 80044ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f2:	d815      	bhi.n	8004520 <UART_SetConfig+0x258>
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <UART_SetConfig+0x238>
 80044f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044fc:	d008      	beq.n	8004510 <UART_SetConfig+0x248>
 80044fe:	e00f      	b.n	8004520 <UART_SetConfig+0x258>
 8004500:	2300      	movs	r3, #0
 8004502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004506:	e052      	b.n	80045ae <UART_SetConfig+0x2e6>
 8004508:	2302      	movs	r3, #2
 800450a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800450e:	e04e      	b.n	80045ae <UART_SetConfig+0x2e6>
 8004510:	2304      	movs	r3, #4
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004516:	e04a      	b.n	80045ae <UART_SetConfig+0x2e6>
 8004518:	2308      	movs	r3, #8
 800451a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800451e:	e046      	b.n	80045ae <UART_SetConfig+0x2e6>
 8004520:	2310      	movs	r3, #16
 8004522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004526:	e042      	b.n	80045ae <UART_SetConfig+0x2e6>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a17      	ldr	r2, [pc, #92]	; (800458c <UART_SetConfig+0x2c4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d13a      	bne.n	80045a8 <UART_SetConfig+0x2e0>
 8004532:	4b18      	ldr	r3, [pc, #96]	; (8004594 <UART_SetConfig+0x2cc>)
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004538:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800453c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004540:	d01a      	beq.n	8004578 <UART_SetConfig+0x2b0>
 8004542:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004546:	d81b      	bhi.n	8004580 <UART_SetConfig+0x2b8>
 8004548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800454c:	d00c      	beq.n	8004568 <UART_SetConfig+0x2a0>
 800454e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004552:	d815      	bhi.n	8004580 <UART_SetConfig+0x2b8>
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <UART_SetConfig+0x298>
 8004558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800455c:	d008      	beq.n	8004570 <UART_SetConfig+0x2a8>
 800455e:	e00f      	b.n	8004580 <UART_SetConfig+0x2b8>
 8004560:	2300      	movs	r3, #0
 8004562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004566:	e022      	b.n	80045ae <UART_SetConfig+0x2e6>
 8004568:	2302      	movs	r3, #2
 800456a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456e:	e01e      	b.n	80045ae <UART_SetConfig+0x2e6>
 8004570:	2304      	movs	r3, #4
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004576:	e01a      	b.n	80045ae <UART_SetConfig+0x2e6>
 8004578:	2308      	movs	r3, #8
 800457a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800457e:	e016      	b.n	80045ae <UART_SetConfig+0x2e6>
 8004580:	2310      	movs	r3, #16
 8004582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004586:	e012      	b.n	80045ae <UART_SetConfig+0x2e6>
 8004588:	efff69f3 	.word	0xefff69f3
 800458c:	40008000 	.word	0x40008000
 8004590:	40013800 	.word	0x40013800
 8004594:	40021000 	.word	0x40021000
 8004598:	40004400 	.word	0x40004400
 800459c:	40004800 	.word	0x40004800
 80045a0:	40004c00 	.word	0x40004c00
 80045a4:	40005000 	.word	0x40005000
 80045a8:	2310      	movs	r3, #16
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a9f      	ldr	r2, [pc, #636]	; (8004830 <UART_SetConfig+0x568>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d17a      	bne.n	80046ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d824      	bhi.n	800460a <UART_SetConfig+0x342>
 80045c0:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <UART_SetConfig+0x300>)
 80045c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c6:	bf00      	nop
 80045c8:	080045ed 	.word	0x080045ed
 80045cc:	0800460b 	.word	0x0800460b
 80045d0:	080045f5 	.word	0x080045f5
 80045d4:	0800460b 	.word	0x0800460b
 80045d8:	080045fb 	.word	0x080045fb
 80045dc:	0800460b 	.word	0x0800460b
 80045e0:	0800460b 	.word	0x0800460b
 80045e4:	0800460b 	.word	0x0800460b
 80045e8:	08004603 	.word	0x08004603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045ec:	f7fe fcf6 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 80045f0:	61f8      	str	r0, [r7, #28]
        break;
 80045f2:	e010      	b.n	8004616 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f4:	4b8f      	ldr	r3, [pc, #572]	; (8004834 <UART_SetConfig+0x56c>)
 80045f6:	61fb      	str	r3, [r7, #28]
        break;
 80045f8:	e00d      	b.n	8004616 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045fa:	f7fe fc57 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 80045fe:	61f8      	str	r0, [r7, #28]
        break;
 8004600:	e009      	b.n	8004616 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004606:	61fb      	str	r3, [r7, #28]
        break;
 8004608:	e005      	b.n	8004616 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004614:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80fb 	beq.w	8004814 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	4413      	add	r3, r2
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	429a      	cmp	r2, r3
 800462c:	d305      	bcc.n	800463a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	429a      	cmp	r2, r3
 8004638:	d903      	bls.n	8004642 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004640:	e0e8      	b.n	8004814 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	2200      	movs	r2, #0
 8004646:	461c      	mov	r4, r3
 8004648:	4615      	mov	r5, r2
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	022b      	lsls	r3, r5, #8
 8004654:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004658:	0222      	lsls	r2, r4, #8
 800465a:	68f9      	ldr	r1, [r7, #12]
 800465c:	6849      	ldr	r1, [r1, #4]
 800465e:	0849      	lsrs	r1, r1, #1
 8004660:	2000      	movs	r0, #0
 8004662:	4688      	mov	r8, r1
 8004664:	4681      	mov	r9, r0
 8004666:	eb12 0a08 	adds.w	sl, r2, r8
 800466a:	eb43 0b09 	adc.w	fp, r3, r9
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	603b      	str	r3, [r7, #0]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800467c:	4650      	mov	r0, sl
 800467e:	4659      	mov	r1, fp
 8004680:	f7fb fdf6 	bl	8000270 <__aeabi_uldivmod>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4613      	mov	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004692:	d308      	bcc.n	80046a6 <UART_SetConfig+0x3de>
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800469a:	d204      	bcs.n	80046a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	60da      	str	r2, [r3, #12]
 80046a4:	e0b6      	b.n	8004814 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046ac:	e0b2      	b.n	8004814 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b6:	d15e      	bne.n	8004776 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80046b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d828      	bhi.n	8004712 <UART_SetConfig+0x44a>
 80046c0:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <UART_SetConfig+0x400>)
 80046c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c6:	bf00      	nop
 80046c8:	080046ed 	.word	0x080046ed
 80046cc:	080046f5 	.word	0x080046f5
 80046d0:	080046fd 	.word	0x080046fd
 80046d4:	08004713 	.word	0x08004713
 80046d8:	08004703 	.word	0x08004703
 80046dc:	08004713 	.word	0x08004713
 80046e0:	08004713 	.word	0x08004713
 80046e4:	08004713 	.word	0x08004713
 80046e8:	0800470b 	.word	0x0800470b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ec:	f7fe fc76 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 80046f0:	61f8      	str	r0, [r7, #28]
        break;
 80046f2:	e014      	b.n	800471e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046f4:	f7fe fc88 	bl	8003008 <HAL_RCC_GetPCLK2Freq>
 80046f8:	61f8      	str	r0, [r7, #28]
        break;
 80046fa:	e010      	b.n	800471e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046fc:	4b4d      	ldr	r3, [pc, #308]	; (8004834 <UART_SetConfig+0x56c>)
 80046fe:	61fb      	str	r3, [r7, #28]
        break;
 8004700:	e00d      	b.n	800471e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004702:	f7fe fbd3 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8004706:	61f8      	str	r0, [r7, #28]
        break;
 8004708:	e009      	b.n	800471e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800470a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800470e:	61fb      	str	r3, [r7, #28]
        break;
 8004710:	e005      	b.n	800471e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800471c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d077      	beq.n	8004814 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	005a      	lsls	r2, r3, #1
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	085b      	lsrs	r3, r3, #1
 800472e:	441a      	add	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	fbb2 f3f3 	udiv	r3, r2, r3
 8004738:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b0f      	cmp	r3, #15
 800473e:	d916      	bls.n	800476e <UART_SetConfig+0x4a6>
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004746:	d212      	bcs.n	800476e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f023 030f 	bic.w	r3, r3, #15
 8004750:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	085b      	lsrs	r3, r3, #1
 8004756:	b29b      	uxth	r3, r3
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	b29a      	uxth	r2, r3
 800475e:	8afb      	ldrh	r3, [r7, #22]
 8004760:	4313      	orrs	r3, r2
 8004762:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	8afa      	ldrh	r2, [r7, #22]
 800476a:	60da      	str	r2, [r3, #12]
 800476c:	e052      	b.n	8004814 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004774:	e04e      	b.n	8004814 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004776:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800477a:	2b08      	cmp	r3, #8
 800477c:	d827      	bhi.n	80047ce <UART_SetConfig+0x506>
 800477e:	a201      	add	r2, pc, #4	; (adr r2, 8004784 <UART_SetConfig+0x4bc>)
 8004780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004784:	080047a9 	.word	0x080047a9
 8004788:	080047b1 	.word	0x080047b1
 800478c:	080047b9 	.word	0x080047b9
 8004790:	080047cf 	.word	0x080047cf
 8004794:	080047bf 	.word	0x080047bf
 8004798:	080047cf 	.word	0x080047cf
 800479c:	080047cf 	.word	0x080047cf
 80047a0:	080047cf 	.word	0x080047cf
 80047a4:	080047c7 	.word	0x080047c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a8:	f7fe fc18 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 80047ac:	61f8      	str	r0, [r7, #28]
        break;
 80047ae:	e014      	b.n	80047da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047b0:	f7fe fc2a 	bl	8003008 <HAL_RCC_GetPCLK2Freq>
 80047b4:	61f8      	str	r0, [r7, #28]
        break;
 80047b6:	e010      	b.n	80047da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b8:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <UART_SetConfig+0x56c>)
 80047ba:	61fb      	str	r3, [r7, #28]
        break;
 80047bc:	e00d      	b.n	80047da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047be:	f7fe fb75 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 80047c2:	61f8      	str	r0, [r7, #28]
        break;
 80047c4:	e009      	b.n	80047da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ca:	61fb      	str	r3, [r7, #28]
        break;
 80047cc:	e005      	b.n	80047da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047d8:	bf00      	nop
    }

    if (pclk != 0U)
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d019      	beq.n	8004814 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	085a      	lsrs	r2, r3, #1
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	441a      	add	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2b0f      	cmp	r3, #15
 80047f8:	d909      	bls.n	800480e <UART_SetConfig+0x546>
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004800:	d205      	bcs.n	800480e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60da      	str	r2, [r3, #12]
 800480c:	e002      	b.n	8004814 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004820:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004824:	4618      	mov	r0, r3
 8004826:	3728      	adds	r7, #40	; 0x28
 8004828:	46bd      	mov	sp, r7
 800482a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800482e:	bf00      	nop
 8004830:	40008000 	.word	0x40008000
 8004834:	00f42400 	.word	0x00f42400

08004838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01a      	beq.n	800494e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004936:	d10a      	bne.n	800494e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	605a      	str	r2, [r3, #4]
  }
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b098      	sub	sp, #96	; 0x60
 8004980:	af02      	add	r7, sp, #8
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800498c:	f7fc fd08 	bl	80013a0 <HAL_GetTick>
 8004990:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b08      	cmp	r3, #8
 800499e:	d12e      	bne.n	80049fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a8:	2200      	movs	r2, #0
 80049aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f88c 	bl	8004acc <UART_WaitOnFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d021      	beq.n	80049fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ce:	653b      	str	r3, [r7, #80]	; 0x50
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d8:	647b      	str	r3, [r7, #68]	; 0x44
 80049da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e6      	bne.n	80049ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2220      	movs	r2, #32
 80049f0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e062      	b.n	8004ac4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d149      	bne.n	8004aa0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a14:	2200      	movs	r2, #0
 8004a16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f856 	bl	8004acc <UART_WaitOnFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d03c      	beq.n	8004aa0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	e853 3f00 	ldrex	r3, [r3]
 8004a32:	623b      	str	r3, [r7, #32]
   return(result);
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a44:	633b      	str	r3, [r7, #48]	; 0x30
 8004a46:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e6      	bne.n	8004a26 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	e853 3f00 	ldrex	r3, [r3]
 8004a66:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0301 	bic.w	r3, r3, #1
 8004a6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3308      	adds	r3, #8
 8004a76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a78:	61fa      	str	r2, [r7, #28]
 8004a7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7c:	69b9      	ldr	r1, [r7, #24]
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	e841 2300 	strex	r3, r2, [r1]
 8004a84:	617b      	str	r3, [r7, #20]
   return(result);
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1e5      	bne.n	8004a58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e011      	b.n	8004ac4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3758      	adds	r7, #88	; 0x58
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004adc:	e049      	b.n	8004b72 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae4:	d045      	beq.n	8004b72 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae6:	f7fc fc5b 	bl	80013a0 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d302      	bcc.n	8004afc <UART_WaitOnFlagUntilTimeout+0x30>
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e048      	b.n	8004b92 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d031      	beq.n	8004b72 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d110      	bne.n	8004b3e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2208      	movs	r2, #8
 8004b22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f8ff 	bl	8004d28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2208      	movs	r2, #8
 8004b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e029      	b.n	8004b92 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b4c:	d111      	bne.n	8004b72 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 f8e5 	bl	8004d28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e00f      	b.n	8004b92 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69da      	ldr	r2, [r3, #28]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	bf0c      	ite	eq
 8004b82:	2301      	moveq	r3, #1
 8004b84:	2300      	movne	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	461a      	mov	r2, r3
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d0a6      	beq.n	8004ade <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
	...

08004b9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b097      	sub	sp, #92	; 0x5c
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	88fa      	ldrh	r2, [r7, #6]
 8004bb4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	88fa      	ldrh	r2, [r7, #6]
 8004bbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bce:	d10e      	bne.n	8004bee <UART_Start_Receive_IT+0x52>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d105      	bne.n	8004be4 <UART_Start_Receive_IT+0x48>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004bde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004be2:	e02d      	b.n	8004c40 <UART_Start_Receive_IT+0xa4>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	22ff      	movs	r2, #255	; 0xff
 8004be8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bec:	e028      	b.n	8004c40 <UART_Start_Receive_IT+0xa4>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10d      	bne.n	8004c12 <UART_Start_Receive_IT+0x76>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d104      	bne.n	8004c08 <UART_Start_Receive_IT+0x6c>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	22ff      	movs	r2, #255	; 0xff
 8004c02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c06:	e01b      	b.n	8004c40 <UART_Start_Receive_IT+0xa4>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	227f      	movs	r2, #127	; 0x7f
 8004c0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c10:	e016      	b.n	8004c40 <UART_Start_Receive_IT+0xa4>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c1a:	d10d      	bne.n	8004c38 <UART_Start_Receive_IT+0x9c>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d104      	bne.n	8004c2e <UART_Start_Receive_IT+0x92>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	227f      	movs	r2, #127	; 0x7f
 8004c28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c2c:	e008      	b.n	8004c40 <UART_Start_Receive_IT+0xa4>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	223f      	movs	r2, #63	; 0x3f
 8004c32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c36:	e003      	b.n	8004c40 <UART_Start_Receive_IT+0xa4>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2222      	movs	r2, #34	; 0x22
 8004c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3308      	adds	r3, #8
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c62:	f043 0301 	orr.w	r3, r3, #1
 8004c66:	657b      	str	r3, [r7, #84]	; 0x54
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c70:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c72:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e5      	bne.n	8004c50 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8c:	d107      	bne.n	8004c9e <UART_Start_Receive_IT+0x102>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d103      	bne.n	8004c9e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4a21      	ldr	r2, [pc, #132]	; (8004d20 <UART_Start_Receive_IT+0x184>)
 8004c9a:	669a      	str	r2, [r3, #104]	; 0x68
 8004c9c:	e002      	b.n	8004ca4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4a20      	ldr	r2, [pc, #128]	; (8004d24 <UART_Start_Receive_IT+0x188>)
 8004ca2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d019      	beq.n	8004ce0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb4:	e853 3f00 	ldrex	r3, [r3]
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cca:	637b      	str	r3, [r7, #52]	; 0x34
 8004ccc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cd2:	e841 2300 	strex	r3, r2, [r1]
 8004cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e6      	bne.n	8004cac <UART_Start_Receive_IT+0x110>
 8004cde:	e018      	b.n	8004d12 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	e853 3f00 	ldrex	r3, [r3]
 8004cec:	613b      	str	r3, [r7, #16]
   return(result);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f043 0320 	orr.w	r3, r3, #32
 8004cf4:	653b      	str	r3, [r7, #80]	; 0x50
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cfe:	623b      	str	r3, [r7, #32]
 8004d00:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d02:	69f9      	ldr	r1, [r7, #28]
 8004d04:	6a3a      	ldr	r2, [r7, #32]
 8004d06:	e841 2300 	strex	r3, r2, [r1]
 8004d0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1e6      	bne.n	8004ce0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	375c      	adds	r7, #92	; 0x5c
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	0800502d 	.word	0x0800502d
 8004d24:	08004e71 	.word	0x08004e71

08004d28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b095      	sub	sp, #84	; 0x54
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8004d50:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e6      	bne.n	8004d30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3308      	adds	r3, #8
 8004d68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	f023 0301 	bic.w	r3, r3, #1
 8004d78:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	3308      	adds	r3, #8
 8004d80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e5      	bne.n	8004d62 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d118      	bne.n	8004dd0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	e853 3f00 	ldrex	r3, [r3]
 8004daa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f023 0310 	bic.w	r3, r3, #16
 8004db2:	647b      	str	r3, [r7, #68]	; 0x44
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dbc:	61bb      	str	r3, [r7, #24]
 8004dbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc0:	6979      	ldr	r1, [r7, #20]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	e841 2300 	strex	r3, r2, [r1]
 8004dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1e6      	bne.n	8004d9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004de4:	bf00      	nop
 8004de6:	3754      	adds	r7, #84	; 0x54
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f7ff fa44 	bl	800429c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e14:	bf00      	nop
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
 8004e30:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e38:	61fb      	str	r3, [r7, #28]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	6979      	ldr	r1, [r7, #20]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e6      	bne.n	8004e24 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff fa10 	bl	8004288 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e68:	bf00      	nop
 8004e6a:	3720      	adds	r7, #32
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b09c      	sub	sp, #112	; 0x70
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e7e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e88:	2b22      	cmp	r3, #34	; 0x22
 8004e8a:	f040 80be 	bne.w	800500a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e98:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e9c:	b2d9      	uxtb	r1, r3
 8004e9e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea8:	400a      	ands	r2, r1
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f040 80a3 	bne.w	800501e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004eec:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ef6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ef8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004efc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e6      	bne.n	8004ed8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1c:	f023 0301 	bic.w	r3, r3, #1
 8004f20:	667b      	str	r3, [r7, #100]	; 0x64
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3308      	adds	r3, #8
 8004f28:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f2a:	647a      	str	r2, [r7, #68]	; 0x44
 8004f2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e5      	bne.n	8004f0a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a34      	ldr	r2, [pc, #208]	; (8005028 <UART_RxISR_8BIT+0x1b8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d01f      	beq.n	8004f9c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d018      	beq.n	8004f9c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	623b      	str	r3, [r7, #32]
   return(result);
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f88:	633b      	str	r3, [r7, #48]	; 0x30
 8004f8a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e6      	bne.n	8004f6a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d12e      	bne.n	8005002 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	e853 3f00 	ldrex	r3, [r3]
 8004fb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0310 	bic.w	r3, r3, #16
 8004fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	69b9      	ldr	r1, [r7, #24]
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	e841 2300 	strex	r3, r2, [r1]
 8004fd4:	617b      	str	r3, [r7, #20]
   return(result);
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1e6      	bne.n	8004faa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b10      	cmp	r3, #16
 8004fe8:	d103      	bne.n	8004ff2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2210      	movs	r2, #16
 8004ff0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7ff f958 	bl	80042b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005000:	e00d      	b.n	800501e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fb fac8 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 8005008:	e009      	b.n	800501e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	8b1b      	ldrh	r3, [r3, #24]
 8005010:	b29a      	uxth	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0208 	orr.w	r2, r2, #8
 800501a:	b292      	uxth	r2, r2
 800501c:	831a      	strh	r2, [r3, #24]
}
 800501e:	bf00      	nop
 8005020:	3770      	adds	r7, #112	; 0x70
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40008000 	.word	0x40008000

0800502c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b09c      	sub	sp, #112	; 0x70
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800503a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005044:	2b22      	cmp	r3, #34	; 0x22
 8005046:	f040 80be 	bne.w	80051c6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005050:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005058:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800505a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800505e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005062:	4013      	ands	r3, r2
 8005064:	b29a      	uxth	r2, r3
 8005066:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005068:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506e:	1c9a      	adds	r2, r3, #2
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800507a:	b29b      	uxth	r3, r3
 800507c:	3b01      	subs	r3, #1
 800507e:	b29a      	uxth	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	f040 80a3 	bne.w	80051da <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80050a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050a8:	667b      	str	r3, [r7, #100]	; 0x64
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050b2:	657b      	str	r3, [r7, #84]	; 0x54
 80050b4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1e6      	bne.n	8005094 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3308      	adds	r3, #8
 80050cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	f023 0301 	bic.w	r3, r3, #1
 80050dc:	663b      	str	r3, [r7, #96]	; 0x60
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3308      	adds	r3, #8
 80050e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050e6:	643a      	str	r2, [r7, #64]	; 0x40
 80050e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1e5      	bne.n	80050c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a34      	ldr	r2, [pc, #208]	; (80051e4 <UART_RxISR_16BIT+0x1b8>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d01f      	beq.n	8005158 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d018      	beq.n	8005158 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	e853 3f00 	ldrex	r3, [r3]
 8005132:	61fb      	str	r3, [r7, #28]
   return(result);
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800513a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005146:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005148:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800514a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800514c:	e841 2300 	strex	r3, r2, [r1]
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e6      	bne.n	8005126 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800515c:	2b01      	cmp	r3, #1
 800515e:	d12e      	bne.n	80051be <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	60bb      	str	r3, [r7, #8]
   return(result);
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f023 0310 	bic.w	r3, r3, #16
 800517a:	65bb      	str	r3, [r7, #88]	; 0x58
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005184:	61bb      	str	r3, [r7, #24]
 8005186:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005188:	6979      	ldr	r1, [r7, #20]
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	e841 2300 	strex	r3, r2, [r1]
 8005190:	613b      	str	r3, [r7, #16]
   return(result);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1e6      	bne.n	8005166 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b10      	cmp	r3, #16
 80051a4:	d103      	bne.n	80051ae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2210      	movs	r2, #16
 80051ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051b4:	4619      	mov	r1, r3
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7ff f87a 	bl	80042b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051bc:	e00d      	b.n	80051da <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fb f9ea 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 80051c4:	e009      	b.n	80051da <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	8b1b      	ldrh	r3, [r3, #24]
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0208 	orr.w	r2, r2, #8
 80051d6:	b292      	uxth	r2, r2
 80051d8:	831a      	strh	r2, [r3, #24]
}
 80051da:	bf00      	nop
 80051dc:	3770      	adds	r7, #112	; 0x70
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40008000 	.word	0x40008000

080051e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8005200:	bf00      	nop
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
	...

0800520c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af04      	add	r7, sp, #16
 8005212:	4603      	mov	r3, r0
 8005214:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005216:	f04f 33ff 	mov.w	r3, #4294967295
 800521a:	9302      	str	r3, [sp, #8]
 800521c:	2301      	movs	r3, #1
 800521e:	9301      	str	r3, [sp, #4]
 8005220:	1dfb      	adds	r3, r7, #7
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	2301      	movs	r3, #1
 8005226:	2200      	movs	r2, #0
 8005228:	2178      	movs	r1, #120	; 0x78
 800522a:	4803      	ldr	r0, [pc, #12]	; (8005238 <ssd1306_WriteCommand+0x2c>)
 800522c:	f7fc fcee 	bl	8001c0c <HAL_I2C_Mem_Write>
}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	20000090 	.word	0x20000090

0800523c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af04      	add	r7, sp, #16
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	b29b      	uxth	r3, r3
 800524a:	f04f 32ff 	mov.w	r2, #4294967295
 800524e:	9202      	str	r2, [sp, #8]
 8005250:	9301      	str	r3, [sp, #4]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	2301      	movs	r3, #1
 8005258:	2240      	movs	r2, #64	; 0x40
 800525a:	2178      	movs	r1, #120	; 0x78
 800525c:	4803      	ldr	r0, [pc, #12]	; (800526c <ssd1306_WriteData+0x30>)
 800525e:	f7fc fcd5 	bl	8001c0c <HAL_I2C_Mem_Write>
}
 8005262:	bf00      	nop
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20000090 	.word	0x20000090

08005270 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8005274:	f7ff ffc2 	bl	80051fc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005278:	2064      	movs	r0, #100	; 0x64
 800527a:	f7fc f89d 	bl	80013b8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800527e:	2000      	movs	r0, #0
 8005280:	f000 f9da 	bl	8005638 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8005284:	2020      	movs	r0, #32
 8005286:	f7ff ffc1 	bl	800520c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800528a:	2000      	movs	r0, #0
 800528c:	f7ff ffbe 	bl	800520c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005290:	20b0      	movs	r0, #176	; 0xb0
 8005292:	f7ff ffbb 	bl	800520c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005296:	20c8      	movs	r0, #200	; 0xc8
 8005298:	f7ff ffb8 	bl	800520c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800529c:	2000      	movs	r0, #0
 800529e:	f7ff ffb5 	bl	800520c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80052a2:	2010      	movs	r0, #16
 80052a4:	f7ff ffb2 	bl	800520c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80052a8:	2040      	movs	r0, #64	; 0x40
 80052aa:	f7ff ffaf 	bl	800520c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80052ae:	20ff      	movs	r0, #255	; 0xff
 80052b0:	f000 f9ae 	bl	8005610 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80052b4:	20a1      	movs	r0, #161	; 0xa1
 80052b6:	f7ff ffa9 	bl	800520c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80052ba:	20a6      	movs	r0, #166	; 0xa6
 80052bc:	f7ff ffa6 	bl	800520c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80052c0:	20a8      	movs	r0, #168	; 0xa8
 80052c2:	f7ff ffa3 	bl	800520c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80052c6:	203f      	movs	r0, #63	; 0x3f
 80052c8:	f7ff ffa0 	bl	800520c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80052cc:	20a4      	movs	r0, #164	; 0xa4
 80052ce:	f7ff ff9d 	bl	800520c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80052d2:	20d3      	movs	r0, #211	; 0xd3
 80052d4:	f7ff ff9a 	bl	800520c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80052d8:	2000      	movs	r0, #0
 80052da:	f7ff ff97 	bl	800520c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80052de:	20d5      	movs	r0, #213	; 0xd5
 80052e0:	f7ff ff94 	bl	800520c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80052e4:	20f0      	movs	r0, #240	; 0xf0
 80052e6:	f7ff ff91 	bl	800520c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80052ea:	20d9      	movs	r0, #217	; 0xd9
 80052ec:	f7ff ff8e 	bl	800520c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80052f0:	2022      	movs	r0, #34	; 0x22
 80052f2:	f7ff ff8b 	bl	800520c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80052f6:	20da      	movs	r0, #218	; 0xda
 80052f8:	f7ff ff88 	bl	800520c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80052fc:	2012      	movs	r0, #18
 80052fe:	f7ff ff85 	bl	800520c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8005302:	20db      	movs	r0, #219	; 0xdb
 8005304:	f7ff ff82 	bl	800520c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005308:	2020      	movs	r0, #32
 800530a:	f7ff ff7f 	bl	800520c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800530e:	208d      	movs	r0, #141	; 0x8d
 8005310:	f7ff ff7c 	bl	800520c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8005314:	2014      	movs	r0, #20
 8005316:	f7ff ff79 	bl	800520c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800531a:	2001      	movs	r0, #1
 800531c:	f000 f98c 	bl	8005638 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005320:	2000      	movs	r0, #0
 8005322:	f000 f80f 	bl	8005344 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8005326:	f000 f831 	bl	800538c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800532a:	4b05      	ldr	r3, [pc, #20]	; (8005340 <ssd1306_Init+0xd0>)
 800532c:	2200      	movs	r2, #0
 800532e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005330:	4b03      	ldr	r3, [pc, #12]	; (8005340 <ssd1306_Init+0xd0>)
 8005332:	2200      	movs	r2, #0
 8005334:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8005336:	4b02      	ldr	r3, [pc, #8]	; (8005340 <ssd1306_Init+0xd0>)
 8005338:	2201      	movs	r2, #1
 800533a:	711a      	strb	r2, [r3, #4]
}
 800533c:	bf00      	nop
 800533e:	bd80      	pop	{r7, pc}
 8005340:	200005a4 	.word	0x200005a4

08005344 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800534e:	2300      	movs	r3, #0
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	e00d      	b.n	8005370 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8005354:	79fb      	ldrb	r3, [r7, #7]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <ssd1306_Fill+0x1a>
 800535a:	2100      	movs	r1, #0
 800535c:	e000      	b.n	8005360 <ssd1306_Fill+0x1c>
 800535e:	21ff      	movs	r1, #255	; 0xff
 8005360:	4a09      	ldr	r2, [pc, #36]	; (8005388 <ssd1306_Fill+0x44>)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4413      	add	r3, r2
 8005366:	460a      	mov	r2, r1
 8005368:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3301      	adds	r3, #1
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005376:	d3ed      	bcc.n	8005354 <ssd1306_Fill+0x10>
    }
}
 8005378:	bf00      	nop
 800537a:	bf00      	nop
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	200001a4 	.word	0x200001a4

0800538c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005392:	2300      	movs	r3, #0
 8005394:	71fb      	strb	r3, [r7, #7]
 8005396:	e016      	b.n	80053c6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	3b50      	subs	r3, #80	; 0x50
 800539c:	b2db      	uxtb	r3, r3
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff ff34 	bl	800520c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80053a4:	2000      	movs	r0, #0
 80053a6:	f7ff ff31 	bl	800520c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80053aa:	2010      	movs	r0, #16
 80053ac:	f7ff ff2e 	bl	800520c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	01db      	lsls	r3, r3, #7
 80053b4:	4a08      	ldr	r2, [pc, #32]	; (80053d8 <ssd1306_UpdateScreen+0x4c>)
 80053b6:	4413      	add	r3, r2
 80053b8:	2180      	movs	r1, #128	; 0x80
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7ff ff3e 	bl	800523c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80053c0:	79fb      	ldrb	r3, [r7, #7]
 80053c2:	3301      	adds	r3, #1
 80053c4:	71fb      	strb	r3, [r7, #7]
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	2b07      	cmp	r3, #7
 80053ca:	d9e5      	bls.n	8005398 <ssd1306_UpdateScreen+0xc>
    }
}
 80053cc:	bf00      	nop
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	200001a4 	.word	0x200001a4

080053dc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	71fb      	strb	r3, [r7, #7]
 80053e6:	460b      	mov	r3, r1
 80053e8:	71bb      	strb	r3, [r7, #6]
 80053ea:	4613      	mov	r3, r2
 80053ec:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80053ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	db3d      	blt.n	8005472 <ssd1306_DrawPixel+0x96>
 80053f6:	79bb      	ldrb	r3, [r7, #6]
 80053f8:	2b3f      	cmp	r3, #63	; 0x3f
 80053fa:	d83a      	bhi.n	8005472 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80053fc:	797b      	ldrb	r3, [r7, #5]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d11a      	bne.n	8005438 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005402:	79fa      	ldrb	r2, [r7, #7]
 8005404:	79bb      	ldrb	r3, [r7, #6]
 8005406:	08db      	lsrs	r3, r3, #3
 8005408:	b2d8      	uxtb	r0, r3
 800540a:	4603      	mov	r3, r0
 800540c:	01db      	lsls	r3, r3, #7
 800540e:	4413      	add	r3, r2
 8005410:	4a1b      	ldr	r2, [pc, #108]	; (8005480 <ssd1306_DrawPixel+0xa4>)
 8005412:	5cd3      	ldrb	r3, [r2, r3]
 8005414:	b25a      	sxtb	r2, r3
 8005416:	79bb      	ldrb	r3, [r7, #6]
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	2101      	movs	r1, #1
 800541e:	fa01 f303 	lsl.w	r3, r1, r3
 8005422:	b25b      	sxtb	r3, r3
 8005424:	4313      	orrs	r3, r2
 8005426:	b259      	sxtb	r1, r3
 8005428:	79fa      	ldrb	r2, [r7, #7]
 800542a:	4603      	mov	r3, r0
 800542c:	01db      	lsls	r3, r3, #7
 800542e:	4413      	add	r3, r2
 8005430:	b2c9      	uxtb	r1, r1
 8005432:	4a13      	ldr	r2, [pc, #76]	; (8005480 <ssd1306_DrawPixel+0xa4>)
 8005434:	54d1      	strb	r1, [r2, r3]
 8005436:	e01d      	b.n	8005474 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005438:	79fa      	ldrb	r2, [r7, #7]
 800543a:	79bb      	ldrb	r3, [r7, #6]
 800543c:	08db      	lsrs	r3, r3, #3
 800543e:	b2d8      	uxtb	r0, r3
 8005440:	4603      	mov	r3, r0
 8005442:	01db      	lsls	r3, r3, #7
 8005444:	4413      	add	r3, r2
 8005446:	4a0e      	ldr	r2, [pc, #56]	; (8005480 <ssd1306_DrawPixel+0xa4>)
 8005448:	5cd3      	ldrb	r3, [r2, r3]
 800544a:	b25a      	sxtb	r2, r3
 800544c:	79bb      	ldrb	r3, [r7, #6]
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	2101      	movs	r1, #1
 8005454:	fa01 f303 	lsl.w	r3, r1, r3
 8005458:	b25b      	sxtb	r3, r3
 800545a:	43db      	mvns	r3, r3
 800545c:	b25b      	sxtb	r3, r3
 800545e:	4013      	ands	r3, r2
 8005460:	b259      	sxtb	r1, r3
 8005462:	79fa      	ldrb	r2, [r7, #7]
 8005464:	4603      	mov	r3, r0
 8005466:	01db      	lsls	r3, r3, #7
 8005468:	4413      	add	r3, r2
 800546a:	b2c9      	uxtb	r1, r1
 800546c:	4a04      	ldr	r2, [pc, #16]	; (8005480 <ssd1306_DrawPixel+0xa4>)
 800546e:	54d1      	strb	r1, [r2, r3]
 8005470:	e000      	b.n	8005474 <ssd1306_DrawPixel+0x98>
        return;
 8005472:	bf00      	nop
    }
}
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	200001a4 	.word	0x200001a4

08005484 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8005484:	b590      	push	{r4, r7, lr}
 8005486:	b089      	sub	sp, #36	; 0x24
 8005488:	af00      	add	r7, sp, #0
 800548a:	4604      	mov	r4, r0
 800548c:	1d38      	adds	r0, r7, #4
 800548e:	e880 0006 	stmia.w	r0, {r1, r2}
 8005492:	461a      	mov	r2, r3
 8005494:	4623      	mov	r3, r4
 8005496:	73fb      	strb	r3, [r7, #15]
 8005498:	4613      	mov	r3, r2
 800549a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	2b1f      	cmp	r3, #31
 80054a0:	d902      	bls.n	80054a8 <ssd1306_WriteChar+0x24>
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
 80054a4:	2b7e      	cmp	r3, #126	; 0x7e
 80054a6:	d901      	bls.n	80054ac <ssd1306_WriteChar+0x28>
        return 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	e06d      	b.n	8005588 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80054ac:	4b38      	ldr	r3, [pc, #224]	; (8005590 <ssd1306_WriteChar+0x10c>)
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	461a      	mov	r2, r3
 80054b2:	793b      	ldrb	r3, [r7, #4]
 80054b4:	4413      	add	r3, r2
 80054b6:	2b80      	cmp	r3, #128	; 0x80
 80054b8:	dc06      	bgt.n	80054c8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80054ba:	4b35      	ldr	r3, [pc, #212]	; (8005590 <ssd1306_WriteChar+0x10c>)
 80054bc:	885b      	ldrh	r3, [r3, #2]
 80054be:	461a      	mov	r2, r3
 80054c0:	797b      	ldrb	r3, [r7, #5]
 80054c2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80054c4:	2b40      	cmp	r3, #64	; 0x40
 80054c6:	dd01      	ble.n	80054cc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80054c8:	2300      	movs	r3, #0
 80054ca:	e05d      	b.n	8005588 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80054cc:	2300      	movs	r3, #0
 80054ce:	61fb      	str	r3, [r7, #28]
 80054d0:	e04c      	b.n	800556c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	3b20      	subs	r3, #32
 80054d8:	7979      	ldrb	r1, [r7, #5]
 80054da:	fb01 f303 	mul.w	r3, r1, r3
 80054de:	4619      	mov	r1, r3
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	440b      	add	r3, r1
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	4413      	add	r3, r2
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80054ec:	2300      	movs	r3, #0
 80054ee:	61bb      	str	r3, [r7, #24]
 80054f0:	e034      	b.n	800555c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d012      	beq.n	8005528 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005502:	4b23      	ldr	r3, [pc, #140]	; (8005590 <ssd1306_WriteChar+0x10c>)
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	b2da      	uxtb	r2, r3
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	4413      	add	r3, r2
 800550e:	b2d8      	uxtb	r0, r3
 8005510:	4b1f      	ldr	r3, [pc, #124]	; (8005590 <ssd1306_WriteChar+0x10c>)
 8005512:	885b      	ldrh	r3, [r3, #2]
 8005514:	b2da      	uxtb	r2, r3
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	b2db      	uxtb	r3, r3
 800551a:	4413      	add	r3, r2
 800551c:	b2db      	uxtb	r3, r3
 800551e:	7bba      	ldrb	r2, [r7, #14]
 8005520:	4619      	mov	r1, r3
 8005522:	f7ff ff5b 	bl	80053dc <ssd1306_DrawPixel>
 8005526:	e016      	b.n	8005556 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005528:	4b19      	ldr	r3, [pc, #100]	; (8005590 <ssd1306_WriteChar+0x10c>)
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b2da      	uxtb	r2, r3
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	b2db      	uxtb	r3, r3
 8005532:	4413      	add	r3, r2
 8005534:	b2d8      	uxtb	r0, r3
 8005536:	4b16      	ldr	r3, [pc, #88]	; (8005590 <ssd1306_WriteChar+0x10c>)
 8005538:	885b      	ldrh	r3, [r3, #2]
 800553a:	b2da      	uxtb	r2, r3
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	b2db      	uxtb	r3, r3
 8005540:	4413      	add	r3, r2
 8005542:	b2d9      	uxtb	r1, r3
 8005544:	7bbb      	ldrb	r3, [r7, #14]
 8005546:	2b00      	cmp	r3, #0
 8005548:	bf0c      	ite	eq
 800554a:	2301      	moveq	r3, #1
 800554c:	2300      	movne	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	f7ff ff43 	bl	80053dc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	3301      	adds	r3, #1
 800555a:	61bb      	str	r3, [r7, #24]
 800555c:	793b      	ldrb	r3, [r7, #4]
 800555e:	461a      	mov	r2, r3
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	4293      	cmp	r3, r2
 8005564:	d3c5      	bcc.n	80054f2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	3301      	adds	r3, #1
 800556a:	61fb      	str	r3, [r7, #28]
 800556c:	797b      	ldrb	r3, [r7, #5]
 800556e:	461a      	mov	r2, r3
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	4293      	cmp	r3, r2
 8005574:	d3ad      	bcc.n	80054d2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8005576:	4b06      	ldr	r3, [pc, #24]	; (8005590 <ssd1306_WriteChar+0x10c>)
 8005578:	881a      	ldrh	r2, [r3, #0]
 800557a:	793b      	ldrb	r3, [r7, #4]
 800557c:	b29b      	uxth	r3, r3
 800557e:	4413      	add	r3, r2
 8005580:	b29a      	uxth	r2, r3
 8005582:	4b03      	ldr	r3, [pc, #12]	; (8005590 <ssd1306_WriteChar+0x10c>)
 8005584:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3724      	adds	r7, #36	; 0x24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd90      	pop	{r4, r7, pc}
 8005590:	200005a4 	.word	0x200005a4

08005594 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	1d38      	adds	r0, r7, #4
 800559e:	e880 0006 	stmia.w	r0, {r1, r2}
 80055a2:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80055a4:	e012      	b.n	80055cc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	7818      	ldrb	r0, [r3, #0]
 80055aa:	78fb      	ldrb	r3, [r7, #3]
 80055ac:	1d3a      	adds	r2, r7, #4
 80055ae:	ca06      	ldmia	r2, {r1, r2}
 80055b0:	f7ff ff68 	bl	8005484 <ssd1306_WriteChar>
 80055b4:	4603      	mov	r3, r0
 80055b6:	461a      	mov	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d002      	beq.n	80055c6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	e008      	b.n	80055d8 <ssd1306_WriteString+0x44>
        }
        str++;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	3301      	adds	r3, #1
 80055ca:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e8      	bne.n	80055a6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	781b      	ldrb	r3, [r3, #0]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	460a      	mov	r2, r1
 80055ea:	71fb      	strb	r3, [r7, #7]
 80055ec:	4613      	mov	r3, r2
 80055ee:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	4b05      	ldr	r3, [pc, #20]	; (800560c <ssd1306_SetCursor+0x2c>)
 80055f6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80055f8:	79bb      	ldrb	r3, [r7, #6]
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	4b03      	ldr	r3, [pc, #12]	; (800560c <ssd1306_SetCursor+0x2c>)
 80055fe:	805a      	strh	r2, [r3, #2]
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	200005a4 	.word	0x200005a4

08005610 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800561a:	2381      	movs	r3, #129	; 0x81
 800561c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff fdf3 	bl	800520c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff fdef 	bl	800520c <ssd1306_WriteCommand>
}
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	4603      	mov	r3, r0
 8005640:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d005      	beq.n	8005654 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005648:	23af      	movs	r3, #175	; 0xaf
 800564a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800564c:	4b08      	ldr	r3, [pc, #32]	; (8005670 <ssd1306_SetDisplayOn+0x38>)
 800564e:	2201      	movs	r2, #1
 8005650:	715a      	strb	r2, [r3, #5]
 8005652:	e004      	b.n	800565e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005654:	23ae      	movs	r3, #174	; 0xae
 8005656:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005658:	4b05      	ldr	r3, [pc, #20]	; (8005670 <ssd1306_SetDisplayOn+0x38>)
 800565a:	2200      	movs	r2, #0
 800565c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800565e:	7bfb      	ldrb	r3, [r7, #15]
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff fdd3 	bl	800520c <ssd1306_WriteCommand>
}
 8005666:	bf00      	nop
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	200005a4 	.word	0x200005a4

08005674 <std>:
 8005674:	2300      	movs	r3, #0
 8005676:	b510      	push	{r4, lr}
 8005678:	4604      	mov	r4, r0
 800567a:	e9c0 3300 	strd	r3, r3, [r0]
 800567e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005682:	6083      	str	r3, [r0, #8]
 8005684:	8181      	strh	r1, [r0, #12]
 8005686:	6643      	str	r3, [r0, #100]	; 0x64
 8005688:	81c2      	strh	r2, [r0, #14]
 800568a:	6183      	str	r3, [r0, #24]
 800568c:	4619      	mov	r1, r3
 800568e:	2208      	movs	r2, #8
 8005690:	305c      	adds	r0, #92	; 0x5c
 8005692:	f000 f9e5 	bl	8005a60 <memset>
 8005696:	4b05      	ldr	r3, [pc, #20]	; (80056ac <std+0x38>)
 8005698:	6263      	str	r3, [r4, #36]	; 0x24
 800569a:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <std+0x3c>)
 800569c:	62a3      	str	r3, [r4, #40]	; 0x28
 800569e:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <std+0x40>)
 80056a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056a2:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <std+0x44>)
 80056a4:	6224      	str	r4, [r4, #32]
 80056a6:	6323      	str	r3, [r4, #48]	; 0x30
 80056a8:	bd10      	pop	{r4, pc}
 80056aa:	bf00      	nop
 80056ac:	080058b1 	.word	0x080058b1
 80056b0:	080058d3 	.word	0x080058d3
 80056b4:	0800590b 	.word	0x0800590b
 80056b8:	0800592f 	.word	0x0800592f

080056bc <stdio_exit_handler>:
 80056bc:	4a02      	ldr	r2, [pc, #8]	; (80056c8 <stdio_exit_handler+0xc>)
 80056be:	4903      	ldr	r1, [pc, #12]	; (80056cc <stdio_exit_handler+0x10>)
 80056c0:	4803      	ldr	r0, [pc, #12]	; (80056d0 <stdio_exit_handler+0x14>)
 80056c2:	f000 b869 	b.w	8005798 <_fwalk_sglue>
 80056c6:	bf00      	nop
 80056c8:	20000018 	.word	0x20000018
 80056cc:	080063f9 	.word	0x080063f9
 80056d0:	20000024 	.word	0x20000024

080056d4 <cleanup_stdio>:
 80056d4:	6841      	ldr	r1, [r0, #4]
 80056d6:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <cleanup_stdio+0x34>)
 80056d8:	4299      	cmp	r1, r3
 80056da:	b510      	push	{r4, lr}
 80056dc:	4604      	mov	r4, r0
 80056de:	d001      	beq.n	80056e4 <cleanup_stdio+0x10>
 80056e0:	f000 fe8a 	bl	80063f8 <_fflush_r>
 80056e4:	68a1      	ldr	r1, [r4, #8]
 80056e6:	4b09      	ldr	r3, [pc, #36]	; (800570c <cleanup_stdio+0x38>)
 80056e8:	4299      	cmp	r1, r3
 80056ea:	d002      	beq.n	80056f2 <cleanup_stdio+0x1e>
 80056ec:	4620      	mov	r0, r4
 80056ee:	f000 fe83 	bl	80063f8 <_fflush_r>
 80056f2:	68e1      	ldr	r1, [r4, #12]
 80056f4:	4b06      	ldr	r3, [pc, #24]	; (8005710 <cleanup_stdio+0x3c>)
 80056f6:	4299      	cmp	r1, r3
 80056f8:	d004      	beq.n	8005704 <cleanup_stdio+0x30>
 80056fa:	4620      	mov	r0, r4
 80056fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005700:	f000 be7a 	b.w	80063f8 <_fflush_r>
 8005704:	bd10      	pop	{r4, pc}
 8005706:	bf00      	nop
 8005708:	200005ac 	.word	0x200005ac
 800570c:	20000614 	.word	0x20000614
 8005710:	2000067c 	.word	0x2000067c

08005714 <global_stdio_init.part.0>:
 8005714:	b510      	push	{r4, lr}
 8005716:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <global_stdio_init.part.0+0x30>)
 8005718:	4c0b      	ldr	r4, [pc, #44]	; (8005748 <global_stdio_init.part.0+0x34>)
 800571a:	4a0c      	ldr	r2, [pc, #48]	; (800574c <global_stdio_init.part.0+0x38>)
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	4620      	mov	r0, r4
 8005720:	2200      	movs	r2, #0
 8005722:	2104      	movs	r1, #4
 8005724:	f7ff ffa6 	bl	8005674 <std>
 8005728:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800572c:	2201      	movs	r2, #1
 800572e:	2109      	movs	r1, #9
 8005730:	f7ff ffa0 	bl	8005674 <std>
 8005734:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005738:	2202      	movs	r2, #2
 800573a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800573e:	2112      	movs	r1, #18
 8005740:	f7ff bf98 	b.w	8005674 <std>
 8005744:	200006e4 	.word	0x200006e4
 8005748:	200005ac 	.word	0x200005ac
 800574c:	080056bd 	.word	0x080056bd

08005750 <__sfp_lock_acquire>:
 8005750:	4801      	ldr	r0, [pc, #4]	; (8005758 <__sfp_lock_acquire+0x8>)
 8005752:	f000 b9fd 	b.w	8005b50 <__retarget_lock_acquire_recursive>
 8005756:	bf00      	nop
 8005758:	200006ed 	.word	0x200006ed

0800575c <__sfp_lock_release>:
 800575c:	4801      	ldr	r0, [pc, #4]	; (8005764 <__sfp_lock_release+0x8>)
 800575e:	f000 b9f8 	b.w	8005b52 <__retarget_lock_release_recursive>
 8005762:	bf00      	nop
 8005764:	200006ed 	.word	0x200006ed

08005768 <__sinit>:
 8005768:	b510      	push	{r4, lr}
 800576a:	4604      	mov	r4, r0
 800576c:	f7ff fff0 	bl	8005750 <__sfp_lock_acquire>
 8005770:	6a23      	ldr	r3, [r4, #32]
 8005772:	b11b      	cbz	r3, 800577c <__sinit+0x14>
 8005774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005778:	f7ff bff0 	b.w	800575c <__sfp_lock_release>
 800577c:	4b04      	ldr	r3, [pc, #16]	; (8005790 <__sinit+0x28>)
 800577e:	6223      	str	r3, [r4, #32]
 8005780:	4b04      	ldr	r3, [pc, #16]	; (8005794 <__sinit+0x2c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f5      	bne.n	8005774 <__sinit+0xc>
 8005788:	f7ff ffc4 	bl	8005714 <global_stdio_init.part.0>
 800578c:	e7f2      	b.n	8005774 <__sinit+0xc>
 800578e:	bf00      	nop
 8005790:	080056d5 	.word	0x080056d5
 8005794:	200006e4 	.word	0x200006e4

08005798 <_fwalk_sglue>:
 8005798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800579c:	4607      	mov	r7, r0
 800579e:	4688      	mov	r8, r1
 80057a0:	4614      	mov	r4, r2
 80057a2:	2600      	movs	r6, #0
 80057a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057a8:	f1b9 0901 	subs.w	r9, r9, #1
 80057ac:	d505      	bpl.n	80057ba <_fwalk_sglue+0x22>
 80057ae:	6824      	ldr	r4, [r4, #0]
 80057b0:	2c00      	cmp	r4, #0
 80057b2:	d1f7      	bne.n	80057a4 <_fwalk_sglue+0xc>
 80057b4:	4630      	mov	r0, r6
 80057b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ba:	89ab      	ldrh	r3, [r5, #12]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d907      	bls.n	80057d0 <_fwalk_sglue+0x38>
 80057c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057c4:	3301      	adds	r3, #1
 80057c6:	d003      	beq.n	80057d0 <_fwalk_sglue+0x38>
 80057c8:	4629      	mov	r1, r5
 80057ca:	4638      	mov	r0, r7
 80057cc:	47c0      	blx	r8
 80057ce:	4306      	orrs	r6, r0
 80057d0:	3568      	adds	r5, #104	; 0x68
 80057d2:	e7e9      	b.n	80057a8 <_fwalk_sglue+0x10>

080057d4 <iprintf>:
 80057d4:	b40f      	push	{r0, r1, r2, r3}
 80057d6:	b507      	push	{r0, r1, r2, lr}
 80057d8:	4906      	ldr	r1, [pc, #24]	; (80057f4 <iprintf+0x20>)
 80057da:	ab04      	add	r3, sp, #16
 80057dc:	6808      	ldr	r0, [r1, #0]
 80057de:	f853 2b04 	ldr.w	r2, [r3], #4
 80057e2:	6881      	ldr	r1, [r0, #8]
 80057e4:	9301      	str	r3, [sp, #4]
 80057e6:	f000 fad7 	bl	8005d98 <_vfiprintf_r>
 80057ea:	b003      	add	sp, #12
 80057ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80057f0:	b004      	add	sp, #16
 80057f2:	4770      	bx	lr
 80057f4:	20000070 	.word	0x20000070

080057f8 <_puts_r>:
 80057f8:	6a03      	ldr	r3, [r0, #32]
 80057fa:	b570      	push	{r4, r5, r6, lr}
 80057fc:	6884      	ldr	r4, [r0, #8]
 80057fe:	4605      	mov	r5, r0
 8005800:	460e      	mov	r6, r1
 8005802:	b90b      	cbnz	r3, 8005808 <_puts_r+0x10>
 8005804:	f7ff ffb0 	bl	8005768 <__sinit>
 8005808:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800580a:	07db      	lsls	r3, r3, #31
 800580c:	d405      	bmi.n	800581a <_puts_r+0x22>
 800580e:	89a3      	ldrh	r3, [r4, #12]
 8005810:	0598      	lsls	r0, r3, #22
 8005812:	d402      	bmi.n	800581a <_puts_r+0x22>
 8005814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005816:	f000 f99b 	bl	8005b50 <__retarget_lock_acquire_recursive>
 800581a:	89a3      	ldrh	r3, [r4, #12]
 800581c:	0719      	lsls	r1, r3, #28
 800581e:	d513      	bpl.n	8005848 <_puts_r+0x50>
 8005820:	6923      	ldr	r3, [r4, #16]
 8005822:	b18b      	cbz	r3, 8005848 <_puts_r+0x50>
 8005824:	3e01      	subs	r6, #1
 8005826:	68a3      	ldr	r3, [r4, #8]
 8005828:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800582c:	3b01      	subs	r3, #1
 800582e:	60a3      	str	r3, [r4, #8]
 8005830:	b9e9      	cbnz	r1, 800586e <_puts_r+0x76>
 8005832:	2b00      	cmp	r3, #0
 8005834:	da2e      	bge.n	8005894 <_puts_r+0x9c>
 8005836:	4622      	mov	r2, r4
 8005838:	210a      	movs	r1, #10
 800583a:	4628      	mov	r0, r5
 800583c:	f000 f87b 	bl	8005936 <__swbuf_r>
 8005840:	3001      	adds	r0, #1
 8005842:	d007      	beq.n	8005854 <_puts_r+0x5c>
 8005844:	250a      	movs	r5, #10
 8005846:	e007      	b.n	8005858 <_puts_r+0x60>
 8005848:	4621      	mov	r1, r4
 800584a:	4628      	mov	r0, r5
 800584c:	f000 f8b0 	bl	80059b0 <__swsetup_r>
 8005850:	2800      	cmp	r0, #0
 8005852:	d0e7      	beq.n	8005824 <_puts_r+0x2c>
 8005854:	f04f 35ff 	mov.w	r5, #4294967295
 8005858:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800585a:	07da      	lsls	r2, r3, #31
 800585c:	d405      	bmi.n	800586a <_puts_r+0x72>
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	059b      	lsls	r3, r3, #22
 8005862:	d402      	bmi.n	800586a <_puts_r+0x72>
 8005864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005866:	f000 f974 	bl	8005b52 <__retarget_lock_release_recursive>
 800586a:	4628      	mov	r0, r5
 800586c:	bd70      	pop	{r4, r5, r6, pc}
 800586e:	2b00      	cmp	r3, #0
 8005870:	da04      	bge.n	800587c <_puts_r+0x84>
 8005872:	69a2      	ldr	r2, [r4, #24]
 8005874:	429a      	cmp	r2, r3
 8005876:	dc06      	bgt.n	8005886 <_puts_r+0x8e>
 8005878:	290a      	cmp	r1, #10
 800587a:	d004      	beq.n	8005886 <_puts_r+0x8e>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	6022      	str	r2, [r4, #0]
 8005882:	7019      	strb	r1, [r3, #0]
 8005884:	e7cf      	b.n	8005826 <_puts_r+0x2e>
 8005886:	4622      	mov	r2, r4
 8005888:	4628      	mov	r0, r5
 800588a:	f000 f854 	bl	8005936 <__swbuf_r>
 800588e:	3001      	adds	r0, #1
 8005890:	d1c9      	bne.n	8005826 <_puts_r+0x2e>
 8005892:	e7df      	b.n	8005854 <_puts_r+0x5c>
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	250a      	movs	r5, #10
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	6022      	str	r2, [r4, #0]
 800589c:	701d      	strb	r5, [r3, #0]
 800589e:	e7db      	b.n	8005858 <_puts_r+0x60>

080058a0 <puts>:
 80058a0:	4b02      	ldr	r3, [pc, #8]	; (80058ac <puts+0xc>)
 80058a2:	4601      	mov	r1, r0
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	f7ff bfa7 	b.w	80057f8 <_puts_r>
 80058aa:	bf00      	nop
 80058ac:	20000070 	.word	0x20000070

080058b0 <__sread>:
 80058b0:	b510      	push	{r4, lr}
 80058b2:	460c      	mov	r4, r1
 80058b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b8:	f000 f8fc 	bl	8005ab4 <_read_r>
 80058bc:	2800      	cmp	r0, #0
 80058be:	bfab      	itete	ge
 80058c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058c2:	89a3      	ldrhlt	r3, [r4, #12]
 80058c4:	181b      	addge	r3, r3, r0
 80058c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058ca:	bfac      	ite	ge
 80058cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80058ce:	81a3      	strhlt	r3, [r4, #12]
 80058d0:	bd10      	pop	{r4, pc}

080058d2 <__swrite>:
 80058d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d6:	461f      	mov	r7, r3
 80058d8:	898b      	ldrh	r3, [r1, #12]
 80058da:	05db      	lsls	r3, r3, #23
 80058dc:	4605      	mov	r5, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	4616      	mov	r6, r2
 80058e2:	d505      	bpl.n	80058f0 <__swrite+0x1e>
 80058e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e8:	2302      	movs	r3, #2
 80058ea:	2200      	movs	r2, #0
 80058ec:	f000 f8d0 	bl	8005a90 <_lseek_r>
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058fa:	81a3      	strh	r3, [r4, #12]
 80058fc:	4632      	mov	r2, r6
 80058fe:	463b      	mov	r3, r7
 8005900:	4628      	mov	r0, r5
 8005902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005906:	f000 b8e7 	b.w	8005ad8 <_write_r>

0800590a <__sseek>:
 800590a:	b510      	push	{r4, lr}
 800590c:	460c      	mov	r4, r1
 800590e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005912:	f000 f8bd 	bl	8005a90 <_lseek_r>
 8005916:	1c43      	adds	r3, r0, #1
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	bf15      	itete	ne
 800591c:	6560      	strne	r0, [r4, #84]	; 0x54
 800591e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005922:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005926:	81a3      	strheq	r3, [r4, #12]
 8005928:	bf18      	it	ne
 800592a:	81a3      	strhne	r3, [r4, #12]
 800592c:	bd10      	pop	{r4, pc}

0800592e <__sclose>:
 800592e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005932:	f000 b89d 	b.w	8005a70 <_close_r>

08005936 <__swbuf_r>:
 8005936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005938:	460e      	mov	r6, r1
 800593a:	4614      	mov	r4, r2
 800593c:	4605      	mov	r5, r0
 800593e:	b118      	cbz	r0, 8005948 <__swbuf_r+0x12>
 8005940:	6a03      	ldr	r3, [r0, #32]
 8005942:	b90b      	cbnz	r3, 8005948 <__swbuf_r+0x12>
 8005944:	f7ff ff10 	bl	8005768 <__sinit>
 8005948:	69a3      	ldr	r3, [r4, #24]
 800594a:	60a3      	str	r3, [r4, #8]
 800594c:	89a3      	ldrh	r3, [r4, #12]
 800594e:	071a      	lsls	r2, r3, #28
 8005950:	d525      	bpl.n	800599e <__swbuf_r+0x68>
 8005952:	6923      	ldr	r3, [r4, #16]
 8005954:	b31b      	cbz	r3, 800599e <__swbuf_r+0x68>
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	6922      	ldr	r2, [r4, #16]
 800595a:	1a98      	subs	r0, r3, r2
 800595c:	6963      	ldr	r3, [r4, #20]
 800595e:	b2f6      	uxtb	r6, r6
 8005960:	4283      	cmp	r3, r0
 8005962:	4637      	mov	r7, r6
 8005964:	dc04      	bgt.n	8005970 <__swbuf_r+0x3a>
 8005966:	4621      	mov	r1, r4
 8005968:	4628      	mov	r0, r5
 800596a:	f000 fd45 	bl	80063f8 <_fflush_r>
 800596e:	b9e0      	cbnz	r0, 80059aa <__swbuf_r+0x74>
 8005970:	68a3      	ldr	r3, [r4, #8]
 8005972:	3b01      	subs	r3, #1
 8005974:	60a3      	str	r3, [r4, #8]
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	6022      	str	r2, [r4, #0]
 800597c:	701e      	strb	r6, [r3, #0]
 800597e:	6962      	ldr	r2, [r4, #20]
 8005980:	1c43      	adds	r3, r0, #1
 8005982:	429a      	cmp	r2, r3
 8005984:	d004      	beq.n	8005990 <__swbuf_r+0x5a>
 8005986:	89a3      	ldrh	r3, [r4, #12]
 8005988:	07db      	lsls	r3, r3, #31
 800598a:	d506      	bpl.n	800599a <__swbuf_r+0x64>
 800598c:	2e0a      	cmp	r6, #10
 800598e:	d104      	bne.n	800599a <__swbuf_r+0x64>
 8005990:	4621      	mov	r1, r4
 8005992:	4628      	mov	r0, r5
 8005994:	f000 fd30 	bl	80063f8 <_fflush_r>
 8005998:	b938      	cbnz	r0, 80059aa <__swbuf_r+0x74>
 800599a:	4638      	mov	r0, r7
 800599c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800599e:	4621      	mov	r1, r4
 80059a0:	4628      	mov	r0, r5
 80059a2:	f000 f805 	bl	80059b0 <__swsetup_r>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d0d5      	beq.n	8005956 <__swbuf_r+0x20>
 80059aa:	f04f 37ff 	mov.w	r7, #4294967295
 80059ae:	e7f4      	b.n	800599a <__swbuf_r+0x64>

080059b0 <__swsetup_r>:
 80059b0:	b538      	push	{r3, r4, r5, lr}
 80059b2:	4b2a      	ldr	r3, [pc, #168]	; (8005a5c <__swsetup_r+0xac>)
 80059b4:	4605      	mov	r5, r0
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	460c      	mov	r4, r1
 80059ba:	b118      	cbz	r0, 80059c4 <__swsetup_r+0x14>
 80059bc:	6a03      	ldr	r3, [r0, #32]
 80059be:	b90b      	cbnz	r3, 80059c4 <__swsetup_r+0x14>
 80059c0:	f7ff fed2 	bl	8005768 <__sinit>
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059ca:	0718      	lsls	r0, r3, #28
 80059cc:	d422      	bmi.n	8005a14 <__swsetup_r+0x64>
 80059ce:	06d9      	lsls	r1, r3, #27
 80059d0:	d407      	bmi.n	80059e2 <__swsetup_r+0x32>
 80059d2:	2309      	movs	r3, #9
 80059d4:	602b      	str	r3, [r5, #0]
 80059d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059da:	81a3      	strh	r3, [r4, #12]
 80059dc:	f04f 30ff 	mov.w	r0, #4294967295
 80059e0:	e034      	b.n	8005a4c <__swsetup_r+0x9c>
 80059e2:	0758      	lsls	r0, r3, #29
 80059e4:	d512      	bpl.n	8005a0c <__swsetup_r+0x5c>
 80059e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059e8:	b141      	cbz	r1, 80059fc <__swsetup_r+0x4c>
 80059ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059ee:	4299      	cmp	r1, r3
 80059f0:	d002      	beq.n	80059f8 <__swsetup_r+0x48>
 80059f2:	4628      	mov	r0, r5
 80059f4:	f000 f8ae 	bl	8005b54 <_free_r>
 80059f8:	2300      	movs	r3, #0
 80059fa:	6363      	str	r3, [r4, #52]	; 0x34
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a02:	81a3      	strh	r3, [r4, #12]
 8005a04:	2300      	movs	r3, #0
 8005a06:	6063      	str	r3, [r4, #4]
 8005a08:	6923      	ldr	r3, [r4, #16]
 8005a0a:	6023      	str	r3, [r4, #0]
 8005a0c:	89a3      	ldrh	r3, [r4, #12]
 8005a0e:	f043 0308 	orr.w	r3, r3, #8
 8005a12:	81a3      	strh	r3, [r4, #12]
 8005a14:	6923      	ldr	r3, [r4, #16]
 8005a16:	b94b      	cbnz	r3, 8005a2c <__swsetup_r+0x7c>
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a22:	d003      	beq.n	8005a2c <__swsetup_r+0x7c>
 8005a24:	4621      	mov	r1, r4
 8005a26:	4628      	mov	r0, r5
 8005a28:	f000 fd34 	bl	8006494 <__smakebuf_r>
 8005a2c:	89a0      	ldrh	r0, [r4, #12]
 8005a2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a32:	f010 0301 	ands.w	r3, r0, #1
 8005a36:	d00a      	beq.n	8005a4e <__swsetup_r+0x9e>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60a3      	str	r3, [r4, #8]
 8005a3c:	6963      	ldr	r3, [r4, #20]
 8005a3e:	425b      	negs	r3, r3
 8005a40:	61a3      	str	r3, [r4, #24]
 8005a42:	6923      	ldr	r3, [r4, #16]
 8005a44:	b943      	cbnz	r3, 8005a58 <__swsetup_r+0xa8>
 8005a46:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a4a:	d1c4      	bne.n	80059d6 <__swsetup_r+0x26>
 8005a4c:	bd38      	pop	{r3, r4, r5, pc}
 8005a4e:	0781      	lsls	r1, r0, #30
 8005a50:	bf58      	it	pl
 8005a52:	6963      	ldrpl	r3, [r4, #20]
 8005a54:	60a3      	str	r3, [r4, #8]
 8005a56:	e7f4      	b.n	8005a42 <__swsetup_r+0x92>
 8005a58:	2000      	movs	r0, #0
 8005a5a:	e7f7      	b.n	8005a4c <__swsetup_r+0x9c>
 8005a5c:	20000070 	.word	0x20000070

08005a60 <memset>:
 8005a60:	4402      	add	r2, r0
 8005a62:	4603      	mov	r3, r0
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d100      	bne.n	8005a6a <memset+0xa>
 8005a68:	4770      	bx	lr
 8005a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a6e:	e7f9      	b.n	8005a64 <memset+0x4>

08005a70 <_close_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4d06      	ldr	r5, [pc, #24]	; (8005a8c <_close_r+0x1c>)
 8005a74:	2300      	movs	r3, #0
 8005a76:	4604      	mov	r4, r0
 8005a78:	4608      	mov	r0, r1
 8005a7a:	602b      	str	r3, [r5, #0]
 8005a7c:	f7fb fb79 	bl	8001172 <_close>
 8005a80:	1c43      	adds	r3, r0, #1
 8005a82:	d102      	bne.n	8005a8a <_close_r+0x1a>
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	b103      	cbz	r3, 8005a8a <_close_r+0x1a>
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	bd38      	pop	{r3, r4, r5, pc}
 8005a8c:	200006e8 	.word	0x200006e8

08005a90 <_lseek_r>:
 8005a90:	b538      	push	{r3, r4, r5, lr}
 8005a92:	4d07      	ldr	r5, [pc, #28]	; (8005ab0 <_lseek_r+0x20>)
 8005a94:	4604      	mov	r4, r0
 8005a96:	4608      	mov	r0, r1
 8005a98:	4611      	mov	r1, r2
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	602a      	str	r2, [r5, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f7fb fb8e 	bl	80011c0 <_lseek>
 8005aa4:	1c43      	adds	r3, r0, #1
 8005aa6:	d102      	bne.n	8005aae <_lseek_r+0x1e>
 8005aa8:	682b      	ldr	r3, [r5, #0]
 8005aaa:	b103      	cbz	r3, 8005aae <_lseek_r+0x1e>
 8005aac:	6023      	str	r3, [r4, #0]
 8005aae:	bd38      	pop	{r3, r4, r5, pc}
 8005ab0:	200006e8 	.word	0x200006e8

08005ab4 <_read_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4d07      	ldr	r5, [pc, #28]	; (8005ad4 <_read_r+0x20>)
 8005ab8:	4604      	mov	r4, r0
 8005aba:	4608      	mov	r0, r1
 8005abc:	4611      	mov	r1, r2
 8005abe:	2200      	movs	r2, #0
 8005ac0:	602a      	str	r2, [r5, #0]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f7fb fb38 	bl	8001138 <_read>
 8005ac8:	1c43      	adds	r3, r0, #1
 8005aca:	d102      	bne.n	8005ad2 <_read_r+0x1e>
 8005acc:	682b      	ldr	r3, [r5, #0]
 8005ace:	b103      	cbz	r3, 8005ad2 <_read_r+0x1e>
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	bd38      	pop	{r3, r4, r5, pc}
 8005ad4:	200006e8 	.word	0x200006e8

08005ad8 <_write_r>:
 8005ad8:	b538      	push	{r3, r4, r5, lr}
 8005ada:	4d07      	ldr	r5, [pc, #28]	; (8005af8 <_write_r+0x20>)
 8005adc:	4604      	mov	r4, r0
 8005ade:	4608      	mov	r0, r1
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	602a      	str	r2, [r5, #0]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f7fa fd40 	bl	800056c <_write>
 8005aec:	1c43      	adds	r3, r0, #1
 8005aee:	d102      	bne.n	8005af6 <_write_r+0x1e>
 8005af0:	682b      	ldr	r3, [r5, #0]
 8005af2:	b103      	cbz	r3, 8005af6 <_write_r+0x1e>
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	bd38      	pop	{r3, r4, r5, pc}
 8005af8:	200006e8 	.word	0x200006e8

08005afc <__errno>:
 8005afc:	4b01      	ldr	r3, [pc, #4]	; (8005b04 <__errno+0x8>)
 8005afe:	6818      	ldr	r0, [r3, #0]
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	20000070 	.word	0x20000070

08005b08 <__libc_init_array>:
 8005b08:	b570      	push	{r4, r5, r6, lr}
 8005b0a:	4d0d      	ldr	r5, [pc, #52]	; (8005b40 <__libc_init_array+0x38>)
 8005b0c:	4c0d      	ldr	r4, [pc, #52]	; (8005b44 <__libc_init_array+0x3c>)
 8005b0e:	1b64      	subs	r4, r4, r5
 8005b10:	10a4      	asrs	r4, r4, #2
 8005b12:	2600      	movs	r6, #0
 8005b14:	42a6      	cmp	r6, r4
 8005b16:	d109      	bne.n	8005b2c <__libc_init_array+0x24>
 8005b18:	4d0b      	ldr	r5, [pc, #44]	; (8005b48 <__libc_init_array+0x40>)
 8005b1a:	4c0c      	ldr	r4, [pc, #48]	; (8005b4c <__libc_init_array+0x44>)
 8005b1c:	f000 fd28 	bl	8006570 <_init>
 8005b20:	1b64      	subs	r4, r4, r5
 8005b22:	10a4      	asrs	r4, r4, #2
 8005b24:	2600      	movs	r6, #0
 8005b26:	42a6      	cmp	r6, r4
 8005b28:	d105      	bne.n	8005b36 <__libc_init_array+0x2e>
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}
 8005b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b30:	4798      	blx	r3
 8005b32:	3601      	adds	r6, #1
 8005b34:	e7ee      	b.n	8005b14 <__libc_init_array+0xc>
 8005b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3a:	4798      	blx	r3
 8005b3c:	3601      	adds	r6, #1
 8005b3e:	e7f2      	b.n	8005b26 <__libc_init_array+0x1e>
 8005b40:	08006dec 	.word	0x08006dec
 8005b44:	08006dec 	.word	0x08006dec
 8005b48:	08006dec 	.word	0x08006dec
 8005b4c:	08006df0 	.word	0x08006df0

08005b50 <__retarget_lock_acquire_recursive>:
 8005b50:	4770      	bx	lr

08005b52 <__retarget_lock_release_recursive>:
 8005b52:	4770      	bx	lr

08005b54 <_free_r>:
 8005b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b56:	2900      	cmp	r1, #0
 8005b58:	d044      	beq.n	8005be4 <_free_r+0x90>
 8005b5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b5e:	9001      	str	r0, [sp, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f1a1 0404 	sub.w	r4, r1, #4
 8005b66:	bfb8      	it	lt
 8005b68:	18e4      	addlt	r4, r4, r3
 8005b6a:	f000 f8df 	bl	8005d2c <__malloc_lock>
 8005b6e:	4a1e      	ldr	r2, [pc, #120]	; (8005be8 <_free_r+0x94>)
 8005b70:	9801      	ldr	r0, [sp, #4]
 8005b72:	6813      	ldr	r3, [r2, #0]
 8005b74:	b933      	cbnz	r3, 8005b84 <_free_r+0x30>
 8005b76:	6063      	str	r3, [r4, #4]
 8005b78:	6014      	str	r4, [r2, #0]
 8005b7a:	b003      	add	sp, #12
 8005b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b80:	f000 b8da 	b.w	8005d38 <__malloc_unlock>
 8005b84:	42a3      	cmp	r3, r4
 8005b86:	d908      	bls.n	8005b9a <_free_r+0x46>
 8005b88:	6825      	ldr	r5, [r4, #0]
 8005b8a:	1961      	adds	r1, r4, r5
 8005b8c:	428b      	cmp	r3, r1
 8005b8e:	bf01      	itttt	eq
 8005b90:	6819      	ldreq	r1, [r3, #0]
 8005b92:	685b      	ldreq	r3, [r3, #4]
 8005b94:	1949      	addeq	r1, r1, r5
 8005b96:	6021      	streq	r1, [r4, #0]
 8005b98:	e7ed      	b.n	8005b76 <_free_r+0x22>
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	b10b      	cbz	r3, 8005ba4 <_free_r+0x50>
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	d9fa      	bls.n	8005b9a <_free_r+0x46>
 8005ba4:	6811      	ldr	r1, [r2, #0]
 8005ba6:	1855      	adds	r5, r2, r1
 8005ba8:	42a5      	cmp	r5, r4
 8005baa:	d10b      	bne.n	8005bc4 <_free_r+0x70>
 8005bac:	6824      	ldr	r4, [r4, #0]
 8005bae:	4421      	add	r1, r4
 8005bb0:	1854      	adds	r4, r2, r1
 8005bb2:	42a3      	cmp	r3, r4
 8005bb4:	6011      	str	r1, [r2, #0]
 8005bb6:	d1e0      	bne.n	8005b7a <_free_r+0x26>
 8005bb8:	681c      	ldr	r4, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	6053      	str	r3, [r2, #4]
 8005bbe:	440c      	add	r4, r1
 8005bc0:	6014      	str	r4, [r2, #0]
 8005bc2:	e7da      	b.n	8005b7a <_free_r+0x26>
 8005bc4:	d902      	bls.n	8005bcc <_free_r+0x78>
 8005bc6:	230c      	movs	r3, #12
 8005bc8:	6003      	str	r3, [r0, #0]
 8005bca:	e7d6      	b.n	8005b7a <_free_r+0x26>
 8005bcc:	6825      	ldr	r5, [r4, #0]
 8005bce:	1961      	adds	r1, r4, r5
 8005bd0:	428b      	cmp	r3, r1
 8005bd2:	bf04      	itt	eq
 8005bd4:	6819      	ldreq	r1, [r3, #0]
 8005bd6:	685b      	ldreq	r3, [r3, #4]
 8005bd8:	6063      	str	r3, [r4, #4]
 8005bda:	bf04      	itt	eq
 8005bdc:	1949      	addeq	r1, r1, r5
 8005bde:	6021      	streq	r1, [r4, #0]
 8005be0:	6054      	str	r4, [r2, #4]
 8005be2:	e7ca      	b.n	8005b7a <_free_r+0x26>
 8005be4:	b003      	add	sp, #12
 8005be6:	bd30      	pop	{r4, r5, pc}
 8005be8:	200006f0 	.word	0x200006f0

08005bec <sbrk_aligned>:
 8005bec:	b570      	push	{r4, r5, r6, lr}
 8005bee:	4e0e      	ldr	r6, [pc, #56]	; (8005c28 <sbrk_aligned+0x3c>)
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	6831      	ldr	r1, [r6, #0]
 8005bf4:	4605      	mov	r5, r0
 8005bf6:	b911      	cbnz	r1, 8005bfe <sbrk_aligned+0x12>
 8005bf8:	f000 fcaa 	bl	8006550 <_sbrk_r>
 8005bfc:	6030      	str	r0, [r6, #0]
 8005bfe:	4621      	mov	r1, r4
 8005c00:	4628      	mov	r0, r5
 8005c02:	f000 fca5 	bl	8006550 <_sbrk_r>
 8005c06:	1c43      	adds	r3, r0, #1
 8005c08:	d00a      	beq.n	8005c20 <sbrk_aligned+0x34>
 8005c0a:	1cc4      	adds	r4, r0, #3
 8005c0c:	f024 0403 	bic.w	r4, r4, #3
 8005c10:	42a0      	cmp	r0, r4
 8005c12:	d007      	beq.n	8005c24 <sbrk_aligned+0x38>
 8005c14:	1a21      	subs	r1, r4, r0
 8005c16:	4628      	mov	r0, r5
 8005c18:	f000 fc9a 	bl	8006550 <_sbrk_r>
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d101      	bne.n	8005c24 <sbrk_aligned+0x38>
 8005c20:	f04f 34ff 	mov.w	r4, #4294967295
 8005c24:	4620      	mov	r0, r4
 8005c26:	bd70      	pop	{r4, r5, r6, pc}
 8005c28:	200006f4 	.word	0x200006f4

08005c2c <_malloc_r>:
 8005c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c30:	1ccd      	adds	r5, r1, #3
 8005c32:	f025 0503 	bic.w	r5, r5, #3
 8005c36:	3508      	adds	r5, #8
 8005c38:	2d0c      	cmp	r5, #12
 8005c3a:	bf38      	it	cc
 8005c3c:	250c      	movcc	r5, #12
 8005c3e:	2d00      	cmp	r5, #0
 8005c40:	4607      	mov	r7, r0
 8005c42:	db01      	blt.n	8005c48 <_malloc_r+0x1c>
 8005c44:	42a9      	cmp	r1, r5
 8005c46:	d905      	bls.n	8005c54 <_malloc_r+0x28>
 8005c48:	230c      	movs	r3, #12
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	2600      	movs	r6, #0
 8005c4e:	4630      	mov	r0, r6
 8005c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d28 <_malloc_r+0xfc>
 8005c58:	f000 f868 	bl	8005d2c <__malloc_lock>
 8005c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005c60:	461c      	mov	r4, r3
 8005c62:	bb5c      	cbnz	r4, 8005cbc <_malloc_r+0x90>
 8005c64:	4629      	mov	r1, r5
 8005c66:	4638      	mov	r0, r7
 8005c68:	f7ff ffc0 	bl	8005bec <sbrk_aligned>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	4604      	mov	r4, r0
 8005c70:	d155      	bne.n	8005d1e <_malloc_r+0xf2>
 8005c72:	f8d8 4000 	ldr.w	r4, [r8]
 8005c76:	4626      	mov	r6, r4
 8005c78:	2e00      	cmp	r6, #0
 8005c7a:	d145      	bne.n	8005d08 <_malloc_r+0xdc>
 8005c7c:	2c00      	cmp	r4, #0
 8005c7e:	d048      	beq.n	8005d12 <_malloc_r+0xe6>
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	4631      	mov	r1, r6
 8005c84:	4638      	mov	r0, r7
 8005c86:	eb04 0903 	add.w	r9, r4, r3
 8005c8a:	f000 fc61 	bl	8006550 <_sbrk_r>
 8005c8e:	4581      	cmp	r9, r0
 8005c90:	d13f      	bne.n	8005d12 <_malloc_r+0xe6>
 8005c92:	6821      	ldr	r1, [r4, #0]
 8005c94:	1a6d      	subs	r5, r5, r1
 8005c96:	4629      	mov	r1, r5
 8005c98:	4638      	mov	r0, r7
 8005c9a:	f7ff ffa7 	bl	8005bec <sbrk_aligned>
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	d037      	beq.n	8005d12 <_malloc_r+0xe6>
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	442b      	add	r3, r5
 8005ca6:	6023      	str	r3, [r4, #0]
 8005ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d038      	beq.n	8005d22 <_malloc_r+0xf6>
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	42a2      	cmp	r2, r4
 8005cb4:	d12b      	bne.n	8005d0e <_malloc_r+0xe2>
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	605a      	str	r2, [r3, #4]
 8005cba:	e00f      	b.n	8005cdc <_malloc_r+0xb0>
 8005cbc:	6822      	ldr	r2, [r4, #0]
 8005cbe:	1b52      	subs	r2, r2, r5
 8005cc0:	d41f      	bmi.n	8005d02 <_malloc_r+0xd6>
 8005cc2:	2a0b      	cmp	r2, #11
 8005cc4:	d917      	bls.n	8005cf6 <_malloc_r+0xca>
 8005cc6:	1961      	adds	r1, r4, r5
 8005cc8:	42a3      	cmp	r3, r4
 8005cca:	6025      	str	r5, [r4, #0]
 8005ccc:	bf18      	it	ne
 8005cce:	6059      	strne	r1, [r3, #4]
 8005cd0:	6863      	ldr	r3, [r4, #4]
 8005cd2:	bf08      	it	eq
 8005cd4:	f8c8 1000 	streq.w	r1, [r8]
 8005cd8:	5162      	str	r2, [r4, r5]
 8005cda:	604b      	str	r3, [r1, #4]
 8005cdc:	4638      	mov	r0, r7
 8005cde:	f104 060b 	add.w	r6, r4, #11
 8005ce2:	f000 f829 	bl	8005d38 <__malloc_unlock>
 8005ce6:	f026 0607 	bic.w	r6, r6, #7
 8005cea:	1d23      	adds	r3, r4, #4
 8005cec:	1af2      	subs	r2, r6, r3
 8005cee:	d0ae      	beq.n	8005c4e <_malloc_r+0x22>
 8005cf0:	1b9b      	subs	r3, r3, r6
 8005cf2:	50a3      	str	r3, [r4, r2]
 8005cf4:	e7ab      	b.n	8005c4e <_malloc_r+0x22>
 8005cf6:	42a3      	cmp	r3, r4
 8005cf8:	6862      	ldr	r2, [r4, #4]
 8005cfa:	d1dd      	bne.n	8005cb8 <_malloc_r+0x8c>
 8005cfc:	f8c8 2000 	str.w	r2, [r8]
 8005d00:	e7ec      	b.n	8005cdc <_malloc_r+0xb0>
 8005d02:	4623      	mov	r3, r4
 8005d04:	6864      	ldr	r4, [r4, #4]
 8005d06:	e7ac      	b.n	8005c62 <_malloc_r+0x36>
 8005d08:	4634      	mov	r4, r6
 8005d0a:	6876      	ldr	r6, [r6, #4]
 8005d0c:	e7b4      	b.n	8005c78 <_malloc_r+0x4c>
 8005d0e:	4613      	mov	r3, r2
 8005d10:	e7cc      	b.n	8005cac <_malloc_r+0x80>
 8005d12:	230c      	movs	r3, #12
 8005d14:	603b      	str	r3, [r7, #0]
 8005d16:	4638      	mov	r0, r7
 8005d18:	f000 f80e 	bl	8005d38 <__malloc_unlock>
 8005d1c:	e797      	b.n	8005c4e <_malloc_r+0x22>
 8005d1e:	6025      	str	r5, [r4, #0]
 8005d20:	e7dc      	b.n	8005cdc <_malloc_r+0xb0>
 8005d22:	605b      	str	r3, [r3, #4]
 8005d24:	deff      	udf	#255	; 0xff
 8005d26:	bf00      	nop
 8005d28:	200006f0 	.word	0x200006f0

08005d2c <__malloc_lock>:
 8005d2c:	4801      	ldr	r0, [pc, #4]	; (8005d34 <__malloc_lock+0x8>)
 8005d2e:	f7ff bf0f 	b.w	8005b50 <__retarget_lock_acquire_recursive>
 8005d32:	bf00      	nop
 8005d34:	200006ec 	.word	0x200006ec

08005d38 <__malloc_unlock>:
 8005d38:	4801      	ldr	r0, [pc, #4]	; (8005d40 <__malloc_unlock+0x8>)
 8005d3a:	f7ff bf0a 	b.w	8005b52 <__retarget_lock_release_recursive>
 8005d3e:	bf00      	nop
 8005d40:	200006ec 	.word	0x200006ec

08005d44 <__sfputc_r>:
 8005d44:	6893      	ldr	r3, [r2, #8]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	b410      	push	{r4}
 8005d4c:	6093      	str	r3, [r2, #8]
 8005d4e:	da08      	bge.n	8005d62 <__sfputc_r+0x1e>
 8005d50:	6994      	ldr	r4, [r2, #24]
 8005d52:	42a3      	cmp	r3, r4
 8005d54:	db01      	blt.n	8005d5a <__sfputc_r+0x16>
 8005d56:	290a      	cmp	r1, #10
 8005d58:	d103      	bne.n	8005d62 <__sfputc_r+0x1e>
 8005d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d5e:	f7ff bdea 	b.w	8005936 <__swbuf_r>
 8005d62:	6813      	ldr	r3, [r2, #0]
 8005d64:	1c58      	adds	r0, r3, #1
 8005d66:	6010      	str	r0, [r2, #0]
 8005d68:	7019      	strb	r1, [r3, #0]
 8005d6a:	4608      	mov	r0, r1
 8005d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <__sfputs_r>:
 8005d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d74:	4606      	mov	r6, r0
 8005d76:	460f      	mov	r7, r1
 8005d78:	4614      	mov	r4, r2
 8005d7a:	18d5      	adds	r5, r2, r3
 8005d7c:	42ac      	cmp	r4, r5
 8005d7e:	d101      	bne.n	8005d84 <__sfputs_r+0x12>
 8005d80:	2000      	movs	r0, #0
 8005d82:	e007      	b.n	8005d94 <__sfputs_r+0x22>
 8005d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d88:	463a      	mov	r2, r7
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	f7ff ffda 	bl	8005d44 <__sfputc_r>
 8005d90:	1c43      	adds	r3, r0, #1
 8005d92:	d1f3      	bne.n	8005d7c <__sfputs_r+0xa>
 8005d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d98 <_vfiprintf_r>:
 8005d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9c:	460d      	mov	r5, r1
 8005d9e:	b09d      	sub	sp, #116	; 0x74
 8005da0:	4614      	mov	r4, r2
 8005da2:	4698      	mov	r8, r3
 8005da4:	4606      	mov	r6, r0
 8005da6:	b118      	cbz	r0, 8005db0 <_vfiprintf_r+0x18>
 8005da8:	6a03      	ldr	r3, [r0, #32]
 8005daa:	b90b      	cbnz	r3, 8005db0 <_vfiprintf_r+0x18>
 8005dac:	f7ff fcdc 	bl	8005768 <__sinit>
 8005db0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005db2:	07d9      	lsls	r1, r3, #31
 8005db4:	d405      	bmi.n	8005dc2 <_vfiprintf_r+0x2a>
 8005db6:	89ab      	ldrh	r3, [r5, #12]
 8005db8:	059a      	lsls	r2, r3, #22
 8005dba:	d402      	bmi.n	8005dc2 <_vfiprintf_r+0x2a>
 8005dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dbe:	f7ff fec7 	bl	8005b50 <__retarget_lock_acquire_recursive>
 8005dc2:	89ab      	ldrh	r3, [r5, #12]
 8005dc4:	071b      	lsls	r3, r3, #28
 8005dc6:	d501      	bpl.n	8005dcc <_vfiprintf_r+0x34>
 8005dc8:	692b      	ldr	r3, [r5, #16]
 8005dca:	b99b      	cbnz	r3, 8005df4 <_vfiprintf_r+0x5c>
 8005dcc:	4629      	mov	r1, r5
 8005dce:	4630      	mov	r0, r6
 8005dd0:	f7ff fdee 	bl	80059b0 <__swsetup_r>
 8005dd4:	b170      	cbz	r0, 8005df4 <_vfiprintf_r+0x5c>
 8005dd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dd8:	07dc      	lsls	r4, r3, #31
 8005dda:	d504      	bpl.n	8005de6 <_vfiprintf_r+0x4e>
 8005ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8005de0:	b01d      	add	sp, #116	; 0x74
 8005de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de6:	89ab      	ldrh	r3, [r5, #12]
 8005de8:	0598      	lsls	r0, r3, #22
 8005dea:	d4f7      	bmi.n	8005ddc <_vfiprintf_r+0x44>
 8005dec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dee:	f7ff feb0 	bl	8005b52 <__retarget_lock_release_recursive>
 8005df2:	e7f3      	b.n	8005ddc <_vfiprintf_r+0x44>
 8005df4:	2300      	movs	r3, #0
 8005df6:	9309      	str	r3, [sp, #36]	; 0x24
 8005df8:	2320      	movs	r3, #32
 8005dfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e02:	2330      	movs	r3, #48	; 0x30
 8005e04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005fb8 <_vfiprintf_r+0x220>
 8005e08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e0c:	f04f 0901 	mov.w	r9, #1
 8005e10:	4623      	mov	r3, r4
 8005e12:	469a      	mov	sl, r3
 8005e14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e18:	b10a      	cbz	r2, 8005e1e <_vfiprintf_r+0x86>
 8005e1a:	2a25      	cmp	r2, #37	; 0x25
 8005e1c:	d1f9      	bne.n	8005e12 <_vfiprintf_r+0x7a>
 8005e1e:	ebba 0b04 	subs.w	fp, sl, r4
 8005e22:	d00b      	beq.n	8005e3c <_vfiprintf_r+0xa4>
 8005e24:	465b      	mov	r3, fp
 8005e26:	4622      	mov	r2, r4
 8005e28:	4629      	mov	r1, r5
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	f7ff ffa1 	bl	8005d72 <__sfputs_r>
 8005e30:	3001      	adds	r0, #1
 8005e32:	f000 80a9 	beq.w	8005f88 <_vfiprintf_r+0x1f0>
 8005e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e38:	445a      	add	r2, fp
 8005e3a:	9209      	str	r2, [sp, #36]	; 0x24
 8005e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 80a1 	beq.w	8005f88 <_vfiprintf_r+0x1f0>
 8005e46:	2300      	movs	r3, #0
 8005e48:	f04f 32ff 	mov.w	r2, #4294967295
 8005e4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e50:	f10a 0a01 	add.w	sl, sl, #1
 8005e54:	9304      	str	r3, [sp, #16]
 8005e56:	9307      	str	r3, [sp, #28]
 8005e58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e5c:	931a      	str	r3, [sp, #104]	; 0x68
 8005e5e:	4654      	mov	r4, sl
 8005e60:	2205      	movs	r2, #5
 8005e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e66:	4854      	ldr	r0, [pc, #336]	; (8005fb8 <_vfiprintf_r+0x220>)
 8005e68:	f7fa f9b2 	bl	80001d0 <memchr>
 8005e6c:	9a04      	ldr	r2, [sp, #16]
 8005e6e:	b9d8      	cbnz	r0, 8005ea8 <_vfiprintf_r+0x110>
 8005e70:	06d1      	lsls	r1, r2, #27
 8005e72:	bf44      	itt	mi
 8005e74:	2320      	movmi	r3, #32
 8005e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e7a:	0713      	lsls	r3, r2, #28
 8005e7c:	bf44      	itt	mi
 8005e7e:	232b      	movmi	r3, #43	; 0x2b
 8005e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e84:	f89a 3000 	ldrb.w	r3, [sl]
 8005e88:	2b2a      	cmp	r3, #42	; 0x2a
 8005e8a:	d015      	beq.n	8005eb8 <_vfiprintf_r+0x120>
 8005e8c:	9a07      	ldr	r2, [sp, #28]
 8005e8e:	4654      	mov	r4, sl
 8005e90:	2000      	movs	r0, #0
 8005e92:	f04f 0c0a 	mov.w	ip, #10
 8005e96:	4621      	mov	r1, r4
 8005e98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e9c:	3b30      	subs	r3, #48	; 0x30
 8005e9e:	2b09      	cmp	r3, #9
 8005ea0:	d94d      	bls.n	8005f3e <_vfiprintf_r+0x1a6>
 8005ea2:	b1b0      	cbz	r0, 8005ed2 <_vfiprintf_r+0x13a>
 8005ea4:	9207      	str	r2, [sp, #28]
 8005ea6:	e014      	b.n	8005ed2 <_vfiprintf_r+0x13a>
 8005ea8:	eba0 0308 	sub.w	r3, r0, r8
 8005eac:	fa09 f303 	lsl.w	r3, r9, r3
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	9304      	str	r3, [sp, #16]
 8005eb4:	46a2      	mov	sl, r4
 8005eb6:	e7d2      	b.n	8005e5e <_vfiprintf_r+0xc6>
 8005eb8:	9b03      	ldr	r3, [sp, #12]
 8005eba:	1d19      	adds	r1, r3, #4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	9103      	str	r1, [sp, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	bfbb      	ittet	lt
 8005ec4:	425b      	neglt	r3, r3
 8005ec6:	f042 0202 	orrlt.w	r2, r2, #2
 8005eca:	9307      	strge	r3, [sp, #28]
 8005ecc:	9307      	strlt	r3, [sp, #28]
 8005ece:	bfb8      	it	lt
 8005ed0:	9204      	strlt	r2, [sp, #16]
 8005ed2:	7823      	ldrb	r3, [r4, #0]
 8005ed4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ed6:	d10c      	bne.n	8005ef2 <_vfiprintf_r+0x15a>
 8005ed8:	7863      	ldrb	r3, [r4, #1]
 8005eda:	2b2a      	cmp	r3, #42	; 0x2a
 8005edc:	d134      	bne.n	8005f48 <_vfiprintf_r+0x1b0>
 8005ede:	9b03      	ldr	r3, [sp, #12]
 8005ee0:	1d1a      	adds	r2, r3, #4
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	9203      	str	r2, [sp, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	bfb8      	it	lt
 8005eea:	f04f 33ff 	movlt.w	r3, #4294967295
 8005eee:	3402      	adds	r4, #2
 8005ef0:	9305      	str	r3, [sp, #20]
 8005ef2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005fc8 <_vfiprintf_r+0x230>
 8005ef6:	7821      	ldrb	r1, [r4, #0]
 8005ef8:	2203      	movs	r2, #3
 8005efa:	4650      	mov	r0, sl
 8005efc:	f7fa f968 	bl	80001d0 <memchr>
 8005f00:	b138      	cbz	r0, 8005f12 <_vfiprintf_r+0x17a>
 8005f02:	9b04      	ldr	r3, [sp, #16]
 8005f04:	eba0 000a 	sub.w	r0, r0, sl
 8005f08:	2240      	movs	r2, #64	; 0x40
 8005f0a:	4082      	lsls	r2, r0
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	3401      	adds	r4, #1
 8005f10:	9304      	str	r3, [sp, #16]
 8005f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f16:	4829      	ldr	r0, [pc, #164]	; (8005fbc <_vfiprintf_r+0x224>)
 8005f18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f1c:	2206      	movs	r2, #6
 8005f1e:	f7fa f957 	bl	80001d0 <memchr>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d03f      	beq.n	8005fa6 <_vfiprintf_r+0x20e>
 8005f26:	4b26      	ldr	r3, [pc, #152]	; (8005fc0 <_vfiprintf_r+0x228>)
 8005f28:	bb1b      	cbnz	r3, 8005f72 <_vfiprintf_r+0x1da>
 8005f2a:	9b03      	ldr	r3, [sp, #12]
 8005f2c:	3307      	adds	r3, #7
 8005f2e:	f023 0307 	bic.w	r3, r3, #7
 8005f32:	3308      	adds	r3, #8
 8005f34:	9303      	str	r3, [sp, #12]
 8005f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f38:	443b      	add	r3, r7
 8005f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f3c:	e768      	b.n	8005e10 <_vfiprintf_r+0x78>
 8005f3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f42:	460c      	mov	r4, r1
 8005f44:	2001      	movs	r0, #1
 8005f46:	e7a6      	b.n	8005e96 <_vfiprintf_r+0xfe>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	3401      	adds	r4, #1
 8005f4c:	9305      	str	r3, [sp, #20]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	f04f 0c0a 	mov.w	ip, #10
 8005f54:	4620      	mov	r0, r4
 8005f56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f5a:	3a30      	subs	r2, #48	; 0x30
 8005f5c:	2a09      	cmp	r2, #9
 8005f5e:	d903      	bls.n	8005f68 <_vfiprintf_r+0x1d0>
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0c6      	beq.n	8005ef2 <_vfiprintf_r+0x15a>
 8005f64:	9105      	str	r1, [sp, #20]
 8005f66:	e7c4      	b.n	8005ef2 <_vfiprintf_r+0x15a>
 8005f68:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e7f0      	b.n	8005f54 <_vfiprintf_r+0x1bc>
 8005f72:	ab03      	add	r3, sp, #12
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	462a      	mov	r2, r5
 8005f78:	4b12      	ldr	r3, [pc, #72]	; (8005fc4 <_vfiprintf_r+0x22c>)
 8005f7a:	a904      	add	r1, sp, #16
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	f3af 8000 	nop.w
 8005f82:	4607      	mov	r7, r0
 8005f84:	1c78      	adds	r0, r7, #1
 8005f86:	d1d6      	bne.n	8005f36 <_vfiprintf_r+0x19e>
 8005f88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f8a:	07d9      	lsls	r1, r3, #31
 8005f8c:	d405      	bmi.n	8005f9a <_vfiprintf_r+0x202>
 8005f8e:	89ab      	ldrh	r3, [r5, #12]
 8005f90:	059a      	lsls	r2, r3, #22
 8005f92:	d402      	bmi.n	8005f9a <_vfiprintf_r+0x202>
 8005f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f96:	f7ff fddc 	bl	8005b52 <__retarget_lock_release_recursive>
 8005f9a:	89ab      	ldrh	r3, [r5, #12]
 8005f9c:	065b      	lsls	r3, r3, #25
 8005f9e:	f53f af1d 	bmi.w	8005ddc <_vfiprintf_r+0x44>
 8005fa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fa4:	e71c      	b.n	8005de0 <_vfiprintf_r+0x48>
 8005fa6:	ab03      	add	r3, sp, #12
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	462a      	mov	r2, r5
 8005fac:	4b05      	ldr	r3, [pc, #20]	; (8005fc4 <_vfiprintf_r+0x22c>)
 8005fae:	a904      	add	r1, sp, #16
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	f000 f879 	bl	80060a8 <_printf_i>
 8005fb6:	e7e4      	b.n	8005f82 <_vfiprintf_r+0x1ea>
 8005fb8:	08006db0 	.word	0x08006db0
 8005fbc:	08006dba 	.word	0x08006dba
 8005fc0:	00000000 	.word	0x00000000
 8005fc4:	08005d73 	.word	0x08005d73
 8005fc8:	08006db6 	.word	0x08006db6

08005fcc <_printf_common>:
 8005fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd0:	4616      	mov	r6, r2
 8005fd2:	4699      	mov	r9, r3
 8005fd4:	688a      	ldr	r2, [r1, #8]
 8005fd6:	690b      	ldr	r3, [r1, #16]
 8005fd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	bfb8      	it	lt
 8005fe0:	4613      	movlt	r3, r2
 8005fe2:	6033      	str	r3, [r6, #0]
 8005fe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fe8:	4607      	mov	r7, r0
 8005fea:	460c      	mov	r4, r1
 8005fec:	b10a      	cbz	r2, 8005ff2 <_printf_common+0x26>
 8005fee:	3301      	adds	r3, #1
 8005ff0:	6033      	str	r3, [r6, #0]
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	0699      	lsls	r1, r3, #26
 8005ff6:	bf42      	ittt	mi
 8005ff8:	6833      	ldrmi	r3, [r6, #0]
 8005ffa:	3302      	addmi	r3, #2
 8005ffc:	6033      	strmi	r3, [r6, #0]
 8005ffe:	6825      	ldr	r5, [r4, #0]
 8006000:	f015 0506 	ands.w	r5, r5, #6
 8006004:	d106      	bne.n	8006014 <_printf_common+0x48>
 8006006:	f104 0a19 	add.w	sl, r4, #25
 800600a:	68e3      	ldr	r3, [r4, #12]
 800600c:	6832      	ldr	r2, [r6, #0]
 800600e:	1a9b      	subs	r3, r3, r2
 8006010:	42ab      	cmp	r3, r5
 8006012:	dc26      	bgt.n	8006062 <_printf_common+0x96>
 8006014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006018:	1e13      	subs	r3, r2, #0
 800601a:	6822      	ldr	r2, [r4, #0]
 800601c:	bf18      	it	ne
 800601e:	2301      	movne	r3, #1
 8006020:	0692      	lsls	r2, r2, #26
 8006022:	d42b      	bmi.n	800607c <_printf_common+0xb0>
 8006024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006028:	4649      	mov	r1, r9
 800602a:	4638      	mov	r0, r7
 800602c:	47c0      	blx	r8
 800602e:	3001      	adds	r0, #1
 8006030:	d01e      	beq.n	8006070 <_printf_common+0xa4>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	6922      	ldr	r2, [r4, #16]
 8006036:	f003 0306 	and.w	r3, r3, #6
 800603a:	2b04      	cmp	r3, #4
 800603c:	bf02      	ittt	eq
 800603e:	68e5      	ldreq	r5, [r4, #12]
 8006040:	6833      	ldreq	r3, [r6, #0]
 8006042:	1aed      	subeq	r5, r5, r3
 8006044:	68a3      	ldr	r3, [r4, #8]
 8006046:	bf0c      	ite	eq
 8006048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800604c:	2500      	movne	r5, #0
 800604e:	4293      	cmp	r3, r2
 8006050:	bfc4      	itt	gt
 8006052:	1a9b      	subgt	r3, r3, r2
 8006054:	18ed      	addgt	r5, r5, r3
 8006056:	2600      	movs	r6, #0
 8006058:	341a      	adds	r4, #26
 800605a:	42b5      	cmp	r5, r6
 800605c:	d11a      	bne.n	8006094 <_printf_common+0xc8>
 800605e:	2000      	movs	r0, #0
 8006060:	e008      	b.n	8006074 <_printf_common+0xa8>
 8006062:	2301      	movs	r3, #1
 8006064:	4652      	mov	r2, sl
 8006066:	4649      	mov	r1, r9
 8006068:	4638      	mov	r0, r7
 800606a:	47c0      	blx	r8
 800606c:	3001      	adds	r0, #1
 800606e:	d103      	bne.n	8006078 <_printf_common+0xac>
 8006070:	f04f 30ff 	mov.w	r0, #4294967295
 8006074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006078:	3501      	adds	r5, #1
 800607a:	e7c6      	b.n	800600a <_printf_common+0x3e>
 800607c:	18e1      	adds	r1, r4, r3
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	2030      	movs	r0, #48	; 0x30
 8006082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006086:	4422      	add	r2, r4
 8006088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800608c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006090:	3302      	adds	r3, #2
 8006092:	e7c7      	b.n	8006024 <_printf_common+0x58>
 8006094:	2301      	movs	r3, #1
 8006096:	4622      	mov	r2, r4
 8006098:	4649      	mov	r1, r9
 800609a:	4638      	mov	r0, r7
 800609c:	47c0      	blx	r8
 800609e:	3001      	adds	r0, #1
 80060a0:	d0e6      	beq.n	8006070 <_printf_common+0xa4>
 80060a2:	3601      	adds	r6, #1
 80060a4:	e7d9      	b.n	800605a <_printf_common+0x8e>
	...

080060a8 <_printf_i>:
 80060a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060ac:	7e0f      	ldrb	r7, [r1, #24]
 80060ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060b0:	2f78      	cmp	r7, #120	; 0x78
 80060b2:	4691      	mov	r9, r2
 80060b4:	4680      	mov	r8, r0
 80060b6:	460c      	mov	r4, r1
 80060b8:	469a      	mov	sl, r3
 80060ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060be:	d807      	bhi.n	80060d0 <_printf_i+0x28>
 80060c0:	2f62      	cmp	r7, #98	; 0x62
 80060c2:	d80a      	bhi.n	80060da <_printf_i+0x32>
 80060c4:	2f00      	cmp	r7, #0
 80060c6:	f000 80d4 	beq.w	8006272 <_printf_i+0x1ca>
 80060ca:	2f58      	cmp	r7, #88	; 0x58
 80060cc:	f000 80c0 	beq.w	8006250 <_printf_i+0x1a8>
 80060d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060d8:	e03a      	b.n	8006150 <_printf_i+0xa8>
 80060da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060de:	2b15      	cmp	r3, #21
 80060e0:	d8f6      	bhi.n	80060d0 <_printf_i+0x28>
 80060e2:	a101      	add	r1, pc, #4	; (adr r1, 80060e8 <_printf_i+0x40>)
 80060e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060e8:	08006141 	.word	0x08006141
 80060ec:	08006155 	.word	0x08006155
 80060f0:	080060d1 	.word	0x080060d1
 80060f4:	080060d1 	.word	0x080060d1
 80060f8:	080060d1 	.word	0x080060d1
 80060fc:	080060d1 	.word	0x080060d1
 8006100:	08006155 	.word	0x08006155
 8006104:	080060d1 	.word	0x080060d1
 8006108:	080060d1 	.word	0x080060d1
 800610c:	080060d1 	.word	0x080060d1
 8006110:	080060d1 	.word	0x080060d1
 8006114:	08006259 	.word	0x08006259
 8006118:	08006181 	.word	0x08006181
 800611c:	08006213 	.word	0x08006213
 8006120:	080060d1 	.word	0x080060d1
 8006124:	080060d1 	.word	0x080060d1
 8006128:	0800627b 	.word	0x0800627b
 800612c:	080060d1 	.word	0x080060d1
 8006130:	08006181 	.word	0x08006181
 8006134:	080060d1 	.word	0x080060d1
 8006138:	080060d1 	.word	0x080060d1
 800613c:	0800621b 	.word	0x0800621b
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	1d1a      	adds	r2, r3, #4
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	602a      	str	r2, [r5, #0]
 8006148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800614c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006150:	2301      	movs	r3, #1
 8006152:	e09f      	b.n	8006294 <_printf_i+0x1ec>
 8006154:	6820      	ldr	r0, [r4, #0]
 8006156:	682b      	ldr	r3, [r5, #0]
 8006158:	0607      	lsls	r7, r0, #24
 800615a:	f103 0104 	add.w	r1, r3, #4
 800615e:	6029      	str	r1, [r5, #0]
 8006160:	d501      	bpl.n	8006166 <_printf_i+0xbe>
 8006162:	681e      	ldr	r6, [r3, #0]
 8006164:	e003      	b.n	800616e <_printf_i+0xc6>
 8006166:	0646      	lsls	r6, r0, #25
 8006168:	d5fb      	bpl.n	8006162 <_printf_i+0xba>
 800616a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800616e:	2e00      	cmp	r6, #0
 8006170:	da03      	bge.n	800617a <_printf_i+0xd2>
 8006172:	232d      	movs	r3, #45	; 0x2d
 8006174:	4276      	negs	r6, r6
 8006176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800617a:	485a      	ldr	r0, [pc, #360]	; (80062e4 <_printf_i+0x23c>)
 800617c:	230a      	movs	r3, #10
 800617e:	e012      	b.n	80061a6 <_printf_i+0xfe>
 8006180:	682b      	ldr	r3, [r5, #0]
 8006182:	6820      	ldr	r0, [r4, #0]
 8006184:	1d19      	adds	r1, r3, #4
 8006186:	6029      	str	r1, [r5, #0]
 8006188:	0605      	lsls	r5, r0, #24
 800618a:	d501      	bpl.n	8006190 <_printf_i+0xe8>
 800618c:	681e      	ldr	r6, [r3, #0]
 800618e:	e002      	b.n	8006196 <_printf_i+0xee>
 8006190:	0641      	lsls	r1, r0, #25
 8006192:	d5fb      	bpl.n	800618c <_printf_i+0xe4>
 8006194:	881e      	ldrh	r6, [r3, #0]
 8006196:	4853      	ldr	r0, [pc, #332]	; (80062e4 <_printf_i+0x23c>)
 8006198:	2f6f      	cmp	r7, #111	; 0x6f
 800619a:	bf0c      	ite	eq
 800619c:	2308      	moveq	r3, #8
 800619e:	230a      	movne	r3, #10
 80061a0:	2100      	movs	r1, #0
 80061a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061a6:	6865      	ldr	r5, [r4, #4]
 80061a8:	60a5      	str	r5, [r4, #8]
 80061aa:	2d00      	cmp	r5, #0
 80061ac:	bfa2      	ittt	ge
 80061ae:	6821      	ldrge	r1, [r4, #0]
 80061b0:	f021 0104 	bicge.w	r1, r1, #4
 80061b4:	6021      	strge	r1, [r4, #0]
 80061b6:	b90e      	cbnz	r6, 80061bc <_printf_i+0x114>
 80061b8:	2d00      	cmp	r5, #0
 80061ba:	d04b      	beq.n	8006254 <_printf_i+0x1ac>
 80061bc:	4615      	mov	r5, r2
 80061be:	fbb6 f1f3 	udiv	r1, r6, r3
 80061c2:	fb03 6711 	mls	r7, r3, r1, r6
 80061c6:	5dc7      	ldrb	r7, [r0, r7]
 80061c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061cc:	4637      	mov	r7, r6
 80061ce:	42bb      	cmp	r3, r7
 80061d0:	460e      	mov	r6, r1
 80061d2:	d9f4      	bls.n	80061be <_printf_i+0x116>
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d10b      	bne.n	80061f0 <_printf_i+0x148>
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	07de      	lsls	r6, r3, #31
 80061dc:	d508      	bpl.n	80061f0 <_printf_i+0x148>
 80061de:	6923      	ldr	r3, [r4, #16]
 80061e0:	6861      	ldr	r1, [r4, #4]
 80061e2:	4299      	cmp	r1, r3
 80061e4:	bfde      	ittt	le
 80061e6:	2330      	movle	r3, #48	; 0x30
 80061e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061f0:	1b52      	subs	r2, r2, r5
 80061f2:	6122      	str	r2, [r4, #16]
 80061f4:	f8cd a000 	str.w	sl, [sp]
 80061f8:	464b      	mov	r3, r9
 80061fa:	aa03      	add	r2, sp, #12
 80061fc:	4621      	mov	r1, r4
 80061fe:	4640      	mov	r0, r8
 8006200:	f7ff fee4 	bl	8005fcc <_printf_common>
 8006204:	3001      	adds	r0, #1
 8006206:	d14a      	bne.n	800629e <_printf_i+0x1f6>
 8006208:	f04f 30ff 	mov.w	r0, #4294967295
 800620c:	b004      	add	sp, #16
 800620e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	f043 0320 	orr.w	r3, r3, #32
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	4833      	ldr	r0, [pc, #204]	; (80062e8 <_printf_i+0x240>)
 800621c:	2778      	movs	r7, #120	; 0x78
 800621e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	6829      	ldr	r1, [r5, #0]
 8006226:	061f      	lsls	r7, r3, #24
 8006228:	f851 6b04 	ldr.w	r6, [r1], #4
 800622c:	d402      	bmi.n	8006234 <_printf_i+0x18c>
 800622e:	065f      	lsls	r7, r3, #25
 8006230:	bf48      	it	mi
 8006232:	b2b6      	uxthmi	r6, r6
 8006234:	07df      	lsls	r7, r3, #31
 8006236:	bf48      	it	mi
 8006238:	f043 0320 	orrmi.w	r3, r3, #32
 800623c:	6029      	str	r1, [r5, #0]
 800623e:	bf48      	it	mi
 8006240:	6023      	strmi	r3, [r4, #0]
 8006242:	b91e      	cbnz	r6, 800624c <_printf_i+0x1a4>
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	f023 0320 	bic.w	r3, r3, #32
 800624a:	6023      	str	r3, [r4, #0]
 800624c:	2310      	movs	r3, #16
 800624e:	e7a7      	b.n	80061a0 <_printf_i+0xf8>
 8006250:	4824      	ldr	r0, [pc, #144]	; (80062e4 <_printf_i+0x23c>)
 8006252:	e7e4      	b.n	800621e <_printf_i+0x176>
 8006254:	4615      	mov	r5, r2
 8006256:	e7bd      	b.n	80061d4 <_printf_i+0x12c>
 8006258:	682b      	ldr	r3, [r5, #0]
 800625a:	6826      	ldr	r6, [r4, #0]
 800625c:	6961      	ldr	r1, [r4, #20]
 800625e:	1d18      	adds	r0, r3, #4
 8006260:	6028      	str	r0, [r5, #0]
 8006262:	0635      	lsls	r5, r6, #24
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	d501      	bpl.n	800626c <_printf_i+0x1c4>
 8006268:	6019      	str	r1, [r3, #0]
 800626a:	e002      	b.n	8006272 <_printf_i+0x1ca>
 800626c:	0670      	lsls	r0, r6, #25
 800626e:	d5fb      	bpl.n	8006268 <_printf_i+0x1c0>
 8006270:	8019      	strh	r1, [r3, #0]
 8006272:	2300      	movs	r3, #0
 8006274:	6123      	str	r3, [r4, #16]
 8006276:	4615      	mov	r5, r2
 8006278:	e7bc      	b.n	80061f4 <_printf_i+0x14c>
 800627a:	682b      	ldr	r3, [r5, #0]
 800627c:	1d1a      	adds	r2, r3, #4
 800627e:	602a      	str	r2, [r5, #0]
 8006280:	681d      	ldr	r5, [r3, #0]
 8006282:	6862      	ldr	r2, [r4, #4]
 8006284:	2100      	movs	r1, #0
 8006286:	4628      	mov	r0, r5
 8006288:	f7f9 ffa2 	bl	80001d0 <memchr>
 800628c:	b108      	cbz	r0, 8006292 <_printf_i+0x1ea>
 800628e:	1b40      	subs	r0, r0, r5
 8006290:	6060      	str	r0, [r4, #4]
 8006292:	6863      	ldr	r3, [r4, #4]
 8006294:	6123      	str	r3, [r4, #16]
 8006296:	2300      	movs	r3, #0
 8006298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800629c:	e7aa      	b.n	80061f4 <_printf_i+0x14c>
 800629e:	6923      	ldr	r3, [r4, #16]
 80062a0:	462a      	mov	r2, r5
 80062a2:	4649      	mov	r1, r9
 80062a4:	4640      	mov	r0, r8
 80062a6:	47d0      	blx	sl
 80062a8:	3001      	adds	r0, #1
 80062aa:	d0ad      	beq.n	8006208 <_printf_i+0x160>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	079b      	lsls	r3, r3, #30
 80062b0:	d413      	bmi.n	80062da <_printf_i+0x232>
 80062b2:	68e0      	ldr	r0, [r4, #12]
 80062b4:	9b03      	ldr	r3, [sp, #12]
 80062b6:	4298      	cmp	r0, r3
 80062b8:	bfb8      	it	lt
 80062ba:	4618      	movlt	r0, r3
 80062bc:	e7a6      	b.n	800620c <_printf_i+0x164>
 80062be:	2301      	movs	r3, #1
 80062c0:	4632      	mov	r2, r6
 80062c2:	4649      	mov	r1, r9
 80062c4:	4640      	mov	r0, r8
 80062c6:	47d0      	blx	sl
 80062c8:	3001      	adds	r0, #1
 80062ca:	d09d      	beq.n	8006208 <_printf_i+0x160>
 80062cc:	3501      	adds	r5, #1
 80062ce:	68e3      	ldr	r3, [r4, #12]
 80062d0:	9903      	ldr	r1, [sp, #12]
 80062d2:	1a5b      	subs	r3, r3, r1
 80062d4:	42ab      	cmp	r3, r5
 80062d6:	dcf2      	bgt.n	80062be <_printf_i+0x216>
 80062d8:	e7eb      	b.n	80062b2 <_printf_i+0x20a>
 80062da:	2500      	movs	r5, #0
 80062dc:	f104 0619 	add.w	r6, r4, #25
 80062e0:	e7f5      	b.n	80062ce <_printf_i+0x226>
 80062e2:	bf00      	nop
 80062e4:	08006dc1 	.word	0x08006dc1
 80062e8:	08006dd2 	.word	0x08006dd2

080062ec <__sflush_r>:
 80062ec:	898a      	ldrh	r2, [r1, #12]
 80062ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062f2:	4605      	mov	r5, r0
 80062f4:	0710      	lsls	r0, r2, #28
 80062f6:	460c      	mov	r4, r1
 80062f8:	d458      	bmi.n	80063ac <__sflush_r+0xc0>
 80062fa:	684b      	ldr	r3, [r1, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	dc05      	bgt.n	800630c <__sflush_r+0x20>
 8006300:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006302:	2b00      	cmp	r3, #0
 8006304:	dc02      	bgt.n	800630c <__sflush_r+0x20>
 8006306:	2000      	movs	r0, #0
 8006308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800630c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800630e:	2e00      	cmp	r6, #0
 8006310:	d0f9      	beq.n	8006306 <__sflush_r+0x1a>
 8006312:	2300      	movs	r3, #0
 8006314:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006318:	682f      	ldr	r7, [r5, #0]
 800631a:	6a21      	ldr	r1, [r4, #32]
 800631c:	602b      	str	r3, [r5, #0]
 800631e:	d032      	beq.n	8006386 <__sflush_r+0x9a>
 8006320:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006322:	89a3      	ldrh	r3, [r4, #12]
 8006324:	075a      	lsls	r2, r3, #29
 8006326:	d505      	bpl.n	8006334 <__sflush_r+0x48>
 8006328:	6863      	ldr	r3, [r4, #4]
 800632a:	1ac0      	subs	r0, r0, r3
 800632c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800632e:	b10b      	cbz	r3, 8006334 <__sflush_r+0x48>
 8006330:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006332:	1ac0      	subs	r0, r0, r3
 8006334:	2300      	movs	r3, #0
 8006336:	4602      	mov	r2, r0
 8006338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800633a:	6a21      	ldr	r1, [r4, #32]
 800633c:	4628      	mov	r0, r5
 800633e:	47b0      	blx	r6
 8006340:	1c43      	adds	r3, r0, #1
 8006342:	89a3      	ldrh	r3, [r4, #12]
 8006344:	d106      	bne.n	8006354 <__sflush_r+0x68>
 8006346:	6829      	ldr	r1, [r5, #0]
 8006348:	291d      	cmp	r1, #29
 800634a:	d82b      	bhi.n	80063a4 <__sflush_r+0xb8>
 800634c:	4a29      	ldr	r2, [pc, #164]	; (80063f4 <__sflush_r+0x108>)
 800634e:	410a      	asrs	r2, r1
 8006350:	07d6      	lsls	r6, r2, #31
 8006352:	d427      	bmi.n	80063a4 <__sflush_r+0xb8>
 8006354:	2200      	movs	r2, #0
 8006356:	6062      	str	r2, [r4, #4]
 8006358:	04d9      	lsls	r1, r3, #19
 800635a:	6922      	ldr	r2, [r4, #16]
 800635c:	6022      	str	r2, [r4, #0]
 800635e:	d504      	bpl.n	800636a <__sflush_r+0x7e>
 8006360:	1c42      	adds	r2, r0, #1
 8006362:	d101      	bne.n	8006368 <__sflush_r+0x7c>
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	b903      	cbnz	r3, 800636a <__sflush_r+0x7e>
 8006368:	6560      	str	r0, [r4, #84]	; 0x54
 800636a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800636c:	602f      	str	r7, [r5, #0]
 800636e:	2900      	cmp	r1, #0
 8006370:	d0c9      	beq.n	8006306 <__sflush_r+0x1a>
 8006372:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006376:	4299      	cmp	r1, r3
 8006378:	d002      	beq.n	8006380 <__sflush_r+0x94>
 800637a:	4628      	mov	r0, r5
 800637c:	f7ff fbea 	bl	8005b54 <_free_r>
 8006380:	2000      	movs	r0, #0
 8006382:	6360      	str	r0, [r4, #52]	; 0x34
 8006384:	e7c0      	b.n	8006308 <__sflush_r+0x1c>
 8006386:	2301      	movs	r3, #1
 8006388:	4628      	mov	r0, r5
 800638a:	47b0      	blx	r6
 800638c:	1c41      	adds	r1, r0, #1
 800638e:	d1c8      	bne.n	8006322 <__sflush_r+0x36>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0c5      	beq.n	8006322 <__sflush_r+0x36>
 8006396:	2b1d      	cmp	r3, #29
 8006398:	d001      	beq.n	800639e <__sflush_r+0xb2>
 800639a:	2b16      	cmp	r3, #22
 800639c:	d101      	bne.n	80063a2 <__sflush_r+0xb6>
 800639e:	602f      	str	r7, [r5, #0]
 80063a0:	e7b1      	b.n	8006306 <__sflush_r+0x1a>
 80063a2:	89a3      	ldrh	r3, [r4, #12]
 80063a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063a8:	81a3      	strh	r3, [r4, #12]
 80063aa:	e7ad      	b.n	8006308 <__sflush_r+0x1c>
 80063ac:	690f      	ldr	r7, [r1, #16]
 80063ae:	2f00      	cmp	r7, #0
 80063b0:	d0a9      	beq.n	8006306 <__sflush_r+0x1a>
 80063b2:	0793      	lsls	r3, r2, #30
 80063b4:	680e      	ldr	r6, [r1, #0]
 80063b6:	bf08      	it	eq
 80063b8:	694b      	ldreq	r3, [r1, #20]
 80063ba:	600f      	str	r7, [r1, #0]
 80063bc:	bf18      	it	ne
 80063be:	2300      	movne	r3, #0
 80063c0:	eba6 0807 	sub.w	r8, r6, r7
 80063c4:	608b      	str	r3, [r1, #8]
 80063c6:	f1b8 0f00 	cmp.w	r8, #0
 80063ca:	dd9c      	ble.n	8006306 <__sflush_r+0x1a>
 80063cc:	6a21      	ldr	r1, [r4, #32]
 80063ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063d0:	4643      	mov	r3, r8
 80063d2:	463a      	mov	r2, r7
 80063d4:	4628      	mov	r0, r5
 80063d6:	47b0      	blx	r6
 80063d8:	2800      	cmp	r0, #0
 80063da:	dc06      	bgt.n	80063ea <__sflush_r+0xfe>
 80063dc:	89a3      	ldrh	r3, [r4, #12]
 80063de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063e2:	81a3      	strh	r3, [r4, #12]
 80063e4:	f04f 30ff 	mov.w	r0, #4294967295
 80063e8:	e78e      	b.n	8006308 <__sflush_r+0x1c>
 80063ea:	4407      	add	r7, r0
 80063ec:	eba8 0800 	sub.w	r8, r8, r0
 80063f0:	e7e9      	b.n	80063c6 <__sflush_r+0xda>
 80063f2:	bf00      	nop
 80063f4:	dfbffffe 	.word	0xdfbffffe

080063f8 <_fflush_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	690b      	ldr	r3, [r1, #16]
 80063fc:	4605      	mov	r5, r0
 80063fe:	460c      	mov	r4, r1
 8006400:	b913      	cbnz	r3, 8006408 <_fflush_r+0x10>
 8006402:	2500      	movs	r5, #0
 8006404:	4628      	mov	r0, r5
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	b118      	cbz	r0, 8006412 <_fflush_r+0x1a>
 800640a:	6a03      	ldr	r3, [r0, #32]
 800640c:	b90b      	cbnz	r3, 8006412 <_fflush_r+0x1a>
 800640e:	f7ff f9ab 	bl	8005768 <__sinit>
 8006412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d0f3      	beq.n	8006402 <_fflush_r+0xa>
 800641a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800641c:	07d0      	lsls	r0, r2, #31
 800641e:	d404      	bmi.n	800642a <_fflush_r+0x32>
 8006420:	0599      	lsls	r1, r3, #22
 8006422:	d402      	bmi.n	800642a <_fflush_r+0x32>
 8006424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006426:	f7ff fb93 	bl	8005b50 <__retarget_lock_acquire_recursive>
 800642a:	4628      	mov	r0, r5
 800642c:	4621      	mov	r1, r4
 800642e:	f7ff ff5d 	bl	80062ec <__sflush_r>
 8006432:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006434:	07da      	lsls	r2, r3, #31
 8006436:	4605      	mov	r5, r0
 8006438:	d4e4      	bmi.n	8006404 <_fflush_r+0xc>
 800643a:	89a3      	ldrh	r3, [r4, #12]
 800643c:	059b      	lsls	r3, r3, #22
 800643e:	d4e1      	bmi.n	8006404 <_fflush_r+0xc>
 8006440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006442:	f7ff fb86 	bl	8005b52 <__retarget_lock_release_recursive>
 8006446:	e7dd      	b.n	8006404 <_fflush_r+0xc>

08006448 <__swhatbuf_r>:
 8006448:	b570      	push	{r4, r5, r6, lr}
 800644a:	460c      	mov	r4, r1
 800644c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006450:	2900      	cmp	r1, #0
 8006452:	b096      	sub	sp, #88	; 0x58
 8006454:	4615      	mov	r5, r2
 8006456:	461e      	mov	r6, r3
 8006458:	da0d      	bge.n	8006476 <__swhatbuf_r+0x2e>
 800645a:	89a3      	ldrh	r3, [r4, #12]
 800645c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006460:	f04f 0100 	mov.w	r1, #0
 8006464:	bf0c      	ite	eq
 8006466:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800646a:	2340      	movne	r3, #64	; 0x40
 800646c:	2000      	movs	r0, #0
 800646e:	6031      	str	r1, [r6, #0]
 8006470:	602b      	str	r3, [r5, #0]
 8006472:	b016      	add	sp, #88	; 0x58
 8006474:	bd70      	pop	{r4, r5, r6, pc}
 8006476:	466a      	mov	r2, sp
 8006478:	f000 f848 	bl	800650c <_fstat_r>
 800647c:	2800      	cmp	r0, #0
 800647e:	dbec      	blt.n	800645a <__swhatbuf_r+0x12>
 8006480:	9901      	ldr	r1, [sp, #4]
 8006482:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006486:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800648a:	4259      	negs	r1, r3
 800648c:	4159      	adcs	r1, r3
 800648e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006492:	e7eb      	b.n	800646c <__swhatbuf_r+0x24>

08006494 <__smakebuf_r>:
 8006494:	898b      	ldrh	r3, [r1, #12]
 8006496:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006498:	079d      	lsls	r5, r3, #30
 800649a:	4606      	mov	r6, r0
 800649c:	460c      	mov	r4, r1
 800649e:	d507      	bpl.n	80064b0 <__smakebuf_r+0x1c>
 80064a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	6123      	str	r3, [r4, #16]
 80064a8:	2301      	movs	r3, #1
 80064aa:	6163      	str	r3, [r4, #20]
 80064ac:	b002      	add	sp, #8
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
 80064b0:	ab01      	add	r3, sp, #4
 80064b2:	466a      	mov	r2, sp
 80064b4:	f7ff ffc8 	bl	8006448 <__swhatbuf_r>
 80064b8:	9900      	ldr	r1, [sp, #0]
 80064ba:	4605      	mov	r5, r0
 80064bc:	4630      	mov	r0, r6
 80064be:	f7ff fbb5 	bl	8005c2c <_malloc_r>
 80064c2:	b948      	cbnz	r0, 80064d8 <__smakebuf_r+0x44>
 80064c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064c8:	059a      	lsls	r2, r3, #22
 80064ca:	d4ef      	bmi.n	80064ac <__smakebuf_r+0x18>
 80064cc:	f023 0303 	bic.w	r3, r3, #3
 80064d0:	f043 0302 	orr.w	r3, r3, #2
 80064d4:	81a3      	strh	r3, [r4, #12]
 80064d6:	e7e3      	b.n	80064a0 <__smakebuf_r+0xc>
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	6020      	str	r0, [r4, #0]
 80064dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e0:	81a3      	strh	r3, [r4, #12]
 80064e2:	9b00      	ldr	r3, [sp, #0]
 80064e4:	6163      	str	r3, [r4, #20]
 80064e6:	9b01      	ldr	r3, [sp, #4]
 80064e8:	6120      	str	r0, [r4, #16]
 80064ea:	b15b      	cbz	r3, 8006504 <__smakebuf_r+0x70>
 80064ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064f0:	4630      	mov	r0, r6
 80064f2:	f000 f81d 	bl	8006530 <_isatty_r>
 80064f6:	b128      	cbz	r0, 8006504 <__smakebuf_r+0x70>
 80064f8:	89a3      	ldrh	r3, [r4, #12]
 80064fa:	f023 0303 	bic.w	r3, r3, #3
 80064fe:	f043 0301 	orr.w	r3, r3, #1
 8006502:	81a3      	strh	r3, [r4, #12]
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	431d      	orrs	r5, r3
 8006508:	81a5      	strh	r5, [r4, #12]
 800650a:	e7cf      	b.n	80064ac <__smakebuf_r+0x18>

0800650c <_fstat_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	4d07      	ldr	r5, [pc, #28]	; (800652c <_fstat_r+0x20>)
 8006510:	2300      	movs	r3, #0
 8006512:	4604      	mov	r4, r0
 8006514:	4608      	mov	r0, r1
 8006516:	4611      	mov	r1, r2
 8006518:	602b      	str	r3, [r5, #0]
 800651a:	f7fa fe36 	bl	800118a <_fstat>
 800651e:	1c43      	adds	r3, r0, #1
 8006520:	d102      	bne.n	8006528 <_fstat_r+0x1c>
 8006522:	682b      	ldr	r3, [r5, #0]
 8006524:	b103      	cbz	r3, 8006528 <_fstat_r+0x1c>
 8006526:	6023      	str	r3, [r4, #0]
 8006528:	bd38      	pop	{r3, r4, r5, pc}
 800652a:	bf00      	nop
 800652c:	200006e8 	.word	0x200006e8

08006530 <_isatty_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4d06      	ldr	r5, [pc, #24]	; (800654c <_isatty_r+0x1c>)
 8006534:	2300      	movs	r3, #0
 8006536:	4604      	mov	r4, r0
 8006538:	4608      	mov	r0, r1
 800653a:	602b      	str	r3, [r5, #0]
 800653c:	f7fa fe35 	bl	80011aa <_isatty>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	d102      	bne.n	800654a <_isatty_r+0x1a>
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	b103      	cbz	r3, 800654a <_isatty_r+0x1a>
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	bd38      	pop	{r3, r4, r5, pc}
 800654c:	200006e8 	.word	0x200006e8

08006550 <_sbrk_r>:
 8006550:	b538      	push	{r3, r4, r5, lr}
 8006552:	4d06      	ldr	r5, [pc, #24]	; (800656c <_sbrk_r+0x1c>)
 8006554:	2300      	movs	r3, #0
 8006556:	4604      	mov	r4, r0
 8006558:	4608      	mov	r0, r1
 800655a:	602b      	str	r3, [r5, #0]
 800655c:	f7fa fe3e 	bl	80011dc <_sbrk>
 8006560:	1c43      	adds	r3, r0, #1
 8006562:	d102      	bne.n	800656a <_sbrk_r+0x1a>
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	b103      	cbz	r3, 800656a <_sbrk_r+0x1a>
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	bd38      	pop	{r3, r4, r5, pc}
 800656c:	200006e8 	.word	0x200006e8

08006570 <_init>:
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	bf00      	nop
 8006574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006576:	bc08      	pop	{r3}
 8006578:	469e      	mov	lr, r3
 800657a:	4770      	bx	lr

0800657c <_fini>:
 800657c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657e:	bf00      	nop
 8006580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006582:	bc08      	pop	{r3}
 8006584:	469e      	mov	lr, r3
 8006586:	4770      	bx	lr
